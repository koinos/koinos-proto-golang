// Code generated by capnpc-go. DO NOT EDIT.

package mempool

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	protocol "koinos/protocol"
	rpc "koinos/rpc"
	strconv "strconv"
)

type MempoolReservedRequest struct{ capnp.Struct }

// MempoolReservedRequest_TypeID is the unique identifier for the type MempoolReservedRequest.
const MempoolReservedRequest_TypeID = 0xe308cfcad1d2a029

func NewMempoolReservedRequest(s *capnp.Segment) (MempoolReservedRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MempoolReservedRequest{st}, err
}

func NewRootMempoolReservedRequest(s *capnp.Segment) (MempoolReservedRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MempoolReservedRequest{st}, err
}

func ReadRootMempoolReservedRequest(msg *capnp.Message) (MempoolReservedRequest, error) {
	root, err := msg.Root()
	return MempoolReservedRequest{root.Struct()}, err
}

func (s MempoolReservedRequest) String() string {
	str, _ := text.Marshal(0xe308cfcad1d2a029, s.Struct)
	return str
}

// MempoolReservedRequest_List is a list of MempoolReservedRequest.
type MempoolReservedRequest_List struct{ capnp.List }

// NewMempoolReservedRequest creates a new list of MempoolReservedRequest.
func NewMempoolReservedRequest_List(s *capnp.Segment, sz int32) (MempoolReservedRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MempoolReservedRequest_List{l}, err
}

func (s MempoolReservedRequest_List) At(i int) MempoolReservedRequest {
	return MempoolReservedRequest{s.List.Struct(i)}
}

func (s MempoolReservedRequest_List) Set(i int, v MempoolReservedRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MempoolReservedRequest_List) String() string {
	str, _ := text.MarshalList(0xe308cfcad1d2a029, s.List)
	return str
}

// MempoolReservedRequest_Future is a wrapper for a MempoolReservedRequest promised by a client call.
type MempoolReservedRequest_Future struct{ *capnp.Future }

func (p MempoolReservedRequest_Future) Struct() (MempoolReservedRequest, error) {
	s, err := p.Future.Struct()
	return MempoolReservedRequest{s}, err
}

type CheckPendingAccountResourcesRequest struct{ capnp.Struct }

// CheckPendingAccountResourcesRequest_TypeID is the unique identifier for the type CheckPendingAccountResourcesRequest.
const CheckPendingAccountResourcesRequest_TypeID = 0xc797e21ceb4b22dd

func NewCheckPendingAccountResourcesRequest(s *capnp.Segment) (CheckPendingAccountResourcesRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return CheckPendingAccountResourcesRequest{st}, err
}

func NewRootCheckPendingAccountResourcesRequest(s *capnp.Segment) (CheckPendingAccountResourcesRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return CheckPendingAccountResourcesRequest{st}, err
}

func ReadRootCheckPendingAccountResourcesRequest(msg *capnp.Message) (CheckPendingAccountResourcesRequest, error) {
	root, err := msg.Root()
	return CheckPendingAccountResourcesRequest{root.Struct()}, err
}

func (s CheckPendingAccountResourcesRequest) String() string {
	str, _ := text.Marshal(0xc797e21ceb4b22dd, s.Struct)
	return str
}

func (s CheckPendingAccountResourcesRequest) Payer() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CheckPendingAccountResourcesRequest) HasPayer() bool {
	return s.Struct.HasPtr(0)
}

func (s CheckPendingAccountResourcesRequest) SetPayer(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s CheckPendingAccountResourcesRequest) MaxPayerResources() uint64 {
	return s.Struct.Uint64(0)
}

func (s CheckPendingAccountResourcesRequest) SetMaxPayerResources(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s CheckPendingAccountResourcesRequest) TrxResourceLimit() uint64 {
	return s.Struct.Uint64(8)
}

func (s CheckPendingAccountResourcesRequest) SetTrxResourceLimit(v uint64) {
	s.Struct.SetUint64(8, v)
}

// CheckPendingAccountResourcesRequest_List is a list of CheckPendingAccountResourcesRequest.
type CheckPendingAccountResourcesRequest_List struct{ capnp.List }

// NewCheckPendingAccountResourcesRequest creates a new list of CheckPendingAccountResourcesRequest.
func NewCheckPendingAccountResourcesRequest_List(s *capnp.Segment, sz int32) (CheckPendingAccountResourcesRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return CheckPendingAccountResourcesRequest_List{l}, err
}

func (s CheckPendingAccountResourcesRequest_List) At(i int) CheckPendingAccountResourcesRequest {
	return CheckPendingAccountResourcesRequest{s.List.Struct(i)}
}

func (s CheckPendingAccountResourcesRequest_List) Set(i int, v CheckPendingAccountResourcesRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CheckPendingAccountResourcesRequest_List) String() string {
	str, _ := text.MarshalList(0xc797e21ceb4b22dd, s.List)
	return str
}

// CheckPendingAccountResourcesRequest_Future is a wrapper for a CheckPendingAccountResourcesRequest promised by a client call.
type CheckPendingAccountResourcesRequest_Future struct{ *capnp.Future }

func (p CheckPendingAccountResourcesRequest_Future) Struct() (CheckPendingAccountResourcesRequest, error) {
	s, err := p.Future.Struct()
	return CheckPendingAccountResourcesRequest{s}, err
}

type GetPendingTransactionsRequest struct{ capnp.Struct }

// GetPendingTransactionsRequest_TypeID is the unique identifier for the type GetPendingTransactionsRequest.
const GetPendingTransactionsRequest_TypeID = 0xff4847a1cca6dda0

func NewGetPendingTransactionsRequest(s *capnp.Segment) (GetPendingTransactionsRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GetPendingTransactionsRequest{st}, err
}

func NewRootGetPendingTransactionsRequest(s *capnp.Segment) (GetPendingTransactionsRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GetPendingTransactionsRequest{st}, err
}

func ReadRootGetPendingTransactionsRequest(msg *capnp.Message) (GetPendingTransactionsRequest, error) {
	root, err := msg.Root()
	return GetPendingTransactionsRequest{root.Struct()}, err
}

func (s GetPendingTransactionsRequest) String() string {
	str, _ := text.Marshal(0xff4847a1cca6dda0, s.Struct)
	return str
}

func (s GetPendingTransactionsRequest) Limit() uint64 {
	return s.Struct.Uint64(0)
}

func (s GetPendingTransactionsRequest) SetLimit(v uint64) {
	s.Struct.SetUint64(0, v)
}

// GetPendingTransactionsRequest_List is a list of GetPendingTransactionsRequest.
type GetPendingTransactionsRequest_List struct{ capnp.List }

// NewGetPendingTransactionsRequest creates a new list of GetPendingTransactionsRequest.
func NewGetPendingTransactionsRequest_List(s *capnp.Segment, sz int32) (GetPendingTransactionsRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return GetPendingTransactionsRequest_List{l}, err
}

func (s GetPendingTransactionsRequest_List) At(i int) GetPendingTransactionsRequest {
	return GetPendingTransactionsRequest{s.List.Struct(i)}
}

func (s GetPendingTransactionsRequest_List) Set(i int, v GetPendingTransactionsRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s GetPendingTransactionsRequest_List) String() string {
	str, _ := text.MarshalList(0xff4847a1cca6dda0, s.List)
	return str
}

// GetPendingTransactionsRequest_Future is a wrapper for a GetPendingTransactionsRequest promised by a client call.
type GetPendingTransactionsRequest_Future struct{ *capnp.Future }

func (p GetPendingTransactionsRequest_Future) Struct() (GetPendingTransactionsRequest, error) {
	s, err := p.Future.Struct()
	return GetPendingTransactionsRequest{s}, err
}

type MempoolRPCRequest struct{ capnp.Struct }
type MempoolRPCRequest_Which uint16

const (
	MempoolRPCRequest_Which_mempoolReserved              MempoolRPCRequest_Which = 0
	MempoolRPCRequest_Which_checkPendingAccountResources MempoolRPCRequest_Which = 1
	MempoolRPCRequest_Which_getPendingTransactions       MempoolRPCRequest_Which = 2
)

func (w MempoolRPCRequest_Which) String() string {
	const s = "mempoolReservedcheckPendingAccountResourcesgetPendingTransactions"
	switch w {
	case MempoolRPCRequest_Which_mempoolReserved:
		return s[0:15]
	case MempoolRPCRequest_Which_checkPendingAccountResources:
		return s[15:43]
	case MempoolRPCRequest_Which_getPendingTransactions:
		return s[43:65]

	}
	return "MempoolRPCRequest_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MempoolRPCRequest_TypeID is the unique identifier for the type MempoolRPCRequest.
const MempoolRPCRequest_TypeID = 0xca8abc89f18ff6cb

func NewMempoolRPCRequest(s *capnp.Segment) (MempoolRPCRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MempoolRPCRequest{st}, err
}

func NewRootMempoolRPCRequest(s *capnp.Segment) (MempoolRPCRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MempoolRPCRequest{st}, err
}

func ReadRootMempoolRPCRequest(msg *capnp.Message) (MempoolRPCRequest, error) {
	root, err := msg.Root()
	return MempoolRPCRequest{root.Struct()}, err
}

func (s MempoolRPCRequest) String() string {
	str, _ := text.Marshal(0xca8abc89f18ff6cb, s.Struct)
	return str
}

func (s MempoolRPCRequest) Which() MempoolRPCRequest_Which {
	return MempoolRPCRequest_Which(s.Struct.Uint16(0))
}
func (s MempoolRPCRequest) MempoolReserved() (MempoolReservedRequest, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != mempoolReserved")
	}
	p, err := s.Struct.Ptr(0)
	return MempoolReservedRequest{Struct: p.Struct()}, err
}

func (s MempoolRPCRequest) HasMempoolReserved() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s MempoolRPCRequest) SetMempoolReserved(v MempoolReservedRequest) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMempoolReserved sets the mempoolReserved field to a newly
// allocated MempoolReservedRequest struct, preferring placement in s's segment.
func (s MempoolRPCRequest) NewMempoolReserved() (MempoolReservedRequest, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewMempoolReservedRequest(s.Struct.Segment())
	if err != nil {
		return MempoolReservedRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MempoolRPCRequest) CheckPendingAccountResources() (CheckPendingAccountResourcesRequest, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != checkPendingAccountResources")
	}
	p, err := s.Struct.Ptr(0)
	return CheckPendingAccountResourcesRequest{Struct: p.Struct()}, err
}

func (s MempoolRPCRequest) HasCheckPendingAccountResources() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s MempoolRPCRequest) SetCheckPendingAccountResources(v CheckPendingAccountResourcesRequest) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCheckPendingAccountResources sets the checkPendingAccountResources field to a newly
// allocated CheckPendingAccountResourcesRequest struct, preferring placement in s's segment.
func (s MempoolRPCRequest) NewCheckPendingAccountResources() (CheckPendingAccountResourcesRequest, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewCheckPendingAccountResourcesRequest(s.Struct.Segment())
	if err != nil {
		return CheckPendingAccountResourcesRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MempoolRPCRequest) GetPendingTransactions() (GetPendingTransactionsRequest, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != getPendingTransactions")
	}
	p, err := s.Struct.Ptr(0)
	return GetPendingTransactionsRequest{Struct: p.Struct()}, err
}

func (s MempoolRPCRequest) HasGetPendingTransactions() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s MempoolRPCRequest) SetGetPendingTransactions(v GetPendingTransactionsRequest) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGetPendingTransactions sets the getPendingTransactions field to a newly
// allocated GetPendingTransactionsRequest struct, preferring placement in s's segment.
func (s MempoolRPCRequest) NewGetPendingTransactions() (GetPendingTransactionsRequest, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewGetPendingTransactionsRequest(s.Struct.Segment())
	if err != nil {
		return GetPendingTransactionsRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MempoolRPCRequest_List is a list of MempoolRPCRequest.
type MempoolRPCRequest_List struct{ capnp.List }

// NewMempoolRPCRequest creates a new list of MempoolRPCRequest.
func NewMempoolRPCRequest_List(s *capnp.Segment, sz int32) (MempoolRPCRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MempoolRPCRequest_List{l}, err
}

func (s MempoolRPCRequest_List) At(i int) MempoolRPCRequest {
	return MempoolRPCRequest{s.List.Struct(i)}
}

func (s MempoolRPCRequest_List) Set(i int, v MempoolRPCRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MempoolRPCRequest_List) String() string {
	str, _ := text.MarshalList(0xca8abc89f18ff6cb, s.List)
	return str
}

// MempoolRPCRequest_Future is a wrapper for a MempoolRPCRequest promised by a client call.
type MempoolRPCRequest_Future struct{ *capnp.Future }

func (p MempoolRPCRequest_Future) Struct() (MempoolRPCRequest, error) {
	s, err := p.Future.Struct()
	return MempoolRPCRequest{s}, err
}

func (p MempoolRPCRequest_Future) MempoolReserved() MempoolReservedRequest_Future {
	return MempoolReservedRequest_Future{Future: p.Future.Field(0, nil)}
}

func (p MempoolRPCRequest_Future) CheckPendingAccountResources() CheckPendingAccountResourcesRequest_Future {
	return CheckPendingAccountResourcesRequest_Future{Future: p.Future.Field(0, nil)}
}

func (p MempoolRPCRequest_Future) GetPendingTransactions() GetPendingTransactionsRequest_Future {
	return GetPendingTransactionsRequest_Future{Future: p.Future.Field(0, nil)}
}

type MempoolReservedResponse struct{ capnp.Struct }

// MempoolReservedResponse_TypeID is the unique identifier for the type MempoolReservedResponse.
const MempoolReservedResponse_TypeID = 0xb114df104ffb0bd3

func NewMempoolReservedResponse(s *capnp.Segment) (MempoolReservedResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MempoolReservedResponse{st}, err
}

func NewRootMempoolReservedResponse(s *capnp.Segment) (MempoolReservedResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MempoolReservedResponse{st}, err
}

func ReadRootMempoolReservedResponse(msg *capnp.Message) (MempoolReservedResponse, error) {
	root, err := msg.Root()
	return MempoolReservedResponse{root.Struct()}, err
}

func (s MempoolReservedResponse) String() string {
	str, _ := text.Marshal(0xb114df104ffb0bd3, s.Struct)
	return str
}

// MempoolReservedResponse_List is a list of MempoolReservedResponse.
type MempoolReservedResponse_List struct{ capnp.List }

// NewMempoolReservedResponse creates a new list of MempoolReservedResponse.
func NewMempoolReservedResponse_List(s *capnp.Segment, sz int32) (MempoolReservedResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MempoolReservedResponse_List{l}, err
}

func (s MempoolReservedResponse_List) At(i int) MempoolReservedResponse {
	return MempoolReservedResponse{s.List.Struct(i)}
}

func (s MempoolReservedResponse_List) Set(i int, v MempoolReservedResponse) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MempoolReservedResponse_List) String() string {
	str, _ := text.MarshalList(0xb114df104ffb0bd3, s.List)
	return str
}

// MempoolReservedResponse_Future is a wrapper for a MempoolReservedResponse promised by a client call.
type MempoolReservedResponse_Future struct{ *capnp.Future }

func (p MempoolReservedResponse_Future) Struct() (MempoolReservedResponse, error) {
	s, err := p.Future.Struct()
	return MempoolReservedResponse{s}, err
}

type CheckPendingAccountResourcesResponse struct{ capnp.Struct }

// CheckPendingAccountResourcesResponse_TypeID is the unique identifier for the type CheckPendingAccountResourcesResponse.
const CheckPendingAccountResourcesResponse_TypeID = 0x92a2408b299d3477

func NewCheckPendingAccountResourcesResponse(s *capnp.Segment) (CheckPendingAccountResourcesResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CheckPendingAccountResourcesResponse{st}, err
}

func NewRootCheckPendingAccountResourcesResponse(s *capnp.Segment) (CheckPendingAccountResourcesResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return CheckPendingAccountResourcesResponse{st}, err
}

func ReadRootCheckPendingAccountResourcesResponse(msg *capnp.Message) (CheckPendingAccountResourcesResponse, error) {
	root, err := msg.Root()
	return CheckPendingAccountResourcesResponse{root.Struct()}, err
}

func (s CheckPendingAccountResourcesResponse) String() string {
	str, _ := text.Marshal(0x92a2408b299d3477, s.Struct)
	return str
}

func (s CheckPendingAccountResourcesResponse) Success() bool {
	return s.Struct.Bit(0)
}

func (s CheckPendingAccountResourcesResponse) SetSuccess(v bool) {
	s.Struct.SetBit(0, v)
}

// CheckPendingAccountResourcesResponse_List is a list of CheckPendingAccountResourcesResponse.
type CheckPendingAccountResourcesResponse_List struct{ capnp.List }

// NewCheckPendingAccountResourcesResponse creates a new list of CheckPendingAccountResourcesResponse.
func NewCheckPendingAccountResourcesResponse_List(s *capnp.Segment, sz int32) (CheckPendingAccountResourcesResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return CheckPendingAccountResourcesResponse_List{l}, err
}

func (s CheckPendingAccountResourcesResponse_List) At(i int) CheckPendingAccountResourcesResponse {
	return CheckPendingAccountResourcesResponse{s.List.Struct(i)}
}

func (s CheckPendingAccountResourcesResponse_List) Set(i int, v CheckPendingAccountResourcesResponse) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CheckPendingAccountResourcesResponse_List) String() string {
	str, _ := text.MarshalList(0x92a2408b299d3477, s.List)
	return str
}

// CheckPendingAccountResourcesResponse_Future is a wrapper for a CheckPendingAccountResourcesResponse promised by a client call.
type CheckPendingAccountResourcesResponse_Future struct{ *capnp.Future }

func (p CheckPendingAccountResourcesResponse_Future) Struct() (CheckPendingAccountResourcesResponse, error) {
	s, err := p.Future.Struct()
	return CheckPendingAccountResourcesResponse{s}, err
}

type GetPendingTransctionsResponse struct{ capnp.Struct }

// GetPendingTransctionsResponse_TypeID is the unique identifier for the type GetPendingTransctionsResponse.
const GetPendingTransctionsResponse_TypeID = 0xf48b72eeabe033a4

func NewGetPendingTransctionsResponse(s *capnp.Segment) (GetPendingTransctionsResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetPendingTransctionsResponse{st}, err
}

func NewRootGetPendingTransctionsResponse(s *capnp.Segment) (GetPendingTransctionsResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetPendingTransctionsResponse{st}, err
}

func ReadRootGetPendingTransctionsResponse(msg *capnp.Message) (GetPendingTransctionsResponse, error) {
	root, err := msg.Root()
	return GetPendingTransctionsResponse{root.Struct()}, err
}

func (s GetPendingTransctionsResponse) String() string {
	str, _ := text.Marshal(0xf48b72eeabe033a4, s.Struct)
	return str
}

func (s GetPendingTransctionsResponse) Transactions() (protocol.Transaction_List, error) {
	p, err := s.Struct.Ptr(0)
	return protocol.Transaction_List{List: p.List()}, err
}

func (s GetPendingTransctionsResponse) HasTransactions() bool {
	return s.Struct.HasPtr(0)
}

func (s GetPendingTransctionsResponse) SetTransactions(v protocol.Transaction_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewTransactions sets the transactions field to a newly
// allocated protocol.Transaction_List, preferring placement in s's segment.
func (s GetPendingTransctionsResponse) NewTransactions(n int32) (protocol.Transaction_List, error) {
	l, err := protocol.NewTransaction_List(s.Struct.Segment(), n)
	if err != nil {
		return protocol.Transaction_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// GetPendingTransctionsResponse_List is a list of GetPendingTransctionsResponse.
type GetPendingTransctionsResponse_List struct{ capnp.List }

// NewGetPendingTransctionsResponse creates a new list of GetPendingTransctionsResponse.
func NewGetPendingTransctionsResponse_List(s *capnp.Segment, sz int32) (GetPendingTransctionsResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return GetPendingTransctionsResponse_List{l}, err
}

func (s GetPendingTransctionsResponse_List) At(i int) GetPendingTransctionsResponse {
	return GetPendingTransctionsResponse{s.List.Struct(i)}
}

func (s GetPendingTransctionsResponse_List) Set(i int, v GetPendingTransctionsResponse) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s GetPendingTransctionsResponse_List) String() string {
	str, _ := text.MarshalList(0xf48b72eeabe033a4, s.List)
	return str
}

// GetPendingTransctionsResponse_Future is a wrapper for a GetPendingTransctionsResponse promised by a client call.
type GetPendingTransctionsResponse_Future struct{ *capnp.Future }

func (p GetPendingTransctionsResponse_Future) Struct() (GetPendingTransctionsResponse, error) {
	s, err := p.Future.Struct()
	return GetPendingTransctionsResponse{s}, err
}

type MempoolRPCResponse struct{ capnp.Struct }
type MempoolRPCResponse_Which uint16

const (
	MempoolRPCResponse_Which_mempoolReserved              MempoolRPCResponse_Which = 0
	MempoolRPCResponse_Which_mempoolError                 MempoolRPCResponse_Which = 1
	MempoolRPCResponse_Which_checkPendingAccountResources MempoolRPCResponse_Which = 2
	MempoolRPCResponse_Which_getPendingTransactions       MempoolRPCResponse_Which = 3
)

func (w MempoolRPCResponse_Which) String() string {
	const s = "mempoolReservedmempoolErrorcheckPendingAccountResourcesgetPendingTransactions"
	switch w {
	case MempoolRPCResponse_Which_mempoolReserved:
		return s[0:15]
	case MempoolRPCResponse_Which_mempoolError:
		return s[15:27]
	case MempoolRPCResponse_Which_checkPendingAccountResources:
		return s[27:55]
	case MempoolRPCResponse_Which_getPendingTransactions:
		return s[55:77]

	}
	return "MempoolRPCResponse_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MempoolRPCResponse_TypeID is the unique identifier for the type MempoolRPCResponse.
const MempoolRPCResponse_TypeID = 0x9648a61c8170654b

func NewMempoolRPCResponse(s *capnp.Segment) (MempoolRPCResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MempoolRPCResponse{st}, err
}

func NewRootMempoolRPCResponse(s *capnp.Segment) (MempoolRPCResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MempoolRPCResponse{st}, err
}

func ReadRootMempoolRPCResponse(msg *capnp.Message) (MempoolRPCResponse, error) {
	root, err := msg.Root()
	return MempoolRPCResponse{root.Struct()}, err
}

func (s MempoolRPCResponse) String() string {
	str, _ := text.Marshal(0x9648a61c8170654b, s.Struct)
	return str
}

func (s MempoolRPCResponse) Which() MempoolRPCResponse_Which {
	return MempoolRPCResponse_Which(s.Struct.Uint16(0))
}
func (s MempoolRPCResponse) MempoolReserved() (MempoolReservedResponse, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != mempoolReserved")
	}
	p, err := s.Struct.Ptr(0)
	return MempoolReservedResponse{Struct: p.Struct()}, err
}

func (s MempoolRPCResponse) HasMempoolReserved() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s MempoolRPCResponse) SetMempoolReserved(v MempoolReservedResponse) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMempoolReserved sets the mempoolReserved field to a newly
// allocated MempoolReservedResponse struct, preferring placement in s's segment.
func (s MempoolRPCResponse) NewMempoolReserved() (MempoolReservedResponse, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewMempoolReservedResponse(s.Struct.Segment())
	if err != nil {
		return MempoolReservedResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MempoolRPCResponse) MempoolError() (rpc.ErrorResponse, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != mempoolError")
	}
	p, err := s.Struct.Ptr(0)
	return rpc.ErrorResponse{Struct: p.Struct()}, err
}

func (s MempoolRPCResponse) HasMempoolError() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s MempoolRPCResponse) SetMempoolError(v rpc.ErrorResponse) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMempoolError sets the mempoolError field to a newly
// allocated rpc.ErrorResponse struct, preferring placement in s's segment.
func (s MempoolRPCResponse) NewMempoolError() (rpc.ErrorResponse, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := rpc.NewErrorResponse(s.Struct.Segment())
	if err != nil {
		return rpc.ErrorResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MempoolRPCResponse) CheckPendingAccountResources() (CheckPendingAccountResourcesResponse, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != checkPendingAccountResources")
	}
	p, err := s.Struct.Ptr(0)
	return CheckPendingAccountResourcesResponse{Struct: p.Struct()}, err
}

func (s MempoolRPCResponse) HasCheckPendingAccountResources() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s MempoolRPCResponse) SetCheckPendingAccountResources(v CheckPendingAccountResourcesResponse) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCheckPendingAccountResources sets the checkPendingAccountResources field to a newly
// allocated CheckPendingAccountResourcesResponse struct, preferring placement in s's segment.
func (s MempoolRPCResponse) NewCheckPendingAccountResources() (CheckPendingAccountResourcesResponse, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewCheckPendingAccountResourcesResponse(s.Struct.Segment())
	if err != nil {
		return CheckPendingAccountResourcesResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MempoolRPCResponse) GetPendingTransactions() (GetPendingTransctionsResponse, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != getPendingTransactions")
	}
	p, err := s.Struct.Ptr(0)
	return GetPendingTransctionsResponse{Struct: p.Struct()}, err
}

func (s MempoolRPCResponse) HasGetPendingTransactions() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s MempoolRPCResponse) SetGetPendingTransactions(v GetPendingTransctionsResponse) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGetPendingTransactions sets the getPendingTransactions field to a newly
// allocated GetPendingTransctionsResponse struct, preferring placement in s's segment.
func (s MempoolRPCResponse) NewGetPendingTransactions() (GetPendingTransctionsResponse, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewGetPendingTransctionsResponse(s.Struct.Segment())
	if err != nil {
		return GetPendingTransctionsResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MempoolRPCResponse_List is a list of MempoolRPCResponse.
type MempoolRPCResponse_List struct{ capnp.List }

// NewMempoolRPCResponse creates a new list of MempoolRPCResponse.
func NewMempoolRPCResponse_List(s *capnp.Segment, sz int32) (MempoolRPCResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MempoolRPCResponse_List{l}, err
}

func (s MempoolRPCResponse_List) At(i int) MempoolRPCResponse {
	return MempoolRPCResponse{s.List.Struct(i)}
}

func (s MempoolRPCResponse_List) Set(i int, v MempoolRPCResponse) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s MempoolRPCResponse_List) String() string {
	str, _ := text.MarshalList(0x9648a61c8170654b, s.List)
	return str
}

// MempoolRPCResponse_Future is a wrapper for a MempoolRPCResponse promised by a client call.
type MempoolRPCResponse_Future struct{ *capnp.Future }

func (p MempoolRPCResponse_Future) Struct() (MempoolRPCResponse, error) {
	s, err := p.Future.Struct()
	return MempoolRPCResponse{s}, err
}

func (p MempoolRPCResponse_Future) MempoolReserved() MempoolReservedResponse_Future {
	return MempoolReservedResponse_Future{Future: p.Future.Field(0, nil)}
}

func (p MempoolRPCResponse_Future) MempoolError() rpc.ErrorResponse_Future {
	return rpc.ErrorResponse_Future{Future: p.Future.Field(0, nil)}
}

func (p MempoolRPCResponse_Future) CheckPendingAccountResources() CheckPendingAccountResourcesResponse_Future {
	return CheckPendingAccountResourcesResponse_Future{Future: p.Future.Field(0, nil)}
}

func (p MempoolRPCResponse_Future) GetPendingTransactions() GetPendingTransctionsResponse_Future {
	return GetPendingTransctionsResponse_Future{Future: p.Future.Field(0, nil)}
}

const schema_881300819f1b50e9 = "x\xda\xa4\x94O\xa8\x1bU\x14\xc6\xcfw\xefLfj" +
	"\x93&q\xd2\x85Z\x1ap\xa3\xdd\xf8\xb4qc7\xaf" +
	"\x7f\x0c-\xd4\xe2\xdc\xd0m\xb1\xc3\xf4\xf2\x9a\x9a73" +
	"\x99\x99h\xc4\x85\xbcG\x17\xf5\x15Q\xbaP\\\x88U" +
	"\xea\x03u!\x15D(ntS\xa8\x82\xa8\xab\x82\x8f" +
	"\xda'*\xad(\x16\xac\x1b\xadW\xeed2I\xfb\x1e" +
	"\xd8\xea.\xdc|s\xcew\xbe\xfb;\xf7\xe1e\xb6\x93" +
	"=b~\xbc\x91H\x9c0K\xea\xd9G\xdf\xd8vr" +
	"\xe7\xdb\xa7Hl\x05.]q\xef{s\xc19aX" +
	"D\xadO\xcd{\x99s\xd9\xb4\x88\x9c\x15s\x96\xa0\xf6" +
	"\xcbha\xcb\xf2\xbeWo\x92\xb6a\x19D\xad\x1b\xe6" +
	"\x12\x9c\xcd%-\xae\x97~\"\xa8o6\xfe\xf9d\xed" +
	"R\xe3,\xd5\xb7\xde\\\x16\xd6\x87p\xee\xb1,\xe2j" +
	"\xe5\xfe\xfd?oY}\xed\xbc.\xc8\xc6\"\x13Zu" +
	"\xbdt7s6[Y=\xeb\x03\x82\xfa\xfc\x8f\x97\xaf" +
	"\xbd\xf8\xc9\xd2\x85[\x9bs\xa2\xd6Ek\x11\xce/\x99" +
	"\xf8J&\xdev\xfa\xeb\xaf.|i\x7f\xbf\xa6\xf9\xeb" +
	"\xf6{p\xce\xda\xba\xf9\x99\xd6w\xef\xff\x1a\x9f\xfc}" +
	"Z3\xea\xfd\x92\xbd\x0a\xe7][\x97{\xc7\xd6\x83\x9f" +
	"^Y\xfe\xe2\xad\xbd\xfb\xd4\xda\x8c.j\xe9\xf5Lz" +
	"\xcd\x9e%EM\x15G\xfe\xcc\xbc\x9c\x8f\xac0\xece" +
	"?\xc2\xb0\xf7T\xecG\x0f\xf9^\x14D;\xf6\x1c\x95" +
	"\xfe\xd3\xae\x0c\x8et\x83\xb9]\xbe\x1f\x0e\x82\xb4#\x93" +
	"p\x10\xfb2\xe9\xc8$\x0a\x03\x9eH\x17\x10\x067\x88" +
	"\x0c\x10\xd5+\xbb\x89\x84\xcd!\x1a\x0c/$\x03\xdf\x97" +
	"I\x02\x10\x03\x08E;s\xfdv\x07F'\x1dw\xcf" +
	"\xa8x\"\x89t\xf5\x1a7\xcaJe\xe5\xbdE\"q" +
	"\x98C\xf4\x18*\xf8[5\xa0O\xbb\xc7\x88\xc4Q\x0e" +
	"\x912T\xd8\x0d\xd5\x00#\xaa\xf7\xaf\x12\x89!\x878" +
	"\xceP\xe1\x7f\xa9\x068Q}\xe1\x1c\x918\xce!^" +
	"aP\xb9\x87\x0ed\"\xe3g\xe4\x11Bm\x02\x03\x01" +
	"5*4m\xaa\xc6q\x18\xa3\xa6v\x7f;\xe3^\xde" +
	"\xf1\xd9\x8fc\x81\x9f\xa7\xc4n\x8d\xa9\xaasBm\x82" +
	"m\xfe\xc1\x9cL\xb3P\x11\xcc\x1d\x8c\xbd \xf1f\xfd" +
	"\xb4\x1b\x06ZZ\\t.\xbd\xcd\xc4r\xfb\x1d\x994" +
	"\xb3\xdc\\\xe0\xff\xddm\x7f \x13\xa4:\xfcrq\xb5" +
	"\xed\xed\xf5vs\x1c>\x90G\x7f\x8aH\xf48\xc4\x90" +
	"\xa1\xce0J~\xb04I\xbe\x19y\xcf\xc9X\x18`" +
	"\xea\xa3\xf3?\xdc5\xb3\xea\xfdF\xc2`\xd8U\x06q" +
	"T\x88\xa1\xa2C\xf6\x86\xae\xd6a\xec\x01\x096\x10\xc3" +
	"\x06\x82J\xe3av\x8a\xd8\x97Ot\xe7\xbb)Q\xf1" +
	"\xdf\x1d\x10\xa5GJ)\x1fi\xccS[\xf3\xf48\x87" +
	"p\xa7y:\xa0\xc99\xc8!\x0eO\xf3t\xe8\xdc\x84" +
	"\xbdu\xc9)6\xf9v\xc1(\xde\x94\x7f\x07\xa3X\xeb" +
	"\xff\x08F\xbf\xaa\xc7\x9f\xe6\xa2\xb4\xfe\x97{s\x0f\xb9" +
	"\x85\x91\x81l\x1f\xad`\xcd\xb2\xeb\xbd+s\x88\x07\x99" +
	"\xbe&\xed\xd8O\xa9\x9aY\xdeDp9PS\x87\x1e" +
	"x\xfe\xb1\xc5\xab\xc7\xceh\xe7\x9b\xe8N\xfb{c\x03" +
	"\xfd\x815\x1a`\xba\xff\xf6\xc9c\xd3\xeci4\xc6`" +
	"\xfc\x13\x00\x00\xff\xffG\x0b\xeb\x03"

func init() {
	schemas.Register(schema_881300819f1b50e9,
		0x92a2408b299d3477,
		0x9648a61c8170654b,
		0xb114df104ffb0bd3,
		0xc797e21ceb4b22dd,
		0xca8abc89f18ff6cb,
		0xe308cfcad1d2a029,
		0xf48b72eeabe033a4,
		0xff4847a1cca6dda0)
}
