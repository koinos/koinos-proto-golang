// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.17.3
// source: koinos/rpc/mempool/mempool_rpc.proto

package mempool

import (
	_ "github.com/koinos/koinos-proto-golang/v2/koinos"
	mempool "github.com/koinos/koinos-proto-golang/v2/koinos/mempool"
	_ "github.com/koinos/koinos-proto-golang/v2/koinos/protocol"
	rpc "github.com/koinos/koinos-proto-golang/v2/koinos/rpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckPendingAccountResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payer      []byte `protobuf:"bytes,1,opt,name=payer,proto3" json:"payer,omitempty"`
	MaxPayerRc uint64 `protobuf:"varint,2,opt,name=max_payer_rc,json=maxPayerRc,proto3" json:"max_payer_rc,omitempty"`
	RcLimit    uint64 `protobuf:"varint,3,opt,name=rc_limit,json=rcLimit,proto3" json:"rc_limit,omitempty"`
	BlockId    []byte `protobuf:"bytes,4,opt,name=block_id,json=blockId,proto3,oneof" json:"block_id,omitempty"`
}

func (x *CheckPendingAccountResourcesRequest) Reset() {
	*x = CheckPendingAccountResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPendingAccountResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPendingAccountResourcesRequest) ProtoMessage() {}

func (x *CheckPendingAccountResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPendingAccountResourcesRequest.ProtoReflect.Descriptor instead.
func (*CheckPendingAccountResourcesRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *CheckPendingAccountResourcesRequest) GetPayer() []byte {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *CheckPendingAccountResourcesRequest) GetMaxPayerRc() uint64 {
	if x != nil {
		return x.MaxPayerRc
	}
	return 0
}

func (x *CheckPendingAccountResourcesRequest) GetRcLimit() uint64 {
	if x != nil {
		return x.RcLimit
	}
	return 0
}

func (x *CheckPendingAccountResourcesRequest) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

type CheckPendingAccountResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CheckPendingAccountResourcesResponse) Reset() {
	*x = CheckPendingAccountResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPendingAccountResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPendingAccountResourcesResponse) ProtoMessage() {}

func (x *CheckPendingAccountResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPendingAccountResourcesResponse.ProtoReflect.Descriptor instead.
func (*CheckPendingAccountResourcesResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *CheckPendingAccountResourcesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetPendingTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	BlockId []byte `protobuf:"bytes,2,opt,name=block_id,json=blockId,proto3,oneof" json:"block_id,omitempty"`
}

func (x *GetPendingTransactionsRequest) Reset() {
	*x = GetPendingTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingTransactionsRequest) ProtoMessage() {}

func (x *GetPendingTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetPendingTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *GetPendingTransactionsRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPendingTransactionsRequest) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

type GetPendingTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingTransactions []*mempool.PendingTransaction `protobuf:"bytes,1,rep,name=pending_transactions,json=pendingTransactions,proto3" json:"pending_transactions,omitempty"`
}

func (x *GetPendingTransactionsResponse) Reset() {
	*x = GetPendingTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingTransactionsResponse) ProtoMessage() {}

func (x *GetPendingTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingTransactionsResponse.ProtoReflect.Descriptor instead.
func (*GetPendingTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *GetPendingTransactionsResponse) GetPendingTransactions() []*mempool.PendingTransaction {
	if x != nil {
		return x.PendingTransactions
	}
	return nil
}

type CheckAccountNonceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payee   []byte `protobuf:"bytes,1,opt,name=payee,proto3" json:"payee,omitempty"`
	Nonce   []byte `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	BlockId []byte `protobuf:"bytes,3,opt,name=block_id,json=blockId,proto3,oneof" json:"block_id,omitempty"`
}

func (x *CheckAccountNonceRequest) Reset() {
	*x = CheckAccountNonceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAccountNonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAccountNonceRequest) ProtoMessage() {}

func (x *CheckAccountNonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAccountNonceRequest.ProtoReflect.Descriptor instead.
func (*CheckAccountNonceRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *CheckAccountNonceRequest) GetPayee() []byte {
	if x != nil {
		return x.Payee
	}
	return nil
}

func (x *CheckAccountNonceRequest) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *CheckAccountNonceRequest) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

type CheckAccountNonceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CheckAccountNonceResponse) Reset() {
	*x = CheckAccountNonceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAccountNonceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAccountNonceResponse) ProtoMessage() {}

func (x *CheckAccountNonceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAccountNonceResponse.ProtoReflect.Descriptor instead.
func (*CheckAccountNonceResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *CheckAccountNonceResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetReservedAccountRcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account []byte `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *GetReservedAccountRcRequest) Reset() {
	*x = GetReservedAccountRcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservedAccountRcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservedAccountRcRequest) ProtoMessage() {}

func (x *GetReservedAccountRcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservedAccountRcRequest.ProtoReflect.Descriptor instead.
func (*GetReservedAccountRcRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *GetReservedAccountRcRequest) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

type GetReservedAccountRcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rc uint64 `protobuf:"varint,1,opt,name=rc,proto3" json:"rc,omitempty"`
}

func (x *GetReservedAccountRcResponse) Reset() {
	*x = GetReservedAccountRcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReservedAccountRcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReservedAccountRcResponse) ProtoMessage() {}

func (x *GetReservedAccountRcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReservedAccountRcResponse.ProtoReflect.Descriptor instead.
func (*GetReservedAccountRcResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *GetReservedAccountRcResponse) GetRc() uint64 {
	if x != nil {
		return x.Rc
	}
	return 0
}

type GetPendingNonceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payee   []byte `protobuf:"bytes,1,opt,name=payee,proto3" json:"payee,omitempty"`
	BlockId []byte `protobuf:"bytes,2,opt,name=block_id,json=blockId,proto3,oneof" json:"block_id,omitempty"`
}

func (x *GetPendingNonceRequest) Reset() {
	*x = GetPendingNonceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingNonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingNonceRequest) ProtoMessage() {}

func (x *GetPendingNonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingNonceRequest.ProtoReflect.Descriptor instead.
func (*GetPendingNonceRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *GetPendingNonceRequest) GetPayee() []byte {
	if x != nil {
		return x.Payee
	}
	return nil
}

func (x *GetPendingNonceRequest) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

type GetPendingNonceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *GetPendingNonceResponse) Reset() {
	*x = GetPendingNonceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingNonceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingNonceResponse) ProtoMessage() {}

func (x *GetPendingNonceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingNonceResponse.ProtoReflect.Descriptor instead.
func (*GetPendingNonceResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *GetPendingNonceResponse) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type GetPendingTransactionCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payee   []byte `protobuf:"bytes,1,opt,name=payee,proto3" json:"payee,omitempty"`
	BlockId []byte `protobuf:"bytes,2,opt,name=block_id,json=blockId,proto3,oneof" json:"block_id,omitempty"`
}

func (x *GetPendingTransactionCountRequest) Reset() {
	*x = GetPendingTransactionCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingTransactionCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingTransactionCountRequest) ProtoMessage() {}

func (x *GetPendingTransactionCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingTransactionCountRequest.ProtoReflect.Descriptor instead.
func (*GetPendingTransactionCountRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *GetPendingTransactionCountRequest) GetPayee() []byte {
	if x != nil {
		return x.Payee
	}
	return nil
}

func (x *GetPendingTransactionCountRequest) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

type GetPendingTransactionCountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetPendingTransactionCountResponse) Reset() {
	*x = GetPendingTransactionCountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingTransactionCountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingTransactionCountResponse) ProtoMessage() {}

func (x *GetPendingTransactionCountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingTransactionCountResponse.ProtoReflect.Descriptor instead.
func (*GetPendingTransactionCountResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *GetPendingTransactionCountResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type MempoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*MempoolRequest_Reserved
	//	*MempoolRequest_CheckPendingAccountResources
	//	*MempoolRequest_GetPendingTransactions
	//	*MempoolRequest_CheckAccountNonce
	//	*MempoolRequest_GetReservedAccountRc
	//	*MempoolRequest_GetPendingNonce
	//	*MempoolRequest_GetPendingTransactionCount
	Request isMempoolRequest_Request `protobuf_oneof:"request"`
}

func (x *MempoolRequest) Reset() {
	*x = MempoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MempoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MempoolRequest) ProtoMessage() {}

func (x *MempoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MempoolRequest.ProtoReflect.Descriptor instead.
func (*MempoolRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{12}
}

func (m *MempoolRequest) GetRequest() isMempoolRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *MempoolRequest) GetReserved() *rpc.ReservedRpc {
	if x, ok := x.GetRequest().(*MempoolRequest_Reserved); ok {
		return x.Reserved
	}
	return nil
}

func (x *MempoolRequest) GetCheckPendingAccountResources() *CheckPendingAccountResourcesRequest {
	if x, ok := x.GetRequest().(*MempoolRequest_CheckPendingAccountResources); ok {
		return x.CheckPendingAccountResources
	}
	return nil
}

func (x *MempoolRequest) GetGetPendingTransactions() *GetPendingTransactionsRequest {
	if x, ok := x.GetRequest().(*MempoolRequest_GetPendingTransactions); ok {
		return x.GetPendingTransactions
	}
	return nil
}

func (x *MempoolRequest) GetCheckAccountNonce() *CheckAccountNonceRequest {
	if x, ok := x.GetRequest().(*MempoolRequest_CheckAccountNonce); ok {
		return x.CheckAccountNonce
	}
	return nil
}

func (x *MempoolRequest) GetGetReservedAccountRc() *GetReservedAccountRcRequest {
	if x, ok := x.GetRequest().(*MempoolRequest_GetReservedAccountRc); ok {
		return x.GetReservedAccountRc
	}
	return nil
}

func (x *MempoolRequest) GetGetPendingNonce() *GetPendingNonceRequest {
	if x, ok := x.GetRequest().(*MempoolRequest_GetPendingNonce); ok {
		return x.GetPendingNonce
	}
	return nil
}

func (x *MempoolRequest) GetGetPendingTransactionCount() *GetPendingTransactionCountRequest {
	if x, ok := x.GetRequest().(*MempoolRequest_GetPendingTransactionCount); ok {
		return x.GetPendingTransactionCount
	}
	return nil
}

type isMempoolRequest_Request interface {
	isMempoolRequest_Request()
}

type MempoolRequest_Reserved struct {
	Reserved *rpc.ReservedRpc `protobuf:"bytes,1,opt,name=reserved,proto3,oneof"`
}

type MempoolRequest_CheckPendingAccountResources struct {
	CheckPendingAccountResources *CheckPendingAccountResourcesRequest `protobuf:"bytes,2,opt,name=check_pending_account_resources,json=checkPendingAccountResources,proto3,oneof"`
}

type MempoolRequest_GetPendingTransactions struct {
	GetPendingTransactions *GetPendingTransactionsRequest `protobuf:"bytes,3,opt,name=get_pending_transactions,json=getPendingTransactions,proto3,oneof"`
}

type MempoolRequest_CheckAccountNonce struct {
	CheckAccountNonce *CheckAccountNonceRequest `protobuf:"bytes,4,opt,name=check_account_nonce,json=checkAccountNonce,proto3,oneof"`
}

type MempoolRequest_GetReservedAccountRc struct {
	GetReservedAccountRc *GetReservedAccountRcRequest `protobuf:"bytes,5,opt,name=get_reserved_account_rc,json=getReservedAccountRc,proto3,oneof"`
}

type MempoolRequest_GetPendingNonce struct {
	GetPendingNonce *GetPendingNonceRequest `protobuf:"bytes,6,opt,name=get_pending_nonce,json=getPendingNonce,proto3,oneof"`
}

type MempoolRequest_GetPendingTransactionCount struct {
	GetPendingTransactionCount *GetPendingTransactionCountRequest `protobuf:"bytes,7,opt,name=get_pending_transaction_count,json=getPendingTransactionCount,proto3,oneof"`
}

func (*MempoolRequest_Reserved) isMempoolRequest_Request() {}

func (*MempoolRequest_CheckPendingAccountResources) isMempoolRequest_Request() {}

func (*MempoolRequest_GetPendingTransactions) isMempoolRequest_Request() {}

func (*MempoolRequest_CheckAccountNonce) isMempoolRequest_Request() {}

func (*MempoolRequest_GetReservedAccountRc) isMempoolRequest_Request() {}

func (*MempoolRequest_GetPendingNonce) isMempoolRequest_Request() {}

func (*MempoolRequest_GetPendingTransactionCount) isMempoolRequest_Request() {}

type MempoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*MempoolResponse_Reserved
	//	*MempoolResponse_Error
	//	*MempoolResponse_CheckPendingAccountResources
	//	*MempoolResponse_GetPendingTransactions
	//	*MempoolResponse_CheckAccountNonce
	//	*MempoolResponse_GetReservedAccountRc
	//	*MempoolResponse_GetPendingNonce
	//	*MempoolResponse_GetPendingTransactionCount
	Response isMempoolResponse_Response `protobuf_oneof:"response"`
}

func (x *MempoolResponse) Reset() {
	*x = MempoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MempoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MempoolResponse) ProtoMessage() {}

func (x *MempoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MempoolResponse.ProtoReflect.Descriptor instead.
func (*MempoolResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{13}
}

func (m *MempoolResponse) GetResponse() isMempoolResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *MempoolResponse) GetReserved() *rpc.ReservedRpc {
	if x, ok := x.GetResponse().(*MempoolResponse_Reserved); ok {
		return x.Reserved
	}
	return nil
}

func (x *MempoolResponse) GetError() *rpc.ErrorStatus {
	if x, ok := x.GetResponse().(*MempoolResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *MempoolResponse) GetCheckPendingAccountResources() *CheckPendingAccountResourcesResponse {
	if x, ok := x.GetResponse().(*MempoolResponse_CheckPendingAccountResources); ok {
		return x.CheckPendingAccountResources
	}
	return nil
}

func (x *MempoolResponse) GetGetPendingTransactions() *GetPendingTransactionsResponse {
	if x, ok := x.GetResponse().(*MempoolResponse_GetPendingTransactions); ok {
		return x.GetPendingTransactions
	}
	return nil
}

func (x *MempoolResponse) GetCheckAccountNonce() *CheckAccountNonceResponse {
	if x, ok := x.GetResponse().(*MempoolResponse_CheckAccountNonce); ok {
		return x.CheckAccountNonce
	}
	return nil
}

func (x *MempoolResponse) GetGetReservedAccountRc() *GetReservedAccountRcResponse {
	if x, ok := x.GetResponse().(*MempoolResponse_GetReservedAccountRc); ok {
		return x.GetReservedAccountRc
	}
	return nil
}

func (x *MempoolResponse) GetGetPendingNonce() *GetPendingNonceResponse {
	if x, ok := x.GetResponse().(*MempoolResponse_GetPendingNonce); ok {
		return x.GetPendingNonce
	}
	return nil
}

func (x *MempoolResponse) GetGetPendingTransactionCount() *GetPendingTransactionCountResponse {
	if x, ok := x.GetResponse().(*MempoolResponse_GetPendingTransactionCount); ok {
		return x.GetPendingTransactionCount
	}
	return nil
}

type isMempoolResponse_Response interface {
	isMempoolResponse_Response()
}

type MempoolResponse_Reserved struct {
	Reserved *rpc.ReservedRpc `protobuf:"bytes,1,opt,name=reserved,proto3,oneof"`
}

type MempoolResponse_Error struct {
	Error *rpc.ErrorStatus `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type MempoolResponse_CheckPendingAccountResources struct {
	CheckPendingAccountResources *CheckPendingAccountResourcesResponse `protobuf:"bytes,3,opt,name=check_pending_account_resources,json=checkPendingAccountResources,proto3,oneof"`
}

type MempoolResponse_GetPendingTransactions struct {
	GetPendingTransactions *GetPendingTransactionsResponse `protobuf:"bytes,4,opt,name=get_pending_transactions,json=getPendingTransactions,proto3,oneof"`
}

type MempoolResponse_CheckAccountNonce struct {
	CheckAccountNonce *CheckAccountNonceResponse `protobuf:"bytes,5,opt,name=check_account_nonce,json=checkAccountNonce,proto3,oneof"`
}

type MempoolResponse_GetReservedAccountRc struct {
	GetReservedAccountRc *GetReservedAccountRcResponse `protobuf:"bytes,6,opt,name=get_reserved_account_rc,json=getReservedAccountRc,proto3,oneof"`
}

type MempoolResponse_GetPendingNonce struct {
	GetPendingNonce *GetPendingNonceResponse `protobuf:"bytes,7,opt,name=get_pending_nonce,json=getPendingNonce,proto3,oneof"`
}

type MempoolResponse_GetPendingTransactionCount struct {
	GetPendingTransactionCount *GetPendingTransactionCountResponse `protobuf:"bytes,8,opt,name=get_pending_transaction_count,json=getPendingTransactionCount,proto3,oneof"`
}

func (*MempoolResponse_Reserved) isMempoolResponse_Response() {}

func (*MempoolResponse_Error) isMempoolResponse_Response() {}

func (*MempoolResponse_CheckPendingAccountResources) isMempoolResponse_Response() {}

func (*MempoolResponse_GetPendingTransactions) isMempoolResponse_Response() {}

func (*MempoolResponse_CheckAccountNonce) isMempoolResponse_Response() {}

func (*MempoolResponse_GetReservedAccountRc) isMempoolResponse_Response() {}

func (*MempoolResponse_GetPendingNonce) isMempoolResponse_Response() {}

func (*MempoolResponse_GetPendingTransactionCount) isMempoolResponse_Response() {}

var File_koinos_rpc_mempool_mempool_rpc_proto protoreflect.FileDescriptor

var file_koinos_rpc_mempool_mempool_rpc_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x65, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x14, 0x6b, 0x6f, 0x69, 0x6e,
	0x6f, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x01, 0x0a, 0x27, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42,
	0x04, 0x80, 0xb5, 0x18, 0x06, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x63, 0x12, 0x1d, 0x0a, 0x08, 0x72, 0x63, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x72, 0x63, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x24, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x28, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x6f, 0x0a, 0x20, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30,
	0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03,
	0x48, 0x00, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0x7b, 0x0a, 0x21, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x56, 0x0a, 0x14, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x52, 0x05, 0x70,
	0x61, 0x79, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5,
	0x18, 0x03, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0x38, 0x0a,
	0x1c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x41, 0x0a, 0x1f, 0x67, 0x65, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18,
	0x06, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x20, 0x67, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x72, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x72, 0x63, 0x22, 0x6a,
	0x0a, 0x19, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x05, 0x70,
	0x61, 0x79, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06,
	0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48,
	0x00, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x1a, 0x67, 0x65,
	0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x76,
	0x0a, 0x25, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x52, 0x05, 0x70, 0x61,
	0x79, 0x65, 0x65, 0x12, 0x24, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x00, 0x52, 0x07, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x26, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfb, 0x05, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b,
	0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x5f, 0x72, 0x70, 0x63, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x1f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6b,
	0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x18, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x6f,
	0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x13, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x6c,
	0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x63, 0x12, 0x5b, 0x0a, 0x11,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x7e, 0x0a, 0x1d, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x67,
	0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xb5, 0x06, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x6f,
	0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x72, 0x70, 0x63, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x85, 0x01, 0x0a, 0x1f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x18, 0x67,
	0x65, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x62,
	0x0a, 0x13, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6b, 0x6f,
	0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x11, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x6e,
	0x63, 0x65, 0x12, 0x6d, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x63,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x63, 0x12, 0x5c, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b,
	0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f,
	0x67, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x7f, 0x0a, 0x1d, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x67, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3d, 0x5a, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x6f, 0x69, 0x6e, 0x6f,
	0x73, 0x2f, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67,
	0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x76, 0x32, 0x2f, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_koinos_rpc_mempool_mempool_rpc_proto_rawDescOnce sync.Once
	file_koinos_rpc_mempool_mempool_rpc_proto_rawDescData = file_koinos_rpc_mempool_mempool_rpc_proto_rawDesc
)

func file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP() []byte {
	file_koinos_rpc_mempool_mempool_rpc_proto_rawDescOnce.Do(func() {
		file_koinos_rpc_mempool_mempool_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_koinos_rpc_mempool_mempool_rpc_proto_rawDescData)
	})
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescData
}

var file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_koinos_rpc_mempool_mempool_rpc_proto_goTypes = []interface{}{
	(*CheckPendingAccountResourcesRequest)(nil),  // 0: koinos.rpc.mempool.check_pending_account_resources_request
	(*CheckPendingAccountResourcesResponse)(nil), // 1: koinos.rpc.mempool.check_pending_account_resources_response
	(*GetPendingTransactionsRequest)(nil),        // 2: koinos.rpc.mempool.get_pending_transactions_request
	(*GetPendingTransactionsResponse)(nil),       // 3: koinos.rpc.mempool.get_pending_transactions_response
	(*CheckAccountNonceRequest)(nil),             // 4: koinos.rpc.mempool.check_account_nonce_request
	(*CheckAccountNonceResponse)(nil),            // 5: koinos.rpc.mempool.check_account_nonce_response
	(*GetReservedAccountRcRequest)(nil),          // 6: koinos.rpc.mempool.get_reserved_account_rc_request
	(*GetReservedAccountRcResponse)(nil),         // 7: koinos.rpc.mempool.get_reserved_account_rc_response
	(*GetPendingNonceRequest)(nil),               // 8: koinos.rpc.mempool.get_pending_nonce_request
	(*GetPendingNonceResponse)(nil),              // 9: koinos.rpc.mempool.get_pending_nonce_response
	(*GetPendingTransactionCountRequest)(nil),    // 10: koinos.rpc.mempool.get_pending_transaction_count_request
	(*GetPendingTransactionCountResponse)(nil),   // 11: koinos.rpc.mempool.get_pending_transaction_count_response
	(*MempoolRequest)(nil),                       // 12: koinos.rpc.mempool.mempool_request
	(*MempoolResponse)(nil),                      // 13: koinos.rpc.mempool.mempool_response
	(*mempool.PendingTransaction)(nil),           // 14: koinos.mempool.pending_transaction
	(*rpc.ReservedRpc)(nil),                      // 15: koinos.rpc.reserved_rpc
	(*rpc.ErrorStatus)(nil),                      // 16: koinos.rpc.error_status
}
var file_koinos_rpc_mempool_mempool_rpc_proto_depIdxs = []int32{
	14, // 0: koinos.rpc.mempool.get_pending_transactions_response.pending_transactions:type_name -> koinos.mempool.pending_transaction
	15, // 1: koinos.rpc.mempool.mempool_request.reserved:type_name -> koinos.rpc.reserved_rpc
	0,  // 2: koinos.rpc.mempool.mempool_request.check_pending_account_resources:type_name -> koinos.rpc.mempool.check_pending_account_resources_request
	2,  // 3: koinos.rpc.mempool.mempool_request.get_pending_transactions:type_name -> koinos.rpc.mempool.get_pending_transactions_request
	4,  // 4: koinos.rpc.mempool.mempool_request.check_account_nonce:type_name -> koinos.rpc.mempool.check_account_nonce_request
	6,  // 5: koinos.rpc.mempool.mempool_request.get_reserved_account_rc:type_name -> koinos.rpc.mempool.get_reserved_account_rc_request
	8,  // 6: koinos.rpc.mempool.mempool_request.get_pending_nonce:type_name -> koinos.rpc.mempool.get_pending_nonce_request
	10, // 7: koinos.rpc.mempool.mempool_request.get_pending_transaction_count:type_name -> koinos.rpc.mempool.get_pending_transaction_count_request
	15, // 8: koinos.rpc.mempool.mempool_response.reserved:type_name -> koinos.rpc.reserved_rpc
	16, // 9: koinos.rpc.mempool.mempool_response.error:type_name -> koinos.rpc.error_status
	1,  // 10: koinos.rpc.mempool.mempool_response.check_pending_account_resources:type_name -> koinos.rpc.mempool.check_pending_account_resources_response
	3,  // 11: koinos.rpc.mempool.mempool_response.get_pending_transactions:type_name -> koinos.rpc.mempool.get_pending_transactions_response
	5,  // 12: koinos.rpc.mempool.mempool_response.check_account_nonce:type_name -> koinos.rpc.mempool.check_account_nonce_response
	7,  // 13: koinos.rpc.mempool.mempool_response.get_reserved_account_rc:type_name -> koinos.rpc.mempool.get_reserved_account_rc_response
	9,  // 14: koinos.rpc.mempool.mempool_response.get_pending_nonce:type_name -> koinos.rpc.mempool.get_pending_nonce_response
	11, // 15: koinos.rpc.mempool.mempool_response.get_pending_transaction_count:type_name -> koinos.rpc.mempool.get_pending_transaction_count_response
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_koinos_rpc_mempool_mempool_rpc_proto_init() }
func file_koinos_rpc_mempool_mempool_rpc_proto_init() {
	if File_koinos_rpc_mempool_mempool_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPendingAccountResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPendingAccountResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAccountNonceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAccountNonceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservedAccountRcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReservedAccountRcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingNonceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingNonceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingTransactionCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingTransactionCountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MempoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MempoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*MempoolRequest_Reserved)(nil),
		(*MempoolRequest_CheckPendingAccountResources)(nil),
		(*MempoolRequest_GetPendingTransactions)(nil),
		(*MempoolRequest_CheckAccountNonce)(nil),
		(*MempoolRequest_GetReservedAccountRc)(nil),
		(*MempoolRequest_GetPendingNonce)(nil),
		(*MempoolRequest_GetPendingTransactionCount)(nil),
	}
	file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*MempoolResponse_Reserved)(nil),
		(*MempoolResponse_Error)(nil),
		(*MempoolResponse_CheckPendingAccountResources)(nil),
		(*MempoolResponse_GetPendingTransactions)(nil),
		(*MempoolResponse_CheckAccountNonce)(nil),
		(*MempoolResponse_GetReservedAccountRc)(nil),
		(*MempoolResponse_GetPendingNonce)(nil),
		(*MempoolResponse_GetPendingTransactionCount)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_koinos_rpc_mempool_mempool_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_koinos_rpc_mempool_mempool_rpc_proto_goTypes,
		DependencyIndexes: file_koinos_rpc_mempool_mempool_rpc_proto_depIdxs,
		MessageInfos:      file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes,
	}.Build()
	File_koinos_rpc_mempool_mempool_rpc_proto = out.File
	file_koinos_rpc_mempool_mempool_rpc_proto_rawDesc = nil
	file_koinos_rpc_mempool_mempool_rpc_proto_goTypes = nil
	file_koinos_rpc_mempool_mempool_rpc_proto_depIdxs = nil
}
