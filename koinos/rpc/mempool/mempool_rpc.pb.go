// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.17.3
// source: koinos/rpc/mempool/mempool_rpc.proto

package mempool

import (
	_ "github.com/koinos/koinos-proto-golang/koinos"
	protocol "github.com/koinos/koinos-proto-golang/koinos/protocol"
	rpc "github.com/koinos/koinos-proto-golang/koinos/rpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PendingTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction          *protocol.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	DiskStorageUsed      uint64                `protobuf:"varint,2,opt,name=disk_storage_used,json=diskStorageUsed,proto3" json:"disk_storage_used,omitempty"`
	NetworkBandwidthUsed uint64                `protobuf:"varint,3,opt,name=network_bandwidth_used,json=networkBandwidthUsed,proto3" json:"network_bandwidth_used,omitempty"`
	ComputeBandwidthUsed uint64                `protobuf:"varint,4,opt,name=compute_bandwidth_used,json=computeBandwidthUsed,proto3" json:"compute_bandwidth_used,omitempty"`
}

func (x *PendingTransaction) Reset() {
	*x = PendingTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingTransaction) ProtoMessage() {}

func (x *PendingTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingTransaction.ProtoReflect.Descriptor instead.
func (*PendingTransaction) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *PendingTransaction) GetTransaction() *protocol.Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *PendingTransaction) GetDiskStorageUsed() uint64 {
	if x != nil {
		return x.DiskStorageUsed
	}
	return 0
}

func (x *PendingTransaction) GetNetworkBandwidthUsed() uint64 {
	if x != nil {
		return x.NetworkBandwidthUsed
	}
	return 0
}

func (x *PendingTransaction) GetComputeBandwidthUsed() uint64 {
	if x != nil {
		return x.ComputeBandwidthUsed
	}
	return 0
}

type CheckPendingAccountResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payer      []byte `protobuf:"bytes,1,opt,name=payer,proto3" json:"payer,omitempty"`
	MaxPayerRc uint64 `protobuf:"varint,2,opt,name=max_payer_rc,json=maxPayerRc,proto3" json:"max_payer_rc,omitempty"`
	RcLimit    uint64 `protobuf:"varint,3,opt,name=rc_limit,json=rcLimit,proto3" json:"rc_limit,omitempty"`
	BlockId    []byte `protobuf:"bytes,4,opt,name=block_id,json=blockId,proto3,oneof" json:"block_id,omitempty"`
}

func (x *CheckPendingAccountResourcesRequest) Reset() {
	*x = CheckPendingAccountResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPendingAccountResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPendingAccountResourcesRequest) ProtoMessage() {}

func (x *CheckPendingAccountResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPendingAccountResourcesRequest.ProtoReflect.Descriptor instead.
func (*CheckPendingAccountResourcesRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *CheckPendingAccountResourcesRequest) GetPayer() []byte {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *CheckPendingAccountResourcesRequest) GetMaxPayerRc() uint64 {
	if x != nil {
		return x.MaxPayerRc
	}
	return 0
}

func (x *CheckPendingAccountResourcesRequest) GetRcLimit() uint64 {
	if x != nil {
		return x.RcLimit
	}
	return 0
}

func (x *CheckPendingAccountResourcesRequest) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

type CheckPendingAccountResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *CheckPendingAccountResourcesResponse) Reset() {
	*x = CheckPendingAccountResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPendingAccountResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPendingAccountResourcesResponse) ProtoMessage() {}

func (x *CheckPendingAccountResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPendingAccountResourcesResponse.ProtoReflect.Descriptor instead.
func (*CheckPendingAccountResourcesResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *CheckPendingAccountResourcesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetPendingTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	BlockId []byte `protobuf:"bytes,2,opt,name=block_id,json=blockId,proto3,oneof" json:"block_id,omitempty"`
}

func (x *GetPendingTransactionsRequest) Reset() {
	*x = GetPendingTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingTransactionsRequest) ProtoMessage() {}

func (x *GetPendingTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetPendingTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *GetPendingTransactionsRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetPendingTransactionsRequest) GetBlockId() []byte {
	if x != nil {
		return x.BlockId
	}
	return nil
}

type GetPendingTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PendingTransactions []*PendingTransaction `protobuf:"bytes,1,rep,name=pending_transactions,json=pendingTransactions,proto3" json:"pending_transactions,omitempty"`
}

func (x *GetPendingTransactionsResponse) Reset() {
	*x = GetPendingTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPendingTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPendingTransactionsResponse) ProtoMessage() {}

func (x *GetPendingTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPendingTransactionsResponse.ProtoReflect.Descriptor instead.
func (*GetPendingTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *GetPendingTransactionsResponse) GetPendingTransactions() []*PendingTransaction {
	if x != nil {
		return x.PendingTransactions
	}
	return nil
}

type MempoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*MempoolRequest_Reserved
	//	*MempoolRequest_CheckPendingAccountResources
	//	*MempoolRequest_GetPendingTransactions
	Request isMempoolRequest_Request `protobuf_oneof:"request"`
}

func (x *MempoolRequest) Reset() {
	*x = MempoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MempoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MempoolRequest) ProtoMessage() {}

func (x *MempoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MempoolRequest.ProtoReflect.Descriptor instead.
func (*MempoolRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{5}
}

func (m *MempoolRequest) GetRequest() isMempoolRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *MempoolRequest) GetReserved() *rpc.ReservedRpc {
	if x, ok := x.GetRequest().(*MempoolRequest_Reserved); ok {
		return x.Reserved
	}
	return nil
}

func (x *MempoolRequest) GetCheckPendingAccountResources() *CheckPendingAccountResourcesRequest {
	if x, ok := x.GetRequest().(*MempoolRequest_CheckPendingAccountResources); ok {
		return x.CheckPendingAccountResources
	}
	return nil
}

func (x *MempoolRequest) GetGetPendingTransactions() *GetPendingTransactionsRequest {
	if x, ok := x.GetRequest().(*MempoolRequest_GetPendingTransactions); ok {
		return x.GetPendingTransactions
	}
	return nil
}

type isMempoolRequest_Request interface {
	isMempoolRequest_Request()
}

type MempoolRequest_Reserved struct {
	Reserved *rpc.ReservedRpc `protobuf:"bytes,1,opt,name=reserved,proto3,oneof"`
}

type MempoolRequest_CheckPendingAccountResources struct {
	CheckPendingAccountResources *CheckPendingAccountResourcesRequest `protobuf:"bytes,2,opt,name=check_pending_account_resources,json=checkPendingAccountResources,proto3,oneof"`
}

type MempoolRequest_GetPendingTransactions struct {
	GetPendingTransactions *GetPendingTransactionsRequest `protobuf:"bytes,3,opt,name=get_pending_transactions,json=getPendingTransactions,proto3,oneof"`
}

func (*MempoolRequest_Reserved) isMempoolRequest_Request() {}

func (*MempoolRequest_CheckPendingAccountResources) isMempoolRequest_Request() {}

func (*MempoolRequest_GetPendingTransactions) isMempoolRequest_Request() {}

type MempoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*MempoolResponse_Reserved
	//	*MempoolResponse_Error
	//	*MempoolResponse_CheckPendingAccountResources
	//	*MempoolResponse_GetPendingTransactions
	Response isMempoolResponse_Response `protobuf_oneof:"response"`
}

func (x *MempoolResponse) Reset() {
	*x = MempoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MempoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MempoolResponse) ProtoMessage() {}

func (x *MempoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MempoolResponse.ProtoReflect.Descriptor instead.
func (*MempoolResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP(), []int{6}
}

func (m *MempoolResponse) GetResponse() isMempoolResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *MempoolResponse) GetReserved() *rpc.ReservedRpc {
	if x, ok := x.GetResponse().(*MempoolResponse_Reserved); ok {
		return x.Reserved
	}
	return nil
}

func (x *MempoolResponse) GetError() *rpc.ErrorResponse {
	if x, ok := x.GetResponse().(*MempoolResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *MempoolResponse) GetCheckPendingAccountResources() *CheckPendingAccountResourcesResponse {
	if x, ok := x.GetResponse().(*MempoolResponse_CheckPendingAccountResources); ok {
		return x.CheckPendingAccountResources
	}
	return nil
}

func (x *MempoolResponse) GetGetPendingTransactions() *GetPendingTransactionsResponse {
	if x, ok := x.GetResponse().(*MempoolResponse_GetPendingTransactions); ok {
		return x.GetPendingTransactions
	}
	return nil
}

type isMempoolResponse_Response interface {
	isMempoolResponse_Response()
}

type MempoolResponse_Reserved struct {
	Reserved *rpc.ReservedRpc `protobuf:"bytes,1,opt,name=reserved,proto3,oneof"`
}

type MempoolResponse_Error struct {
	Error *rpc.ErrorResponse `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type MempoolResponse_CheckPendingAccountResources struct {
	CheckPendingAccountResources *CheckPendingAccountResourcesResponse `protobuf:"bytes,3,opt,name=check_pending_account_resources,json=checkPendingAccountResources,proto3,oneof"`
}

type MempoolResponse_GetPendingTransactions struct {
	GetPendingTransactions *GetPendingTransactionsResponse `protobuf:"bytes,4,opt,name=get_pending_transactions,json=getPendingTransactions,proto3,oneof"`
}

func (*MempoolResponse_Reserved) isMempoolResponse_Response() {}

func (*MempoolResponse_Error) isMempoolResponse_Response() {}

func (*MempoolResponse_CheckPendingAccountResources) isMempoolResponse_Response() {}

func (*MempoolResponse_GetPendingTransactions) isMempoolResponse_Response() {}

var File_koinos_rpc_mempool_mempool_rpc_proto protoreflect.FileDescriptor

var file_koinos_rpc_mempool_mempool_rpc_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x65, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x1a, 0x14, 0x6b, 0x6f, 0x69, 0x6e,
	0x6f, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x70, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x01, 0x0a, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x11, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x64,
	0x69, 0x73, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x64, 0x12, 0x38,
	0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x55, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x14, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x55, 0x73,
	0x65, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x27, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x06, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x61, 0x79, 0x65, 0x72, 0x52, 0x63,
	0x12, 0x1d, 0x0a, 0x08, 0x72, 0x63, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x07, 0x72, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x24, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x22, 0x44, 0x0a, 0x28, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x6f, 0x0a, 0x20, 0x67, 0x65, 0x74, 0x5f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x48, 0x00,
	0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x22, 0x7f, 0x0a, 0x21, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a,
	0x0a, 0x14, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b,
	0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcd, 0x02, 0x0a, 0x0f, 0x6d,
	0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x70, 0x63, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x84, 0x01, 0x0a, 0x1f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65,
	0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x1c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x70, 0x0a,
	0x18, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x6d, 0x65, 0x6d,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x85, 0x03, 0x0a, 0x10, 0x6d,
	0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x70, 0x63, 0x48, 0x00, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x85, 0x01, 0x0a, 0x1f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x16,
	0x67, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6b, 0x6f, 0x69, 0x6e,
	0x6f, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x65, 0x6d, 0x70, 0x6f, 0x6f, 0x6c, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_koinos_rpc_mempool_mempool_rpc_proto_rawDescOnce sync.Once
	file_koinos_rpc_mempool_mempool_rpc_proto_rawDescData = file_koinos_rpc_mempool_mempool_rpc_proto_rawDesc
)

func file_koinos_rpc_mempool_mempool_rpc_proto_rawDescGZIP() []byte {
	file_koinos_rpc_mempool_mempool_rpc_proto_rawDescOnce.Do(func() {
		file_koinos_rpc_mempool_mempool_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_koinos_rpc_mempool_mempool_rpc_proto_rawDescData)
	})
	return file_koinos_rpc_mempool_mempool_rpc_proto_rawDescData
}

var file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_koinos_rpc_mempool_mempool_rpc_proto_goTypes = []interface{}{
	(*PendingTransaction)(nil),                   // 0: koinos.rpc.mempool.pending_transaction
	(*CheckPendingAccountResourcesRequest)(nil),  // 1: koinos.rpc.mempool.check_pending_account_resources_request
	(*CheckPendingAccountResourcesResponse)(nil), // 2: koinos.rpc.mempool.check_pending_account_resources_response
	(*GetPendingTransactionsRequest)(nil),        // 3: koinos.rpc.mempool.get_pending_transactions_request
	(*GetPendingTransactionsResponse)(nil),       // 4: koinos.rpc.mempool.get_pending_transactions_response
	(*MempoolRequest)(nil),                       // 5: koinos.rpc.mempool.mempool_request
	(*MempoolResponse)(nil),                      // 6: koinos.rpc.mempool.mempool_response
	(*protocol.Transaction)(nil),                 // 7: koinos.protocol.transaction
	(*rpc.ReservedRpc)(nil),                      // 8: koinos.rpc.reserved_rpc
	(*rpc.ErrorResponse)(nil),                    // 9: koinos.rpc.error_response
}
var file_koinos_rpc_mempool_mempool_rpc_proto_depIdxs = []int32{
	7, // 0: koinos.rpc.mempool.pending_transaction.transaction:type_name -> koinos.protocol.transaction
	0, // 1: koinos.rpc.mempool.get_pending_transactions_response.pending_transactions:type_name -> koinos.rpc.mempool.pending_transaction
	8, // 2: koinos.rpc.mempool.mempool_request.reserved:type_name -> koinos.rpc.reserved_rpc
	1, // 3: koinos.rpc.mempool.mempool_request.check_pending_account_resources:type_name -> koinos.rpc.mempool.check_pending_account_resources_request
	3, // 4: koinos.rpc.mempool.mempool_request.get_pending_transactions:type_name -> koinos.rpc.mempool.get_pending_transactions_request
	8, // 5: koinos.rpc.mempool.mempool_response.reserved:type_name -> koinos.rpc.reserved_rpc
	9, // 6: koinos.rpc.mempool.mempool_response.error:type_name -> koinos.rpc.error_response
	2, // 7: koinos.rpc.mempool.mempool_response.check_pending_account_resources:type_name -> koinos.rpc.mempool.check_pending_account_resources_response
	4, // 8: koinos.rpc.mempool.mempool_response.get_pending_transactions:type_name -> koinos.rpc.mempool.get_pending_transactions_response
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_koinos_rpc_mempool_mempool_rpc_proto_init() }
func file_koinos_rpc_mempool_mempool_rpc_proto_init() {
	if File_koinos_rpc_mempool_mempool_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPendingAccountResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPendingAccountResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPendingTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MempoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MempoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*MempoolRequest_Reserved)(nil),
		(*MempoolRequest_CheckPendingAccountResources)(nil),
		(*MempoolRequest_GetPendingTransactions)(nil),
	}
	file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*MempoolResponse_Reserved)(nil),
		(*MempoolResponse_Error)(nil),
		(*MempoolResponse_CheckPendingAccountResources)(nil),
		(*MempoolResponse_GetPendingTransactions)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_koinos_rpc_mempool_mempool_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_koinos_rpc_mempool_mempool_rpc_proto_goTypes,
		DependencyIndexes: file_koinos_rpc_mempool_mempool_rpc_proto_depIdxs,
		MessageInfos:      file_koinos_rpc_mempool_mempool_rpc_proto_msgTypes,
	}.Build()
	File_koinos_rpc_mempool_mempool_rpc_proto = out.File
	file_koinos_rpc_mempool_mempool_rpc_proto_rawDesc = nil
	file_koinos_rpc_mempool_mempool_rpc_proto_goTypes = nil
	file_koinos_rpc_mempool_mempool_rpc_proto_depIdxs = nil
}
