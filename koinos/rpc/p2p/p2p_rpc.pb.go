// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.17.3
// source: koinos/rpc/p2p/p2p_rpc.proto

package p2p

import (
	rpc "github.com/koinos/koinos-proto-golang/koinos/rpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetGossipStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetGossipStatusRequest) Reset() {
	*x = GetGossipStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_p2p_p2p_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGossipStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGossipStatusRequest) ProtoMessage() {}

func (x *GetGossipStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_p2p_p2p_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGossipStatusRequest.ProtoReflect.Descriptor instead.
func (*GetGossipStatusRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_p2p_p2p_rpc_proto_rawDescGZIP(), []int{0}
}

type GetGossipStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *GetGossipStatusResponse) Reset() {
	*x = GetGossipStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_p2p_p2p_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGossipStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGossipStatusResponse) ProtoMessage() {}

func (x *GetGossipStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_p2p_p2p_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGossipStatusResponse.ProtoReflect.Descriptor instead.
func (*GetGossipStatusResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_p2p_p2p_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *GetGossipStatusResponse) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type P2PRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*P2PRequest_Reserved
	//	*P2PRequest_GetGossipStatus
	Request isP2PRequest_Request `protobuf_oneof:"request"`
}

func (x *P2PRequest) Reset() {
	*x = P2PRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_p2p_p2p_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PRequest) ProtoMessage() {}

func (x *P2PRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_p2p_p2p_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PRequest.ProtoReflect.Descriptor instead.
func (*P2PRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_p2p_p2p_rpc_proto_rawDescGZIP(), []int{2}
}

func (m *P2PRequest) GetRequest() isP2PRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *P2PRequest) GetReserved() *rpc.ReservedRpc {
	if x, ok := x.GetRequest().(*P2PRequest_Reserved); ok {
		return x.Reserved
	}
	return nil
}

func (x *P2PRequest) GetGetGossipStatus() *GetGossipStatusRequest {
	if x, ok := x.GetRequest().(*P2PRequest_GetGossipStatus); ok {
		return x.GetGossipStatus
	}
	return nil
}

type isP2PRequest_Request interface {
	isP2PRequest_Request()
}

type P2PRequest_Reserved struct {
	Reserved *rpc.ReservedRpc `protobuf:"bytes,1,opt,name=reserved,proto3,oneof"`
}

type P2PRequest_GetGossipStatus struct {
	GetGossipStatus *GetGossipStatusRequest `protobuf:"bytes,2,opt,name=get_gossip_status,json=getGossipStatus,proto3,oneof"`
}

func (*P2PRequest_Reserved) isP2PRequest_Request() {}

func (*P2PRequest_GetGossipStatus) isP2PRequest_Request() {}

type P2PResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*P2PResponse_Reserved
	//	*P2PResponse_Error
	//	*P2PResponse_GetGossipStatus
	Response isP2PResponse_Response `protobuf_oneof:"response"`
}

func (x *P2PResponse) Reset() {
	*x = P2PResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_p2p_p2p_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PResponse) ProtoMessage() {}

func (x *P2PResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_p2p_p2p_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PResponse.ProtoReflect.Descriptor instead.
func (*P2PResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_p2p_p2p_rpc_proto_rawDescGZIP(), []int{3}
}

func (m *P2PResponse) GetResponse() isP2PResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *P2PResponse) GetReserved() *rpc.ReservedRpc {
	if x, ok := x.GetResponse().(*P2PResponse_Reserved); ok {
		return x.Reserved
	}
	return nil
}

func (x *P2PResponse) GetError() *rpc.ErrorResponse {
	if x, ok := x.GetResponse().(*P2PResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *P2PResponse) GetGetGossipStatus() *GetGossipStatusResponse {
	if x, ok := x.GetResponse().(*P2PResponse_GetGossipStatus); ok {
		return x.GetGossipStatus
	}
	return nil
}

type isP2PResponse_Response interface {
	isP2PResponse_Response()
}

type P2PResponse_Reserved struct {
	Reserved *rpc.ReservedRpc `protobuf:"bytes,1,opt,name=reserved,proto3,oneof"`
}

type P2PResponse_Error struct {
	Error *rpc.ErrorResponse `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type P2PResponse_GetGossipStatus struct {
	GetGossipStatus *GetGossipStatusResponse `protobuf:"bytes,3,opt,name=get_gossip_status,json=getGossipStatus,proto3,oneof"`
}

func (*P2PResponse_Reserved) isP2PResponse_Response() {}

func (*P2PResponse_Error) isP2PResponse_Response() {}

func (*P2PResponse_GetGossipStatus) isP2PResponse_Response() {}

var File_koinos_rpc_p2p_p2p_rpc_proto protoreflect.FileDescriptor

var file_koinos_rpc_p2p_p2p_rpc_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x32, 0x70,
	0x2f, 0x70, 0x32, 0x70, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e,
	0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x32, 0x70, 0x1a, 0x14,
	0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1b, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x73, 0x73,
	0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x36, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x70, 0x32,
	0x70, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x6f,
	0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x72, 0x70, 0x63, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x12, 0x57, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b,
	0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x67, 0x65,
	0x74, 0x5f, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x47, 0x6f,
	0x73, 0x73, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x0c, 0x70, 0x32, 0x70, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x72,
	0x70, 0x63, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x32,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x58, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x67,
	0x65, 0x74, 0x5f, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74,
	0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x6b, 0x6f,
	0x69, 0x6e, 0x6f, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2f, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x32, 0x70,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_koinos_rpc_p2p_p2p_rpc_proto_rawDescOnce sync.Once
	file_koinos_rpc_p2p_p2p_rpc_proto_rawDescData = file_koinos_rpc_p2p_p2p_rpc_proto_rawDesc
)

func file_koinos_rpc_p2p_p2p_rpc_proto_rawDescGZIP() []byte {
	file_koinos_rpc_p2p_p2p_rpc_proto_rawDescOnce.Do(func() {
		file_koinos_rpc_p2p_p2p_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_koinos_rpc_p2p_p2p_rpc_proto_rawDescData)
	})
	return file_koinos_rpc_p2p_p2p_rpc_proto_rawDescData
}

var file_koinos_rpc_p2p_p2p_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_koinos_rpc_p2p_p2p_rpc_proto_goTypes = []interface{}{
	(*GetGossipStatusRequest)(nil),  // 0: koinos.rpc.p2p.get_gossip_status_request
	(*GetGossipStatusResponse)(nil), // 1: koinos.rpc.p2p.get_gossip_status_response
	(*P2PRequest)(nil),              // 2: koinos.rpc.p2p.p2p_request
	(*P2PResponse)(nil),             // 3: koinos.rpc.p2p.p2p_response
	(*rpc.ReservedRpc)(nil),         // 4: koinos.rpc.reserved_rpc
	(*rpc.ErrorResponse)(nil),       // 5: koinos.rpc.error_response
}
var file_koinos_rpc_p2p_p2p_rpc_proto_depIdxs = []int32{
	4, // 0: koinos.rpc.p2p.p2p_request.reserved:type_name -> koinos.rpc.reserved_rpc
	0, // 1: koinos.rpc.p2p.p2p_request.get_gossip_status:type_name -> koinos.rpc.p2p.get_gossip_status_request
	4, // 2: koinos.rpc.p2p.p2p_response.reserved:type_name -> koinos.rpc.reserved_rpc
	5, // 3: koinos.rpc.p2p.p2p_response.error:type_name -> koinos.rpc.error_response
	1, // 4: koinos.rpc.p2p.p2p_response.get_gossip_status:type_name -> koinos.rpc.p2p.get_gossip_status_response
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_koinos_rpc_p2p_p2p_rpc_proto_init() }
func file_koinos_rpc_p2p_p2p_rpc_proto_init() {
	if File_koinos_rpc_p2p_p2p_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_koinos_rpc_p2p_p2p_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGossipStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_p2p_p2p_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGossipStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_p2p_p2p_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_p2p_p2p_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_koinos_rpc_p2p_p2p_rpc_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*P2PRequest_Reserved)(nil),
		(*P2PRequest_GetGossipStatus)(nil),
	}
	file_koinos_rpc_p2p_p2p_rpc_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*P2PResponse_Reserved)(nil),
		(*P2PResponse_Error)(nil),
		(*P2PResponse_GetGossipStatus)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_koinos_rpc_p2p_p2p_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_koinos_rpc_p2p_p2p_rpc_proto_goTypes,
		DependencyIndexes: file_koinos_rpc_p2p_p2p_rpc_proto_depIdxs,
		MessageInfos:      file_koinos_rpc_p2p_p2p_rpc_proto_msgTypes,
	}.Build()
	File_koinos_rpc_p2p_p2p_rpc_proto = out.File
	file_koinos_rpc_p2p_p2p_rpc_proto_rawDesc = nil
	file_koinos_rpc_p2p_p2p_rpc_proto_goTypes = nil
	file_koinos_rpc_p2p_p2p_rpc_proto_depIdxs = nil
}
