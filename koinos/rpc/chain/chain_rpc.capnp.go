// Code generated by capnpc-go. DO NOT EDIT.

package chain

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	koinos "koinos"
	protocol "koinos/protocol"
	rpc "koinos/rpc"
	strconv "strconv"
)

type ChainReservedRequest struct{ capnp.Struct }

// ChainReservedRequest_TypeID is the unique identifier for the type ChainReservedRequest.
const ChainReservedRequest_TypeID = 0xcff4afd45d3aa366

func NewChainReservedRequest(s *capnp.Segment) (ChainReservedRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ChainReservedRequest{st}, err
}

func NewRootChainReservedRequest(s *capnp.Segment) (ChainReservedRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ChainReservedRequest{st}, err
}

func ReadRootChainReservedRequest(msg *capnp.Message) (ChainReservedRequest, error) {
	root, err := msg.Root()
	return ChainReservedRequest{root.Struct()}, err
}

func (s ChainReservedRequest) String() string {
	str, _ := text.Marshal(0xcff4afd45d3aa366, s.Struct)
	return str
}

// ChainReservedRequest_List is a list of ChainReservedRequest.
type ChainReservedRequest_List struct{ capnp.List }

// NewChainReservedRequest creates a new list of ChainReservedRequest.
func NewChainReservedRequest_List(s *capnp.Segment, sz int32) (ChainReservedRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ChainReservedRequest_List{l}, err
}

func (s ChainReservedRequest_List) At(i int) ChainReservedRequest {
	return ChainReservedRequest{s.List.Struct(i)}
}

func (s ChainReservedRequest_List) Set(i int, v ChainReservedRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ChainReservedRequest_List) String() string {
	str, _ := text.MarshalList(0xcff4afd45d3aa366, s.List)
	return str
}

// ChainReservedRequest_Future is a wrapper for a ChainReservedRequest promised by a client call.
type ChainReservedRequest_Future struct{ *capnp.Future }

func (p ChainReservedRequest_Future) Struct() (ChainReservedRequest, error) {
	s, err := p.Future.Struct()
	return ChainReservedRequest{s}, err
}

type SubmitBlockRequest struct{ capnp.Struct }

// SubmitBlockRequest_TypeID is the unique identifier for the type SubmitBlockRequest.
const SubmitBlockRequest_TypeID = 0x92be0f038e62cf7d

func NewSubmitBlockRequest(s *capnp.Segment) (SubmitBlockRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SubmitBlockRequest{st}, err
}

func NewRootSubmitBlockRequest(s *capnp.Segment) (SubmitBlockRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SubmitBlockRequest{st}, err
}

func ReadRootSubmitBlockRequest(msg *capnp.Message) (SubmitBlockRequest, error) {
	root, err := msg.Root()
	return SubmitBlockRequest{root.Struct()}, err
}

func (s SubmitBlockRequest) String() string {
	str, _ := text.Marshal(0x92be0f038e62cf7d, s.Struct)
	return str
}

func (s SubmitBlockRequest) Block() (protocol.Block, error) {
	p, err := s.Struct.Ptr(0)
	return protocol.Block{Struct: p.Struct()}, err
}

func (s SubmitBlockRequest) HasBlock() bool {
	return s.Struct.HasPtr(0)
}

func (s SubmitBlockRequest) SetBlock(v protocol.Block) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated protocol.Block struct, preferring placement in s's segment.
func (s SubmitBlockRequest) NewBlock() (protocol.Block, error) {
	ss, err := protocol.NewBlock(s.Struct.Segment())
	if err != nil {
		return protocol.Block{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SubmitBlockRequest) VerifyPassiveDatae() bool {
	return s.Struct.Bit(0)
}

func (s SubmitBlockRequest) SetVerifyPassiveDatae(v bool) {
	s.Struct.SetBit(0, v)
}

func (s SubmitBlockRequest) VerifyBlockSignature() bool {
	return s.Struct.Bit(1)
}

func (s SubmitBlockRequest) SetVerifyBlockSignature(v bool) {
	s.Struct.SetBit(1, v)
}

func (s SubmitBlockRequest) VerifyTransactionSignature() bool {
	return s.Struct.Bit(2)
}

func (s SubmitBlockRequest) SetVerifyTransactionSignature(v bool) {
	s.Struct.SetBit(2, v)
}

// SubmitBlockRequest_List is a list of SubmitBlockRequest.
type SubmitBlockRequest_List struct{ capnp.List }

// NewSubmitBlockRequest creates a new list of SubmitBlockRequest.
func NewSubmitBlockRequest_List(s *capnp.Segment, sz int32) (SubmitBlockRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SubmitBlockRequest_List{l}, err
}

func (s SubmitBlockRequest_List) At(i int) SubmitBlockRequest {
	return SubmitBlockRequest{s.List.Struct(i)}
}

func (s SubmitBlockRequest_List) Set(i int, v SubmitBlockRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SubmitBlockRequest_List) String() string {
	str, _ := text.MarshalList(0x92be0f038e62cf7d, s.List)
	return str
}

// SubmitBlockRequest_Future is a wrapper for a SubmitBlockRequest promised by a client call.
type SubmitBlockRequest_Future struct{ *capnp.Future }

func (p SubmitBlockRequest_Future) Struct() (SubmitBlockRequest, error) {
	s, err := p.Future.Struct()
	return SubmitBlockRequest{s}, err
}

func (p SubmitBlockRequest_Future) Block() protocol.Block_Future {
	return protocol.Block_Future{Future: p.Future.Field(0, nil)}
}

type SubmitTransactionRequest struct{ capnp.Struct }

// SubmitTransactionRequest_TypeID is the unique identifier for the type SubmitTransactionRequest.
const SubmitTransactionRequest_TypeID = 0xb8def1844a5aeab4

func NewSubmitTransactionRequest(s *capnp.Segment) (SubmitTransactionRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SubmitTransactionRequest{st}, err
}

func NewRootSubmitTransactionRequest(s *capnp.Segment) (SubmitTransactionRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SubmitTransactionRequest{st}, err
}

func ReadRootSubmitTransactionRequest(msg *capnp.Message) (SubmitTransactionRequest, error) {
	root, err := msg.Root()
	return SubmitTransactionRequest{root.Struct()}, err
}

func (s SubmitTransactionRequest) String() string {
	str, _ := text.Marshal(0xb8def1844a5aeab4, s.Struct)
	return str
}

func (s SubmitTransactionRequest) Transaction() (protocol.Transaction, error) {
	p, err := s.Struct.Ptr(0)
	return protocol.Transaction{Struct: p.Struct()}, err
}

func (s SubmitTransactionRequest) HasTransaction() bool {
	return s.Struct.HasPtr(0)
}

func (s SubmitTransactionRequest) SetTransaction(v protocol.Transaction) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTransaction sets the transaction field to a newly
// allocated protocol.Transaction struct, preferring placement in s's segment.
func (s SubmitTransactionRequest) NewTransaction() (protocol.Transaction, error) {
	ss, err := protocol.NewTransaction(s.Struct.Segment())
	if err != nil {
		return protocol.Transaction{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SubmitTransactionRequest) VerifyPassiveData() bool {
	return s.Struct.Bit(0)
}

func (s SubmitTransactionRequest) SetVerifyPassiveData(v bool) {
	s.Struct.SetBit(0, v)
}

func (s SubmitTransactionRequest) VerifyTransactionSignature() bool {
	return s.Struct.Bit(1)
}

func (s SubmitTransactionRequest) SetVerifyTransactionSignature(v bool) {
	s.Struct.SetBit(1, v)
}

// SubmitTransactionRequest_List is a list of SubmitTransactionRequest.
type SubmitTransactionRequest_List struct{ capnp.List }

// NewSubmitTransactionRequest creates a new list of SubmitTransactionRequest.
func NewSubmitTransactionRequest_List(s *capnp.Segment, sz int32) (SubmitTransactionRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SubmitTransactionRequest_List{l}, err
}

func (s SubmitTransactionRequest_List) At(i int) SubmitTransactionRequest {
	return SubmitTransactionRequest{s.List.Struct(i)}
}

func (s SubmitTransactionRequest_List) Set(i int, v SubmitTransactionRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SubmitTransactionRequest_List) String() string {
	str, _ := text.MarshalList(0xb8def1844a5aeab4, s.List)
	return str
}

// SubmitTransactionRequest_Future is a wrapper for a SubmitTransactionRequest promised by a client call.
type SubmitTransactionRequest_Future struct{ *capnp.Future }

func (p SubmitTransactionRequest_Future) Struct() (SubmitTransactionRequest, error) {
	s, err := p.Future.Struct()
	return SubmitTransactionRequest{s}, err
}

func (p SubmitTransactionRequest_Future) Transaction() protocol.Transaction_Future {
	return protocol.Transaction_Future{Future: p.Future.Field(0, nil)}
}

type GetHeadInfoRequest struct{ capnp.Struct }

// GetHeadInfoRequest_TypeID is the unique identifier for the type GetHeadInfoRequest.
const GetHeadInfoRequest_TypeID = 0xd94f69353dc76c70

func NewGetHeadInfoRequest(s *capnp.Segment) (GetHeadInfoRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return GetHeadInfoRequest{st}, err
}

func NewRootGetHeadInfoRequest(s *capnp.Segment) (GetHeadInfoRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return GetHeadInfoRequest{st}, err
}

func ReadRootGetHeadInfoRequest(msg *capnp.Message) (GetHeadInfoRequest, error) {
	root, err := msg.Root()
	return GetHeadInfoRequest{root.Struct()}, err
}

func (s GetHeadInfoRequest) String() string {
	str, _ := text.Marshal(0xd94f69353dc76c70, s.Struct)
	return str
}

// GetHeadInfoRequest_List is a list of GetHeadInfoRequest.
type GetHeadInfoRequest_List struct{ capnp.List }

// NewGetHeadInfoRequest creates a new list of GetHeadInfoRequest.
func NewGetHeadInfoRequest_List(s *capnp.Segment, sz int32) (GetHeadInfoRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return GetHeadInfoRequest_List{l}, err
}

func (s GetHeadInfoRequest_List) At(i int) GetHeadInfoRequest {
	return GetHeadInfoRequest{s.List.Struct(i)}
}

func (s GetHeadInfoRequest_List) Set(i int, v GetHeadInfoRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s GetHeadInfoRequest_List) String() string {
	str, _ := text.MarshalList(0xd94f69353dc76c70, s.List)
	return str
}

// GetHeadInfoRequest_Future is a wrapper for a GetHeadInfoRequest promised by a client call.
type GetHeadInfoRequest_Future struct{ *capnp.Future }

func (p GetHeadInfoRequest_Future) Struct() (GetHeadInfoRequest, error) {
	s, err := p.Future.Struct()
	return GetHeadInfoRequest{s}, err
}

type GetChainIDRequest struct{ capnp.Struct }

// GetChainIDRequest_TypeID is the unique identifier for the type GetChainIDRequest.
const GetChainIDRequest_TypeID = 0xc0b17b210dd3cd64

func NewGetChainIDRequest(s *capnp.Segment) (GetChainIDRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return GetChainIDRequest{st}, err
}

func NewRootGetChainIDRequest(s *capnp.Segment) (GetChainIDRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return GetChainIDRequest{st}, err
}

func ReadRootGetChainIDRequest(msg *capnp.Message) (GetChainIDRequest, error) {
	root, err := msg.Root()
	return GetChainIDRequest{root.Struct()}, err
}

func (s GetChainIDRequest) String() string {
	str, _ := text.Marshal(0xc0b17b210dd3cd64, s.Struct)
	return str
}

// GetChainIDRequest_List is a list of GetChainIDRequest.
type GetChainIDRequest_List struct{ capnp.List }

// NewGetChainIDRequest creates a new list of GetChainIDRequest.
func NewGetChainIDRequest_List(s *capnp.Segment, sz int32) (GetChainIDRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return GetChainIDRequest_List{l}, err
}

func (s GetChainIDRequest_List) At(i int) GetChainIDRequest {
	return GetChainIDRequest{s.List.Struct(i)}
}

func (s GetChainIDRequest_List) Set(i int, v GetChainIDRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s GetChainIDRequest_List) String() string {
	str, _ := text.MarshalList(0xc0b17b210dd3cd64, s.List)
	return str
}

// GetChainIDRequest_Future is a wrapper for a GetChainIDRequest promised by a client call.
type GetChainIDRequest_Future struct{ *capnp.Future }

func (p GetChainIDRequest_Future) Struct() (GetChainIDRequest, error) {
	s, err := p.Future.Struct()
	return GetChainIDRequest{s}, err
}

type GetForkHeadsRequest struct{ capnp.Struct }

// GetForkHeadsRequest_TypeID is the unique identifier for the type GetForkHeadsRequest.
const GetForkHeadsRequest_TypeID = 0xa00ec3c6a809cd8b

func NewGetForkHeadsRequest(s *capnp.Segment) (GetForkHeadsRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return GetForkHeadsRequest{st}, err
}

func NewRootGetForkHeadsRequest(s *capnp.Segment) (GetForkHeadsRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return GetForkHeadsRequest{st}, err
}

func ReadRootGetForkHeadsRequest(msg *capnp.Message) (GetForkHeadsRequest, error) {
	root, err := msg.Root()
	return GetForkHeadsRequest{root.Struct()}, err
}

func (s GetForkHeadsRequest) String() string {
	str, _ := text.Marshal(0xa00ec3c6a809cd8b, s.Struct)
	return str
}

// GetForkHeadsRequest_List is a list of GetForkHeadsRequest.
type GetForkHeadsRequest_List struct{ capnp.List }

// NewGetForkHeadsRequest creates a new list of GetForkHeadsRequest.
func NewGetForkHeadsRequest_List(s *capnp.Segment, sz int32) (GetForkHeadsRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return GetForkHeadsRequest_List{l}, err
}

func (s GetForkHeadsRequest_List) At(i int) GetForkHeadsRequest {
	return GetForkHeadsRequest{s.List.Struct(i)}
}

func (s GetForkHeadsRequest_List) Set(i int, v GetForkHeadsRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s GetForkHeadsRequest_List) String() string {
	str, _ := text.MarshalList(0xa00ec3c6a809cd8b, s.List)
	return str
}

// GetForkHeadsRequest_Future is a wrapper for a GetForkHeadsRequest promised by a client call.
type GetForkHeadsRequest_Future struct{ *capnp.Future }

func (p GetForkHeadsRequest_Future) Struct() (GetForkHeadsRequest, error) {
	s, err := p.Future.Struct()
	return GetForkHeadsRequest{s}, err
}

type ReadContractRequest struct{ capnp.Struct }

// ReadContractRequest_TypeID is the unique identifier for the type ReadContractRequest.
const ReadContractRequest_TypeID = 0xc7b456069d3678ad

func NewReadContractRequest(s *capnp.Segment) (ReadContractRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ReadContractRequest{st}, err
}

func NewRootReadContractRequest(s *capnp.Segment) (ReadContractRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return ReadContractRequest{st}, err
}

func ReadRootReadContractRequest(msg *capnp.Message) (ReadContractRequest, error) {
	root, err := msg.Root()
	return ReadContractRequest{root.Struct()}, err
}

func (s ReadContractRequest) String() string {
	str, _ := text.Marshal(0xc7b456069d3678ad, s.Struct)
	return str
}

func (s ReadContractRequest) ContractID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ReadContractRequest) HasContractID() bool {
	return s.Struct.HasPtr(0)
}

func (s ReadContractRequest) SetContractID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ReadContractRequest) EntryPoint() uint32 {
	return s.Struct.Uint32(0)
}

func (s ReadContractRequest) SetEntryPoint(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s ReadContractRequest) Args() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s ReadContractRequest) HasArgs() bool {
	return s.Struct.HasPtr(1)
}

func (s ReadContractRequest) SetArgs(v []byte) error {
	return s.Struct.SetData(1, v)
}

// ReadContractRequest_List is a list of ReadContractRequest.
type ReadContractRequest_List struct{ capnp.List }

// NewReadContractRequest creates a new list of ReadContractRequest.
func NewReadContractRequest_List(s *capnp.Segment, sz int32) (ReadContractRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return ReadContractRequest_List{l}, err
}

func (s ReadContractRequest_List) At(i int) ReadContractRequest {
	return ReadContractRequest{s.List.Struct(i)}
}

func (s ReadContractRequest_List) Set(i int, v ReadContractRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ReadContractRequest_List) String() string {
	str, _ := text.MarshalList(0xc7b456069d3678ad, s.List)
	return str
}

// ReadContractRequest_Future is a wrapper for a ReadContractRequest promised by a client call.
type ReadContractRequest_Future struct{ *capnp.Future }

func (p ReadContractRequest_Future) Struct() (ReadContractRequest, error) {
	s, err := p.Future.Struct()
	return ReadContractRequest{s}, err
}

type GetAccountNonceRequest struct{ capnp.Struct }

// GetAccountNonceRequest_TypeID is the unique identifier for the type GetAccountNonceRequest.
const GetAccountNonceRequest_TypeID = 0xe8522a33787f2718

func NewGetAccountNonceRequest(s *capnp.Segment) (GetAccountNonceRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetAccountNonceRequest{st}, err
}

func NewRootGetAccountNonceRequest(s *capnp.Segment) (GetAccountNonceRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetAccountNonceRequest{st}, err
}

func ReadRootGetAccountNonceRequest(msg *capnp.Message) (GetAccountNonceRequest, error) {
	root, err := msg.Root()
	return GetAccountNonceRequest{root.Struct()}, err
}

func (s GetAccountNonceRequest) String() string {
	str, _ := text.Marshal(0xe8522a33787f2718, s.Struct)
	return str
}

func (s GetAccountNonceRequest) Account() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s GetAccountNonceRequest) HasAccount() bool {
	return s.Struct.HasPtr(0)
}

func (s GetAccountNonceRequest) SetAccount(v []byte) error {
	return s.Struct.SetData(0, v)
}

// GetAccountNonceRequest_List is a list of GetAccountNonceRequest.
type GetAccountNonceRequest_List struct{ capnp.List }

// NewGetAccountNonceRequest creates a new list of GetAccountNonceRequest.
func NewGetAccountNonceRequest_List(s *capnp.Segment, sz int32) (GetAccountNonceRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return GetAccountNonceRequest_List{l}, err
}

func (s GetAccountNonceRequest_List) At(i int) GetAccountNonceRequest {
	return GetAccountNonceRequest{s.List.Struct(i)}
}

func (s GetAccountNonceRequest_List) Set(i int, v GetAccountNonceRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s GetAccountNonceRequest_List) String() string {
	str, _ := text.MarshalList(0xe8522a33787f2718, s.List)
	return str
}

// GetAccountNonceRequest_Future is a wrapper for a GetAccountNonceRequest promised by a client call.
type GetAccountNonceRequest_Future struct{ *capnp.Future }

func (p GetAccountNonceRequest_Future) Struct() (GetAccountNonceRequest, error) {
	s, err := p.Future.Struct()
	return GetAccountNonceRequest{s}, err
}

type ChainRPCRequest struct{ capnp.Struct }
type ChainRPCRequest_Which uint16

const (
	ChainRPCRequest_Which_chainReserved     ChainRPCRequest_Which = 0
	ChainRPCRequest_Which_submitBlock       ChainRPCRequest_Which = 1
	ChainRPCRequest_Which_submitTransaction ChainRPCRequest_Which = 2
	ChainRPCRequest_Which_getHeadInfo       ChainRPCRequest_Which = 3
	ChainRPCRequest_Which_getChainID        ChainRPCRequest_Which = 4
	ChainRPCRequest_Which_getForkHeads      ChainRPCRequest_Which = 5
	ChainRPCRequest_Which_readContract      ChainRPCRequest_Which = 6
	ChainRPCRequest_Which_getAccountNonce   ChainRPCRequest_Which = 7
)

func (w ChainRPCRequest_Which) String() string {
	const s = "chainReservedsubmitBlocksubmitTransactiongetHeadInfogetChainIDgetForkHeadsreadContractgetAccountNonce"
	switch w {
	case ChainRPCRequest_Which_chainReserved:
		return s[0:13]
	case ChainRPCRequest_Which_submitBlock:
		return s[13:24]
	case ChainRPCRequest_Which_submitTransaction:
		return s[24:41]
	case ChainRPCRequest_Which_getHeadInfo:
		return s[41:52]
	case ChainRPCRequest_Which_getChainID:
		return s[52:62]
	case ChainRPCRequest_Which_getForkHeads:
		return s[62:74]
	case ChainRPCRequest_Which_readContract:
		return s[74:86]
	case ChainRPCRequest_Which_getAccountNonce:
		return s[86:101]

	}
	return "ChainRPCRequest_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ChainRPCRequest_TypeID is the unique identifier for the type ChainRPCRequest.
const ChainRPCRequest_TypeID = 0xb0c800ef1fe1c293

func NewChainRPCRequest(s *capnp.Segment) (ChainRPCRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ChainRPCRequest{st}, err
}

func NewRootChainRPCRequest(s *capnp.Segment) (ChainRPCRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ChainRPCRequest{st}, err
}

func ReadRootChainRPCRequest(msg *capnp.Message) (ChainRPCRequest, error) {
	root, err := msg.Root()
	return ChainRPCRequest{root.Struct()}, err
}

func (s ChainRPCRequest) String() string {
	str, _ := text.Marshal(0xb0c800ef1fe1c293, s.Struct)
	return str
}

func (s ChainRPCRequest) Which() ChainRPCRequest_Which {
	return ChainRPCRequest_Which(s.Struct.Uint16(0))
}
func (s ChainRPCRequest) ChainReserved() (ChainReservedRequest, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != chainReserved")
	}
	p, err := s.Struct.Ptr(0)
	return ChainReservedRequest{Struct: p.Struct()}, err
}

func (s ChainRPCRequest) HasChainReserved() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCRequest) SetChainReserved(v ChainReservedRequest) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewChainReserved sets the chainReserved field to a newly
// allocated ChainReservedRequest struct, preferring placement in s's segment.
func (s ChainRPCRequest) NewChainReserved() (ChainReservedRequest, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewChainReservedRequest(s.Struct.Segment())
	if err != nil {
		return ChainReservedRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChainRPCRequest) SubmitBlock() (SubmitBlockRequest, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != submitBlock")
	}
	p, err := s.Struct.Ptr(0)
	return SubmitBlockRequest{Struct: p.Struct()}, err
}

func (s ChainRPCRequest) HasSubmitBlock() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCRequest) SetSubmitBlock(v SubmitBlockRequest) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubmitBlock sets the submitBlock field to a newly
// allocated SubmitBlockRequest struct, preferring placement in s's segment.
func (s ChainRPCRequest) NewSubmitBlock() (SubmitBlockRequest, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewSubmitBlockRequest(s.Struct.Segment())
	if err != nil {
		return SubmitBlockRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChainRPCRequest) SubmitTransaction() (SubmitTransactionRequest, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != submitTransaction")
	}
	p, err := s.Struct.Ptr(0)
	return SubmitTransactionRequest{Struct: p.Struct()}, err
}

func (s ChainRPCRequest) HasSubmitTransaction() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCRequest) SetSubmitTransaction(v SubmitTransactionRequest) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubmitTransaction sets the submitTransaction field to a newly
// allocated SubmitTransactionRequest struct, preferring placement in s's segment.
func (s ChainRPCRequest) NewSubmitTransaction() (SubmitTransactionRequest, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewSubmitTransactionRequest(s.Struct.Segment())
	if err != nil {
		return SubmitTransactionRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChainRPCRequest) GetHeadInfo() (GetHeadInfoRequest, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != getHeadInfo")
	}
	p, err := s.Struct.Ptr(0)
	return GetHeadInfoRequest{Struct: p.Struct()}, err
}

func (s ChainRPCRequest) HasGetHeadInfo() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCRequest) SetGetHeadInfo(v GetHeadInfoRequest) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGetHeadInfo sets the getHeadInfo field to a newly
// allocated GetHeadInfoRequest struct, preferring placement in s's segment.
func (s ChainRPCRequest) NewGetHeadInfo() (GetHeadInfoRequest, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewGetHeadInfoRequest(s.Struct.Segment())
	if err != nil {
		return GetHeadInfoRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChainRPCRequest) GetChainID() (GetChainIDRequest, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != getChainID")
	}
	p, err := s.Struct.Ptr(0)
	return GetChainIDRequest{Struct: p.Struct()}, err
}

func (s ChainRPCRequest) HasGetChainID() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCRequest) SetGetChainID(v GetChainIDRequest) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGetChainID sets the getChainID field to a newly
// allocated GetChainIDRequest struct, preferring placement in s's segment.
func (s ChainRPCRequest) NewGetChainID() (GetChainIDRequest, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewGetChainIDRequest(s.Struct.Segment())
	if err != nil {
		return GetChainIDRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChainRPCRequest) GetForkHeads() (GetForkHeadsRequest, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != getForkHeads")
	}
	p, err := s.Struct.Ptr(0)
	return GetForkHeadsRequest{Struct: p.Struct()}, err
}

func (s ChainRPCRequest) HasGetForkHeads() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCRequest) SetGetForkHeads(v GetForkHeadsRequest) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGetForkHeads sets the getForkHeads field to a newly
// allocated GetForkHeadsRequest struct, preferring placement in s's segment.
func (s ChainRPCRequest) NewGetForkHeads() (GetForkHeadsRequest, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewGetForkHeadsRequest(s.Struct.Segment())
	if err != nil {
		return GetForkHeadsRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChainRPCRequest) ReadContract() (ReadContractRequest, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != readContract")
	}
	p, err := s.Struct.Ptr(0)
	return ReadContractRequest{Struct: p.Struct()}, err
}

func (s ChainRPCRequest) HasReadContract() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCRequest) SetReadContract(v ReadContractRequest) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewReadContract sets the readContract field to a newly
// allocated ReadContractRequest struct, preferring placement in s's segment.
func (s ChainRPCRequest) NewReadContract() (ReadContractRequest, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewReadContractRequest(s.Struct.Segment())
	if err != nil {
		return ReadContractRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChainRPCRequest) GetAccountNonce() (GetAccountNonceRequest, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != getAccountNonce")
	}
	p, err := s.Struct.Ptr(0)
	return GetAccountNonceRequest{Struct: p.Struct()}, err
}

func (s ChainRPCRequest) HasGetAccountNonce() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCRequest) SetGetAccountNonce(v GetAccountNonceRequest) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGetAccountNonce sets the getAccountNonce field to a newly
// allocated GetAccountNonceRequest struct, preferring placement in s's segment.
func (s ChainRPCRequest) NewGetAccountNonce() (GetAccountNonceRequest, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewGetAccountNonceRequest(s.Struct.Segment())
	if err != nil {
		return GetAccountNonceRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ChainRPCRequest_List is a list of ChainRPCRequest.
type ChainRPCRequest_List struct{ capnp.List }

// NewChainRPCRequest creates a new list of ChainRPCRequest.
func NewChainRPCRequest_List(s *capnp.Segment, sz int32) (ChainRPCRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ChainRPCRequest_List{l}, err
}

func (s ChainRPCRequest_List) At(i int) ChainRPCRequest { return ChainRPCRequest{s.List.Struct(i)} }

func (s ChainRPCRequest_List) Set(i int, v ChainRPCRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ChainRPCRequest_List) String() string {
	str, _ := text.MarshalList(0xb0c800ef1fe1c293, s.List)
	return str
}

// ChainRPCRequest_Future is a wrapper for a ChainRPCRequest promised by a client call.
type ChainRPCRequest_Future struct{ *capnp.Future }

func (p ChainRPCRequest_Future) Struct() (ChainRPCRequest, error) {
	s, err := p.Future.Struct()
	return ChainRPCRequest{s}, err
}

func (p ChainRPCRequest_Future) ChainReserved() ChainReservedRequest_Future {
	return ChainReservedRequest_Future{Future: p.Future.Field(0, nil)}
}

func (p ChainRPCRequest_Future) SubmitBlock() SubmitBlockRequest_Future {
	return SubmitBlockRequest_Future{Future: p.Future.Field(0, nil)}
}

func (p ChainRPCRequest_Future) SubmitTransaction() SubmitTransactionRequest_Future {
	return SubmitTransactionRequest_Future{Future: p.Future.Field(0, nil)}
}

func (p ChainRPCRequest_Future) GetHeadInfo() GetHeadInfoRequest_Future {
	return GetHeadInfoRequest_Future{Future: p.Future.Field(0, nil)}
}

func (p ChainRPCRequest_Future) GetChainID() GetChainIDRequest_Future {
	return GetChainIDRequest_Future{Future: p.Future.Field(0, nil)}
}

func (p ChainRPCRequest_Future) GetForkHeads() GetForkHeadsRequest_Future {
	return GetForkHeadsRequest_Future{Future: p.Future.Field(0, nil)}
}

func (p ChainRPCRequest_Future) ReadContract() ReadContractRequest_Future {
	return ReadContractRequest_Future{Future: p.Future.Field(0, nil)}
}

func (p ChainRPCRequest_Future) GetAccountNonce() GetAccountNonceRequest_Future {
	return GetAccountNonceRequest_Future{Future: p.Future.Field(0, nil)}
}

type ChainReservedResponse struct{ capnp.Struct }

// ChainReservedResponse_TypeID is the unique identifier for the type ChainReservedResponse.
const ChainReservedResponse_TypeID = 0xc30944e32061c256

func NewChainReservedResponse(s *capnp.Segment) (ChainReservedResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ChainReservedResponse{st}, err
}

func NewRootChainReservedResponse(s *capnp.Segment) (ChainReservedResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ChainReservedResponse{st}, err
}

func ReadRootChainReservedResponse(msg *capnp.Message) (ChainReservedResponse, error) {
	root, err := msg.Root()
	return ChainReservedResponse{root.Struct()}, err
}

func (s ChainReservedResponse) String() string {
	str, _ := text.Marshal(0xc30944e32061c256, s.Struct)
	return str
}

// ChainReservedResponse_List is a list of ChainReservedResponse.
type ChainReservedResponse_List struct{ capnp.List }

// NewChainReservedResponse creates a new list of ChainReservedResponse.
func NewChainReservedResponse_List(s *capnp.Segment, sz int32) (ChainReservedResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return ChainReservedResponse_List{l}, err
}

func (s ChainReservedResponse_List) At(i int) ChainReservedResponse {
	return ChainReservedResponse{s.List.Struct(i)}
}

func (s ChainReservedResponse_List) Set(i int, v ChainReservedResponse) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ChainReservedResponse_List) String() string {
	str, _ := text.MarshalList(0xc30944e32061c256, s.List)
	return str
}

// ChainReservedResponse_Future is a wrapper for a ChainReservedResponse promised by a client call.
type ChainReservedResponse_Future struct{ *capnp.Future }

func (p ChainReservedResponse_Future) Struct() (ChainReservedResponse, error) {
	s, err := p.Future.Struct()
	return ChainReservedResponse{s}, err
}

type SubmitBlockResponse struct{ capnp.Struct }

// SubmitBlockResponse_TypeID is the unique identifier for the type SubmitBlockResponse.
const SubmitBlockResponse_TypeID = 0xee62256b492299f7

func NewSubmitBlockResponse(s *capnp.Segment) (SubmitBlockResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SubmitBlockResponse{st}, err
}

func NewRootSubmitBlockResponse(s *capnp.Segment) (SubmitBlockResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SubmitBlockResponse{st}, err
}

func ReadRootSubmitBlockResponse(msg *capnp.Message) (SubmitBlockResponse, error) {
	root, err := msg.Root()
	return SubmitBlockResponse{root.Struct()}, err
}

func (s SubmitBlockResponse) String() string {
	str, _ := text.Marshal(0xee62256b492299f7, s.Struct)
	return str
}

// SubmitBlockResponse_List is a list of SubmitBlockResponse.
type SubmitBlockResponse_List struct{ capnp.List }

// NewSubmitBlockResponse creates a new list of SubmitBlockResponse.
func NewSubmitBlockResponse_List(s *capnp.Segment, sz int32) (SubmitBlockResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return SubmitBlockResponse_List{l}, err
}

func (s SubmitBlockResponse_List) At(i int) SubmitBlockResponse {
	return SubmitBlockResponse{s.List.Struct(i)}
}

func (s SubmitBlockResponse_List) Set(i int, v SubmitBlockResponse) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SubmitBlockResponse_List) String() string {
	str, _ := text.MarshalList(0xee62256b492299f7, s.List)
	return str
}

// SubmitBlockResponse_Future is a wrapper for a SubmitBlockResponse promised by a client call.
type SubmitBlockResponse_Future struct{ *capnp.Future }

func (p SubmitBlockResponse_Future) Struct() (SubmitBlockResponse, error) {
	s, err := p.Future.Struct()
	return SubmitBlockResponse{s}, err
}

type SubmitTransactionResponse struct{ capnp.Struct }

// SubmitTransactionResponse_TypeID is the unique identifier for the type SubmitTransactionResponse.
const SubmitTransactionResponse_TypeID = 0xa5249a9484d186fe

func NewSubmitTransactionResponse(s *capnp.Segment) (SubmitTransactionResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SubmitTransactionResponse{st}, err
}

func NewRootSubmitTransactionResponse(s *capnp.Segment) (SubmitTransactionResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SubmitTransactionResponse{st}, err
}

func ReadRootSubmitTransactionResponse(msg *capnp.Message) (SubmitTransactionResponse, error) {
	root, err := msg.Root()
	return SubmitTransactionResponse{root.Struct()}, err
}

func (s SubmitTransactionResponse) String() string {
	str, _ := text.Marshal(0xa5249a9484d186fe, s.Struct)
	return str
}

// SubmitTransactionResponse_List is a list of SubmitTransactionResponse.
type SubmitTransactionResponse_List struct{ capnp.List }

// NewSubmitTransactionResponse creates a new list of SubmitTransactionResponse.
func NewSubmitTransactionResponse_List(s *capnp.Segment, sz int32) (SubmitTransactionResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return SubmitTransactionResponse_List{l}, err
}

func (s SubmitTransactionResponse_List) At(i int) SubmitTransactionResponse {
	return SubmitTransactionResponse{s.List.Struct(i)}
}

func (s SubmitTransactionResponse_List) Set(i int, v SubmitTransactionResponse) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SubmitTransactionResponse_List) String() string {
	str, _ := text.MarshalList(0xa5249a9484d186fe, s.List)
	return str
}

// SubmitTransactionResponse_Future is a wrapper for a SubmitTransactionResponse promised by a client call.
type SubmitTransactionResponse_Future struct{ *capnp.Future }

func (p SubmitTransactionResponse_Future) Struct() (SubmitTransactionResponse, error) {
	s, err := p.Future.Struct()
	return SubmitTransactionResponse{s}, err
}

type GetHeadInfoResponse struct{ capnp.Struct }

// GetHeadInfoResponse_TypeID is the unique identifier for the type GetHeadInfoResponse.
const GetHeadInfoResponse_TypeID = 0xddab1b0d419144b5

func NewGetHeadInfoResponse(s *capnp.Segment) (GetHeadInfoResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetHeadInfoResponse{st}, err
}

func NewRootGetHeadInfoResponse(s *capnp.Segment) (GetHeadInfoResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return GetHeadInfoResponse{st}, err
}

func ReadRootGetHeadInfoResponse(msg *capnp.Message) (GetHeadInfoResponse, error) {
	root, err := msg.Root()
	return GetHeadInfoResponse{root.Struct()}, err
}

func (s GetHeadInfoResponse) String() string {
	str, _ := text.Marshal(0xddab1b0d419144b5, s.Struct)
	return str
}

func (s GetHeadInfoResponse) HeadTopology() (koinos.BlockTopology, error) {
	p, err := s.Struct.Ptr(0)
	return koinos.BlockTopology{Struct: p.Struct()}, err
}

func (s GetHeadInfoResponse) HasHeadTopology() bool {
	return s.Struct.HasPtr(0)
}

func (s GetHeadInfoResponse) SetHeadTopology(v koinos.BlockTopology) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHeadTopology sets the headTopology field to a newly
// allocated koinos.BlockTopology struct, preferring placement in s's segment.
func (s GetHeadInfoResponse) NewHeadTopology() (koinos.BlockTopology, error) {
	ss, err := koinos.NewBlockTopology(s.Struct.Segment())
	if err != nil {
		return koinos.BlockTopology{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s GetHeadInfoResponse) LastIrreversibleBlock() uint64 {
	return s.Struct.Uint64(0)
}

func (s GetHeadInfoResponse) SetLastIrreversibleBlock(v uint64) {
	s.Struct.SetUint64(0, v)
}

// GetHeadInfoResponse_List is a list of GetHeadInfoResponse.
type GetHeadInfoResponse_List struct{ capnp.List }

// NewGetHeadInfoResponse creates a new list of GetHeadInfoResponse.
func NewGetHeadInfoResponse_List(s *capnp.Segment, sz int32) (GetHeadInfoResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return GetHeadInfoResponse_List{l}, err
}

func (s GetHeadInfoResponse_List) At(i int) GetHeadInfoResponse {
	return GetHeadInfoResponse{s.List.Struct(i)}
}

func (s GetHeadInfoResponse_List) Set(i int, v GetHeadInfoResponse) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s GetHeadInfoResponse_List) String() string {
	str, _ := text.MarshalList(0xddab1b0d419144b5, s.List)
	return str
}

// GetHeadInfoResponse_Future is a wrapper for a GetHeadInfoResponse promised by a client call.
type GetHeadInfoResponse_Future struct{ *capnp.Future }

func (p GetHeadInfoResponse_Future) Struct() (GetHeadInfoResponse, error) {
	s, err := p.Future.Struct()
	return GetHeadInfoResponse{s}, err
}

func (p GetHeadInfoResponse_Future) HeadTopology() koinos.BlockTopology_Future {
	return koinos.BlockTopology_Future{Future: p.Future.Field(0, nil)}
}

type GetChainIDResponse struct{ capnp.Struct }

// GetChainIDResponse_TypeID is the unique identifier for the type GetChainIDResponse.
const GetChainIDResponse_TypeID = 0xa1cbf2908fb1a46c

func NewGetChainIDResponse(s *capnp.Segment) (GetChainIDResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetChainIDResponse{st}, err
}

func NewRootGetChainIDResponse(s *capnp.Segment) (GetChainIDResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return GetChainIDResponse{st}, err
}

func ReadRootGetChainIDResponse(msg *capnp.Message) (GetChainIDResponse, error) {
	root, err := msg.Root()
	return GetChainIDResponse{root.Struct()}, err
}

func (s GetChainIDResponse) String() string {
	str, _ := text.Marshal(0xa1cbf2908fb1a46c, s.Struct)
	return str
}

func (s GetChainIDResponse) ChainID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s GetChainIDResponse) HasChainID() bool {
	return s.Struct.HasPtr(0)
}

func (s GetChainIDResponse) SetChainID(v []byte) error {
	return s.Struct.SetData(0, v)
}

// GetChainIDResponse_List is a list of GetChainIDResponse.
type GetChainIDResponse_List struct{ capnp.List }

// NewGetChainIDResponse creates a new list of GetChainIDResponse.
func NewGetChainIDResponse_List(s *capnp.Segment, sz int32) (GetChainIDResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return GetChainIDResponse_List{l}, err
}

func (s GetChainIDResponse_List) At(i int) GetChainIDResponse {
	return GetChainIDResponse{s.List.Struct(i)}
}

func (s GetChainIDResponse_List) Set(i int, v GetChainIDResponse) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s GetChainIDResponse_List) String() string {
	str, _ := text.MarshalList(0xa1cbf2908fb1a46c, s.List)
	return str
}

// GetChainIDResponse_Future is a wrapper for a GetChainIDResponse promised by a client call.
type GetChainIDResponse_Future struct{ *capnp.Future }

func (p GetChainIDResponse_Future) Struct() (GetChainIDResponse, error) {
	s, err := p.Future.Struct()
	return GetChainIDResponse{s}, err
}

type GetForkHeadsResponse struct{ capnp.Struct }

// GetForkHeadsResponse_TypeID is the unique identifier for the type GetForkHeadsResponse.
const GetForkHeadsResponse_TypeID = 0xa1ffe76821d5b379

func NewGetForkHeadsResponse(s *capnp.Segment) (GetForkHeadsResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GetForkHeadsResponse{st}, err
}

func NewRootGetForkHeadsResponse(s *capnp.Segment) (GetForkHeadsResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return GetForkHeadsResponse{st}, err
}

func ReadRootGetForkHeadsResponse(msg *capnp.Message) (GetForkHeadsResponse, error) {
	root, err := msg.Root()
	return GetForkHeadsResponse{root.Struct()}, err
}

func (s GetForkHeadsResponse) String() string {
	str, _ := text.Marshal(0xa1ffe76821d5b379, s.Struct)
	return str
}

func (s GetForkHeadsResponse) ForkHeads() (koinos.BlockTopology_List, error) {
	p, err := s.Struct.Ptr(0)
	return koinos.BlockTopology_List{List: p.List()}, err
}

func (s GetForkHeadsResponse) HasForkHeads() bool {
	return s.Struct.HasPtr(0)
}

func (s GetForkHeadsResponse) SetForkHeads(v koinos.BlockTopology_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewForkHeads sets the forkHeads field to a newly
// allocated koinos.BlockTopology_List, preferring placement in s's segment.
func (s GetForkHeadsResponse) NewForkHeads(n int32) (koinos.BlockTopology_List, error) {
	l, err := koinos.NewBlockTopology_List(s.Struct.Segment(), n)
	if err != nil {
		return koinos.BlockTopology_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s GetForkHeadsResponse) LastIrreversibleBlock() (koinos.BlockTopology, error) {
	p, err := s.Struct.Ptr(1)
	return koinos.BlockTopology{Struct: p.Struct()}, err
}

func (s GetForkHeadsResponse) HasLastIrreversibleBlock() bool {
	return s.Struct.HasPtr(1)
}

func (s GetForkHeadsResponse) SetLastIrreversibleBlock(v koinos.BlockTopology) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewLastIrreversibleBlock sets the lastIrreversibleBlock field to a newly
// allocated koinos.BlockTopology struct, preferring placement in s's segment.
func (s GetForkHeadsResponse) NewLastIrreversibleBlock() (koinos.BlockTopology, error) {
	ss, err := koinos.NewBlockTopology(s.Struct.Segment())
	if err != nil {
		return koinos.BlockTopology{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// GetForkHeadsResponse_List is a list of GetForkHeadsResponse.
type GetForkHeadsResponse_List struct{ capnp.List }

// NewGetForkHeadsResponse creates a new list of GetForkHeadsResponse.
func NewGetForkHeadsResponse_List(s *capnp.Segment, sz int32) (GetForkHeadsResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return GetForkHeadsResponse_List{l}, err
}

func (s GetForkHeadsResponse_List) At(i int) GetForkHeadsResponse {
	return GetForkHeadsResponse{s.List.Struct(i)}
}

func (s GetForkHeadsResponse_List) Set(i int, v GetForkHeadsResponse) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s GetForkHeadsResponse_List) String() string {
	str, _ := text.MarshalList(0xa1ffe76821d5b379, s.List)
	return str
}

// GetForkHeadsResponse_Future is a wrapper for a GetForkHeadsResponse promised by a client call.
type GetForkHeadsResponse_Future struct{ *capnp.Future }

func (p GetForkHeadsResponse_Future) Struct() (GetForkHeadsResponse, error) {
	s, err := p.Future.Struct()
	return GetForkHeadsResponse{s}, err
}

func (p GetForkHeadsResponse_Future) LastIrreversibleBlock() koinos.BlockTopology_Future {
	return koinos.BlockTopology_Future{Future: p.Future.Field(1, nil)}
}

type ReadContractResponse struct{ capnp.Struct }

// ReadContractResponse_TypeID is the unique identifier for the type ReadContractResponse.
const ReadContractResponse_TypeID = 0xe40f9f0120d573b7

func NewReadContractResponse(s *capnp.Segment) (ReadContractResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ReadContractResponse{st}, err
}

func NewRootReadContractResponse(s *capnp.Segment) (ReadContractResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ReadContractResponse{st}, err
}

func ReadRootReadContractResponse(msg *capnp.Message) (ReadContractResponse, error) {
	root, err := msg.Root()
	return ReadContractResponse{root.Struct()}, err
}

func (s ReadContractResponse) String() string {
	str, _ := text.Marshal(0xe40f9f0120d573b7, s.Struct)
	return str
}

func (s ReadContractResponse) Result() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ReadContractResponse) HasResult() bool {
	return s.Struct.HasPtr(0)
}

func (s ReadContractResponse) SetResult(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ReadContractResponse) Logs() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ReadContractResponse) HasLogs() bool {
	return s.Struct.HasPtr(1)
}

func (s ReadContractResponse) LogsBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ReadContractResponse) SetLogs(v string) error {
	return s.Struct.SetText(1, v)
}

// ReadContractResponse_List is a list of ReadContractResponse.
type ReadContractResponse_List struct{ capnp.List }

// NewReadContractResponse creates a new list of ReadContractResponse.
func NewReadContractResponse_List(s *capnp.Segment, sz int32) (ReadContractResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return ReadContractResponse_List{l}, err
}

func (s ReadContractResponse_List) At(i int) ReadContractResponse {
	return ReadContractResponse{s.List.Struct(i)}
}

func (s ReadContractResponse_List) Set(i int, v ReadContractResponse) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ReadContractResponse_List) String() string {
	str, _ := text.MarshalList(0xe40f9f0120d573b7, s.List)
	return str
}

// ReadContractResponse_Future is a wrapper for a ReadContractResponse promised by a client call.
type ReadContractResponse_Future struct{ *capnp.Future }

func (p ReadContractResponse_Future) Struct() (ReadContractResponse, error) {
	s, err := p.Future.Struct()
	return ReadContractResponse{s}, err
}

type GetAccountNonceResponse struct{ capnp.Struct }

// GetAccountNonceResponse_TypeID is the unique identifier for the type GetAccountNonceResponse.
const GetAccountNonceResponse_TypeID = 0xcaea6964e2c74e71

func NewGetAccountNonceResponse(s *capnp.Segment) (GetAccountNonceResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GetAccountNonceResponse{st}, err
}

func NewRootGetAccountNonceResponse(s *capnp.Segment) (GetAccountNonceResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return GetAccountNonceResponse{st}, err
}

func ReadRootGetAccountNonceResponse(msg *capnp.Message) (GetAccountNonceResponse, error) {
	root, err := msg.Root()
	return GetAccountNonceResponse{root.Struct()}, err
}

func (s GetAccountNonceResponse) String() string {
	str, _ := text.Marshal(0xcaea6964e2c74e71, s.Struct)
	return str
}

func (s GetAccountNonceResponse) Noncee() uint64 {
	return s.Struct.Uint64(0)
}

func (s GetAccountNonceResponse) SetNoncee(v uint64) {
	s.Struct.SetUint64(0, v)
}

// GetAccountNonceResponse_List is a list of GetAccountNonceResponse.
type GetAccountNonceResponse_List struct{ capnp.List }

// NewGetAccountNonceResponse creates a new list of GetAccountNonceResponse.
func NewGetAccountNonceResponse_List(s *capnp.Segment, sz int32) (GetAccountNonceResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return GetAccountNonceResponse_List{l}, err
}

func (s GetAccountNonceResponse_List) At(i int) GetAccountNonceResponse {
	return GetAccountNonceResponse{s.List.Struct(i)}
}

func (s GetAccountNonceResponse_List) Set(i int, v GetAccountNonceResponse) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s GetAccountNonceResponse_List) String() string {
	str, _ := text.MarshalList(0xcaea6964e2c74e71, s.List)
	return str
}

// GetAccountNonceResponse_Future is a wrapper for a GetAccountNonceResponse promised by a client call.
type GetAccountNonceResponse_Future struct{ *capnp.Future }

func (p GetAccountNonceResponse_Future) Struct() (GetAccountNonceResponse, error) {
	s, err := p.Future.Struct()
	return GetAccountNonceResponse{s}, err
}

type ChainRPCResponse struct{ capnp.Struct }
type ChainRPCResponse_Which uint16

const (
	ChainRPCResponse_Which_chainReserved     ChainRPCResponse_Which = 0
	ChainRPCResponse_Which_chainError        ChainRPCResponse_Which = 1
	ChainRPCResponse_Which_submitBlock       ChainRPCResponse_Which = 2
	ChainRPCResponse_Which_submitTransaction ChainRPCResponse_Which = 3
	ChainRPCResponse_Which_getHeadInfo       ChainRPCResponse_Which = 4
	ChainRPCResponse_Which_getChainID        ChainRPCResponse_Which = 5
	ChainRPCResponse_Which_getForkHeads      ChainRPCResponse_Which = 6
	ChainRPCResponse_Which_readContract      ChainRPCResponse_Which = 7
	ChainRPCResponse_Which_getAccountNonce   ChainRPCResponse_Which = 8
)

func (w ChainRPCResponse_Which) String() string {
	const s = "chainReservedchainErrorsubmitBlocksubmitTransactiongetHeadInfogetChainIDgetForkHeadsreadContractgetAccountNonce"
	switch w {
	case ChainRPCResponse_Which_chainReserved:
		return s[0:13]
	case ChainRPCResponse_Which_chainError:
		return s[13:23]
	case ChainRPCResponse_Which_submitBlock:
		return s[23:34]
	case ChainRPCResponse_Which_submitTransaction:
		return s[34:51]
	case ChainRPCResponse_Which_getHeadInfo:
		return s[51:62]
	case ChainRPCResponse_Which_getChainID:
		return s[62:72]
	case ChainRPCResponse_Which_getForkHeads:
		return s[72:84]
	case ChainRPCResponse_Which_readContract:
		return s[84:96]
	case ChainRPCResponse_Which_getAccountNonce:
		return s[96:111]

	}
	return "ChainRPCResponse_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// ChainRPCResponse_TypeID is the unique identifier for the type ChainRPCResponse.
const ChainRPCResponse_TypeID = 0xc94652f8a3ae286e

func NewChainRPCResponse(s *capnp.Segment) (ChainRPCResponse, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ChainRPCResponse{st}, err
}

func NewRootChainRPCResponse(s *capnp.Segment) (ChainRPCResponse, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ChainRPCResponse{st}, err
}

func ReadRootChainRPCResponse(msg *capnp.Message) (ChainRPCResponse, error) {
	root, err := msg.Root()
	return ChainRPCResponse{root.Struct()}, err
}

func (s ChainRPCResponse) String() string {
	str, _ := text.Marshal(0xc94652f8a3ae286e, s.Struct)
	return str
}

func (s ChainRPCResponse) Which() ChainRPCResponse_Which {
	return ChainRPCResponse_Which(s.Struct.Uint16(0))
}
func (s ChainRPCResponse) ChainReserved() (ChainReservedResponse, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != chainReserved")
	}
	p, err := s.Struct.Ptr(0)
	return ChainReservedResponse{Struct: p.Struct()}, err
}

func (s ChainRPCResponse) HasChainReserved() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCResponse) SetChainReserved(v ChainReservedResponse) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewChainReserved sets the chainReserved field to a newly
// allocated ChainReservedResponse struct, preferring placement in s's segment.
func (s ChainRPCResponse) NewChainReserved() (ChainReservedResponse, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewChainReservedResponse(s.Struct.Segment())
	if err != nil {
		return ChainReservedResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChainRPCResponse) ChainError() (rpc.ErrorResponse, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != chainError")
	}
	p, err := s.Struct.Ptr(0)
	return rpc.ErrorResponse{Struct: p.Struct()}, err
}

func (s ChainRPCResponse) HasChainError() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCResponse) SetChainError(v rpc.ErrorResponse) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewChainError sets the chainError field to a newly
// allocated rpc.ErrorResponse struct, preferring placement in s's segment.
func (s ChainRPCResponse) NewChainError() (rpc.ErrorResponse, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := rpc.NewErrorResponse(s.Struct.Segment())
	if err != nil {
		return rpc.ErrorResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChainRPCResponse) SubmitBlock() (SubmitBlockResponse, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != submitBlock")
	}
	p, err := s.Struct.Ptr(0)
	return SubmitBlockResponse{Struct: p.Struct()}, err
}

func (s ChainRPCResponse) HasSubmitBlock() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCResponse) SetSubmitBlock(v SubmitBlockResponse) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubmitBlock sets the submitBlock field to a newly
// allocated SubmitBlockResponse struct, preferring placement in s's segment.
func (s ChainRPCResponse) NewSubmitBlock() (SubmitBlockResponse, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewSubmitBlockResponse(s.Struct.Segment())
	if err != nil {
		return SubmitBlockResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChainRPCResponse) SubmitTransaction() (SubmitTransactionResponse, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != submitTransaction")
	}
	p, err := s.Struct.Ptr(0)
	return SubmitTransactionResponse{Struct: p.Struct()}, err
}

func (s ChainRPCResponse) HasSubmitTransaction() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCResponse) SetSubmitTransaction(v SubmitTransactionResponse) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubmitTransaction sets the submitTransaction field to a newly
// allocated SubmitTransactionResponse struct, preferring placement in s's segment.
func (s ChainRPCResponse) NewSubmitTransaction() (SubmitTransactionResponse, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewSubmitTransactionResponse(s.Struct.Segment())
	if err != nil {
		return SubmitTransactionResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChainRPCResponse) GetHeadInfo() (GetHeadInfoResponse, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != getHeadInfo")
	}
	p, err := s.Struct.Ptr(0)
	return GetHeadInfoResponse{Struct: p.Struct()}, err
}

func (s ChainRPCResponse) HasGetHeadInfo() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCResponse) SetGetHeadInfo(v GetHeadInfoResponse) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGetHeadInfo sets the getHeadInfo field to a newly
// allocated GetHeadInfoResponse struct, preferring placement in s's segment.
func (s ChainRPCResponse) NewGetHeadInfo() (GetHeadInfoResponse, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewGetHeadInfoResponse(s.Struct.Segment())
	if err != nil {
		return GetHeadInfoResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChainRPCResponse) GetChainID() (GetChainIDResponse, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != getChainID")
	}
	p, err := s.Struct.Ptr(0)
	return GetChainIDResponse{Struct: p.Struct()}, err
}

func (s ChainRPCResponse) HasGetChainID() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCResponse) SetGetChainID(v GetChainIDResponse) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGetChainID sets the getChainID field to a newly
// allocated GetChainIDResponse struct, preferring placement in s's segment.
func (s ChainRPCResponse) NewGetChainID() (GetChainIDResponse, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewGetChainIDResponse(s.Struct.Segment())
	if err != nil {
		return GetChainIDResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChainRPCResponse) GetForkHeads() (GetForkHeadsResponse, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != getForkHeads")
	}
	p, err := s.Struct.Ptr(0)
	return GetForkHeadsResponse{Struct: p.Struct()}, err
}

func (s ChainRPCResponse) HasGetForkHeads() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCResponse) SetGetForkHeads(v GetForkHeadsResponse) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGetForkHeads sets the getForkHeads field to a newly
// allocated GetForkHeadsResponse struct, preferring placement in s's segment.
func (s ChainRPCResponse) NewGetForkHeads() (GetForkHeadsResponse, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewGetForkHeadsResponse(s.Struct.Segment())
	if err != nil {
		return GetForkHeadsResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChainRPCResponse) ReadContract() (ReadContractResponse, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != readContract")
	}
	p, err := s.Struct.Ptr(0)
	return ReadContractResponse{Struct: p.Struct()}, err
}

func (s ChainRPCResponse) HasReadContract() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCResponse) SetReadContract(v ReadContractResponse) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewReadContract sets the readContract field to a newly
// allocated ReadContractResponse struct, preferring placement in s's segment.
func (s ChainRPCResponse) NewReadContract() (ReadContractResponse, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewReadContractResponse(s.Struct.Segment())
	if err != nil {
		return ReadContractResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ChainRPCResponse) GetAccountNonce() (GetAccountNonceResponse, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != getAccountNonce")
	}
	p, err := s.Struct.Ptr(0)
	return GetAccountNonceResponse{Struct: p.Struct()}, err
}

func (s ChainRPCResponse) HasGetAccountNonce() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s ChainRPCResponse) SetGetAccountNonce(v GetAccountNonceResponse) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGetAccountNonce sets the getAccountNonce field to a newly
// allocated GetAccountNonceResponse struct, preferring placement in s's segment.
func (s ChainRPCResponse) NewGetAccountNonce() (GetAccountNonceResponse, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewGetAccountNonceResponse(s.Struct.Segment())
	if err != nil {
		return GetAccountNonceResponse{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// ChainRPCResponse_List is a list of ChainRPCResponse.
type ChainRPCResponse_List struct{ capnp.List }

// NewChainRPCResponse creates a new list of ChainRPCResponse.
func NewChainRPCResponse_List(s *capnp.Segment, sz int32) (ChainRPCResponse_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ChainRPCResponse_List{l}, err
}

func (s ChainRPCResponse_List) At(i int) ChainRPCResponse { return ChainRPCResponse{s.List.Struct(i)} }

func (s ChainRPCResponse_List) Set(i int, v ChainRPCResponse) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ChainRPCResponse_List) String() string {
	str, _ := text.MarshalList(0xc94652f8a3ae286e, s.List)
	return str
}

// ChainRPCResponse_Future is a wrapper for a ChainRPCResponse promised by a client call.
type ChainRPCResponse_Future struct{ *capnp.Future }

func (p ChainRPCResponse_Future) Struct() (ChainRPCResponse, error) {
	s, err := p.Future.Struct()
	return ChainRPCResponse{s}, err
}

func (p ChainRPCResponse_Future) ChainReserved() ChainReservedResponse_Future {
	return ChainReservedResponse_Future{Future: p.Future.Field(0, nil)}
}

func (p ChainRPCResponse_Future) ChainError() rpc.ErrorResponse_Future {
	return rpc.ErrorResponse_Future{Future: p.Future.Field(0, nil)}
}

func (p ChainRPCResponse_Future) SubmitBlock() SubmitBlockResponse_Future {
	return SubmitBlockResponse_Future{Future: p.Future.Field(0, nil)}
}

func (p ChainRPCResponse_Future) SubmitTransaction() SubmitTransactionResponse_Future {
	return SubmitTransactionResponse_Future{Future: p.Future.Field(0, nil)}
}

func (p ChainRPCResponse_Future) GetHeadInfo() GetHeadInfoResponse_Future {
	return GetHeadInfoResponse_Future{Future: p.Future.Field(0, nil)}
}

func (p ChainRPCResponse_Future) GetChainID() GetChainIDResponse_Future {
	return GetChainIDResponse_Future{Future: p.Future.Field(0, nil)}
}

func (p ChainRPCResponse_Future) GetForkHeads() GetForkHeadsResponse_Future {
	return GetForkHeadsResponse_Future{Future: p.Future.Field(0, nil)}
}

func (p ChainRPCResponse_Future) ReadContract() ReadContractResponse_Future {
	return ReadContractResponse_Future{Future: p.Future.Field(0, nil)}
}

func (p ChainRPCResponse_Future) GetAccountNonce() GetAccountNonceResponse_Future {
	return GetAccountNonceResponse_Future{Future: p.Future.Field(0, nil)}
}

const schema_d818356d88b26728 = "x\xda\xacV\x7fl\x1bg\x19~\x9f\xfb\xec\xda\x8e|" +
	"\xf5\x9d\xce\x95\xda\x02r\x83Z\xad\x9d&\xba.-R" +
	"# k\x9an\x0b\xd0\xe1\xcf\x0e\x13D\x9b\xe0\xec\\" +
	"\x12\xa7\xde\x9dsw\x0e\xf3\xa6\xaa\xa8*\x88\x1f\x1a\x1b" +
	"\x85\x7f\xa8T\xf1cCB\xa02:V\xb1\x7f@\xac" +
	"\x15\x84\x01\xd3\x98`\xa2C\x03\xd4Q\x18\xaa(\x1bh" +
	"h\x05\xd6}\xe8;\xdbwvvN3\xb4\xbf,\xf9" +
	"}\xee{\x7f>\xcf\xfb\xde\xb89y\xb3\xb2+\xf9\x80" +
	"N\xc4\x7f\x99\\'\x0e?]\xf9\x02\xcb\xfd\xe88\xf1" +
	"\xcd\x80\xd8>\xf7\xe8g\xee\xde\xb3\xf1<%\x91\"\x1a" +
	"9\x95^\x80\xf1D:Ed\xfc0\xfd\"A|\xfe" +
	"\xa9\xcc\xb7~zn\xfd\xd7H\xdf\xdc\x03N\x04\xd8\x8c" +
	"\x0b\xe3\x89L\x8a\x98\xa8?|\xfa\x81\x07\xff\xf9\x8b\xaf" +
	"\xf7\xa3\xdaO\x9e\xcc,\xc08\x9d\x91O\x9e\xca\x8c\x11" +
	"D\xeb\xfb\xcf\x0e\xcf\xbf(V\x82\x15\x09\xbe\x9c\xb9\x17" +
	"\x06\x86$\xf8j\xe6\x13\x04\xf1\xfa\xa7\x9f9\xf6\xe5\x13" +
	"[\xbf\x19\xe3\xbf9\xf4\x0d\x18\xf7\x0f\xa5\x88\xfd\xf1K" +
	"g/\x14^\xfa\xd9\xf7\xfa3:\x80T\x9ah\xa46" +
	"T\x82qX>9\xd2\x1aZ\x06A<vi\xfa\xfd" +
	"\xc7\xfe\xf1\x87\xc7c+`fO\xc0hee\x04\xcd" +
	"\xec#\x041\xf3\xd4\xaf\xd5\xe1\xfbN\xff8&\x82m" +
	"j\x05\xc6^UV\xe0\x8e\xb3\xe6\x96?Md\xce\xc5" +
	"\xa06\xa8Ga\xec\x08P\xa7\xeey\xf7\xc9uw<" +
	"\xb6\xbc\xd2s\x90{RualR\xa5\xe7\x0d\xaa\xf4" +
	"lo\xff\xeeCWJ\xb7<Io\xc8+C4r" +
	"F\x9d\x86\xf1\xa4\x84\x8f\xfcD\x152\xaf\xc5\xdb\x97_" +
	"\x98\xa9]\xfa\xf9\x0a|\x10\xc4\xe5\xdcq\x18IM>" +
	"\x0eMva\xf6\xa1\xd1\xbb~\xf3\xc8+O\xc7\x04<" +
	"\xac\xdd\x0bc\x8f&\x03n\xd4\x97\xdf\xbb\xa7\xf6\xa1\xe7" +
	"bP\xba\xb6\x00c[\x80:3\xf1\xc5}\xea\xdb\xbe" +
	"\xf3\xfb\xd8\x82Bsal\x08<\xeb\x9al\xe9\x0f\xbc" +
	"g\xb7\xe0\xab\xb9\x8bq\xfdoI\xd7\xf7\x07\xe0\xcf\x06" +
	"\xe0\x8d\xd7\x1d\xb9g\xe4\xfa\xd2_\xe3&+\xa9\x7f\x0e" +
	"\xc6;t\x09\xde\xa4\xcb\x9c^\xfd\xca;'\x0fm\xab" +
	"\xfc=&\xda\xbd\xba\x0b\xe3\xa0\x9e\"A\xb6p\x1b\xd5" +
	"\x9d\xd5y\xb3\x96\xb0\x83\x1f\xfbcn\xa3\xfa\xae\xaa\xd9" +
	"\xb0\x1b\xa3\xe5f\xe5\xee\x9a?^w\xaa\x87J\xd6b" +
	"\xaeiy~\x11\xe0\x1aK\x10%@\xa4\x9b7\x11\xf1" +
	";\x19\xf8\xbc\x02 \x0f\xf9\x9fu\x82\x88\xcf3p_" +
	"\x81\xae \x0f\x85H_\xfc6\x11\xf7\x19\xf8'\x15\xe8" +
	"L\xc9\x83\x11\xe9\x87\x7fG\xc4\x8f1\xf0\x07\x15\x14*" +
	"\xd2\x0b4qr\xaet\xf6\xdcM\x8f_!\x024\x82" +
	"X\xb2\xdc\xdal\xabh\xc2\xf3jK\xd6\x84\xe93\xd3" +
	"\x02H\x01B\xe3x\x1dN\xf5P\xb96g\x9b9\xbf" +
	"\xe9\xae4O\xb9\x8ai{f\xd5\xaf9v\x00\xf2\x9b" +
	"\xac\x07\xb4J\xfe\xb7Z\xfe-\x8e{\xe86\xcb\x9c\xf1" +
	"JVa\xb1S\x80k|\xb2_\xfe59Q\xb2\xbc" +
	"F\xce\xb1=K\x96,\x11\x96L\x1d\xd7\xd5\x02\xdf\xce" +
	"\xc0w+8Rmcy\x02\x8a8\xb3\xfc\xe7\xa1\x9d" +
	"/\x98/\x13O(\xd8\x97\x051\xa8\xa4@}31" +
	"\x8ey\x8d\xae\xcbt\xe8rG\x89(\xf08\xa1@\xef" +
	"\xb6i\xdf\xa3D|\x82\x81\x17\x15\x88\xd9\xce\x0b\x04\x0f" +
	"\xeb\x09E\x06h\xa2q\xc3\xd2\xa7\x86_Z\x16\xb2\x13" +
	"\xeb\x09\xa2nz\xfe\xa4\xebZX\xb2\\\xafV\xa9[" +
	"\x85\xf1N\xcfz\x91ZO\xb8\xc9A#5\xe5\x86\x1d" +
	"\x91erR\xed\x98W\xcb3\xa8j\xa9\xb8\xbfd\xc9" +
	"6 \x18\xc4-,\x91\x15\"\xc8\xf1\x19\x97\x88\xff\x8a" +
	"\x81?\xaf@\xc5\xeb\xa2\x9d\xe4s\x15\"~\x9e\x81_" +
	"T\xa0*WE{\x18/\x1c'\xe2\x17\x19\xf8\xcb\x0a" +
	"T\xf6\x9ahO\xe3e\x89\xfd\x1b\x03\xbf\xa2@M\xfc" +
	"W\xe4\x91 \xd2\xff5M\xc4_a(A\x81\x9a\xfc" +
	"\x8f\xc8#I\xa4_] \xe2\xaf1\x94\xd3\xf2\xefu" +
	"\xff\x16y\xac#2\x92X *'\xc0P\xd6\xa4!" +
	"uE\xe4%9\x0d\x15G\x89\xcaYi\xd8\x08\x05\"" +
	"H\xaedyT\xb0\xdc%k\x06Z\xa4@\x9d\x12z" +
	"\x1d\xeaQ\xaa]\xe2pQ\xf5\xd9\xa7\\t\x0b\x09\x1b" +
	"Z$\xe6\x1d\xd4\x9c\xe5\xcb\xb6NR\xca\x9eud\xa3" +
	"\xba\x0a\x16\xd9\x83\xba\x12\x9b\x9c\x80\x16\xa9{d\x0ef" +
	"\x8brr\xba\xa0E\x0b\xb0\xdbh\xcb\x9c\xd9\xef\xd8>" +
	"\xe5\\\xb3\xeaC\x8b4=za_\xb5\xea4a\xfb" +
	"\xb7;v\xd5\"h\x91\x8a\xfd_\xd3\xb2\xd8\xb4X[" +
	"\x86\xb2\xe1\x80\x1f\xa8D\xb3\xdc\x9d\xef\x83\xb2\xc9E\x06" +
	"~g\x8f\x0c}T*\xce\xc7\x19x]\x81\xf0;\xcf" +
	"R\xaa\xe6\xc8\xe2\xddu\xdd}{\x8f^Zxx\xa0" +
	"\xf2\xc0|+\x95%\x94\x89\xc5fj\x85\xae$\x07\x8d" +
	"\xbf\xe5\x05\xf3\x12p\xc6\xf6,\xba\x06gJ\x9d\xf6\xc8" +
	"\xe6\xf4\xe8Wo\xe5\xa6c*'\xff\xfb \x03\xffH" +
	"O\xe5>|}TNQ\xed\xbc\x19\x8cMW\xa3," +
	"\xdbw[E\xa7F\xcc\xf6\x91&\x05iB\xcet\xe7" +
	"\xbc\xb5\xa8X\xc4n\x99\x19k+\xd8\xd6\x88\xde\x97\xdd" +
	"\x1er\x86\xf4\xee#gH\xef\xab\x95^rv\xf9m" +
	"$q\x9c\xa8\x9c\x96\x1c\xcc\xa3\x87\xe2\x86\x8e\x0aQY" +
	"\x93\x86\xb7\xf7\xb2\xdc\xd8\x84i\xa2\xf2Fi\xd8\xda\xc7" +
	"\xf3\xe1\x80\xe7[\xa4\xe1\x86>\x9e\xef\x08\x0c\xdb\xa5a" +
	"\xb74\xa4_\x15y\xa4\x89\x8c]\x81\x00\xdc(\x0d\xef" +
	"\x89\x17\x80\xf0f\xeaL_\x808\xe0\xba\xc4\x1c\x17\x9a" +
	"\x18\x7f~g\xf1\xc2\xe8\xd9\xbf\x0c\xd2\x87p\xdb\xaf\xaa" +
	"\x0f\xe1\x019@\x1f\xc2\xdb%^\x1f\xc2\xcbv\x90>" +
	"\x84\xd7\xec }\x08\xcf\x9dU\xf4!\xbc\xdc\xae\xad\x0f" +
	"\xb7v>\xef|\xdd\xe1\x05V\xae\xdcQ\"\x9ef\xe0" +
	"y\x05c\xb6\x04Z\xc8\x90\x82\xccZf\xb2K\xb91" +
	"k\x8d\xeb?(\xa8=\xeb\xf4\\Lk\xfe\xc2+\xc4" +
	"\xad\xef\x85\xce\xfa\xde\x1dqt\x97\xdc\xde\xbb\x19\xf8\xcd" +
	"\x0a\xc4\xbce\xceL9\x0d\x87rug\xae\x15\xb3\x8f" +
	"\x07m\xee5\x14\xa1_B\xe2\xcf\x8bQ}G\xa1+" +
	"\"\xe1}qP\x0a\xc6m\x0c|J\xc1\x98ky\xcd" +
	"\xba\x1f\\9\x1fx\xdf\xb6\xa1\x03\xad\xf3\xbf}\xe3\x95" +
	"#\xa3\xf7\x90%\x05\xd97\xd9\xf5\xa03D+\x0f\xad" +
	"\xa8\xebG\xcc6~-R\xd4w\xf4F\x0d\xf9_\x00" +
	"\x00\x00\xff\xff\xd1\x9f\x0dT"

func init() {
	schemas.Register(schema_d818356d88b26728,
		0x92be0f038e62cf7d,
		0xa00ec3c6a809cd8b,
		0xa1cbf2908fb1a46c,
		0xa1ffe76821d5b379,
		0xa5249a9484d186fe,
		0xb0c800ef1fe1c293,
		0xb8def1844a5aeab4,
		0xc0b17b210dd3cd64,
		0xc30944e32061c256,
		0xc7b456069d3678ad,
		0xc94652f8a3ae286e,
		0xcaea6964e2c74e71,
		0xcff4afd45d3aa366,
		0xd94f69353dc76c70,
		0xddab1b0d419144b5,
		0xe40f9f0120d573b7,
		0xe8522a33787f2718,
		0xee62256b492299f7)
}
