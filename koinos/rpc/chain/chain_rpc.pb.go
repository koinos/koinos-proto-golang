// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.17.3
// source: koinos/rpc/chain/chain_rpc.proto

package chain

import (
	koinos "github.com/koinos/koinos-proto-golang/koinos"
	chain "github.com/koinos/koinos-proto-golang/koinos/chain"
	protocol "github.com/koinos/koinos-proto-golang/koinos/protocol"
	rpc "github.com/koinos/koinos-proto-golang/koinos/rpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubmitBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *protocol.Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *SubmitBlockRequest) Reset() {
	*x = SubmitBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBlockRequest) ProtoMessage() {}

func (x *SubmitBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBlockRequest.ProtoReflect.Descriptor instead.
func (*SubmitBlockRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *SubmitBlockRequest) GetBlock() *protocol.Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type SubmitBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receipt *protocol.BlockReceipt `protobuf:"bytes,1,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (x *SubmitBlockResponse) Reset() {
	*x = SubmitBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitBlockResponse) ProtoMessage() {}

func (x *SubmitBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitBlockResponse.ProtoReflect.Descriptor instead.
func (*SubmitBlockResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *SubmitBlockResponse) GetReceipt() *protocol.BlockReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

type SubmitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *protocol.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Broadcast   bool                  `protobuf:"varint,2,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
}

func (x *SubmitTransactionRequest) Reset() {
	*x = SubmitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionRequest) ProtoMessage() {}

func (x *SubmitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionRequest.ProtoReflect.Descriptor instead.
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *SubmitTransactionRequest) GetTransaction() *protocol.Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SubmitTransactionRequest) GetBroadcast() bool {
	if x != nil {
		return x.Broadcast
	}
	return false
}

type SubmitTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receipt *protocol.TransactionReceipt `protobuf:"bytes,1,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (x *SubmitTransactionResponse) Reset() {
	*x = SubmitTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionResponse) ProtoMessage() {}

func (x *SubmitTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionResponse.ProtoReflect.Descriptor instead.
func (*SubmitTransactionResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitTransactionResponse) GetReceipt() *protocol.TransactionReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

type GetHeadInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetHeadInfoRequest) Reset() {
	*x = GetHeadInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeadInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeadInfoRequest) ProtoMessage() {}

func (x *GetHeadInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeadInfoRequest.ProtoReflect.Descriptor instead.
func (*GetHeadInfoRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{4}
}

type GetHeadInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeadTopology          *koinos.BlockTopology `protobuf:"bytes,1,opt,name=head_topology,json=headTopology,proto3" json:"head_topology,omitempty"`
	LastIrreversibleBlock uint64                `protobuf:"varint,2,opt,name=last_irreversible_block,json=lastIrreversibleBlock,proto3" json:"last_irreversible_block,omitempty"`
	HeadStateMerkleRoot   []byte                `protobuf:"bytes,3,opt,name=head_state_merkle_root,json=headStateMerkleRoot,proto3" json:"head_state_merkle_root,omitempty"`
	HeadBlockTime         uint64                `protobuf:"varint,4,opt,name=head_block_time,json=headBlockTime,proto3" json:"head_block_time,omitempty"`
}

func (x *GetHeadInfoResponse) Reset() {
	*x = GetHeadInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHeadInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHeadInfoResponse) ProtoMessage() {}

func (x *GetHeadInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHeadInfoResponse.ProtoReflect.Descriptor instead.
func (*GetHeadInfoResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *GetHeadInfoResponse) GetHeadTopology() *koinos.BlockTopology {
	if x != nil {
		return x.HeadTopology
	}
	return nil
}

func (x *GetHeadInfoResponse) GetLastIrreversibleBlock() uint64 {
	if x != nil {
		return x.LastIrreversibleBlock
	}
	return 0
}

func (x *GetHeadInfoResponse) GetHeadStateMerkleRoot() []byte {
	if x != nil {
		return x.HeadStateMerkleRoot
	}
	return nil
}

func (x *GetHeadInfoResponse) GetHeadBlockTime() uint64 {
	if x != nil {
		return x.HeadBlockTime
	}
	return 0
}

type GetChainIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetChainIdRequest) Reset() {
	*x = GetChainIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChainIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChainIdRequest) ProtoMessage() {}

func (x *GetChainIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChainIdRequest.ProtoReflect.Descriptor instead.
func (*GetChainIdRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{6}
}

type GetChainIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId []byte `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *GetChainIdResponse) Reset() {
	*x = GetChainIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChainIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChainIdResponse) ProtoMessage() {}

func (x *GetChainIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChainIdResponse.ProtoReflect.Descriptor instead.
func (*GetChainIdResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *GetChainIdResponse) GetChainId() []byte {
	if x != nil {
		return x.ChainId
	}
	return nil
}

type GetForkHeadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetForkHeadsRequest) Reset() {
	*x = GetForkHeadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForkHeadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForkHeadsRequest) ProtoMessage() {}

func (x *GetForkHeadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForkHeadsRequest.ProtoReflect.Descriptor instead.
func (*GetForkHeadsRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{8}
}

type GetForkHeadsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastIrreversibleBlock *koinos.BlockTopology   `protobuf:"bytes,1,opt,name=last_irreversible_block,json=lastIrreversibleBlock,proto3" json:"last_irreversible_block,omitempty"`
	ForkHeads             []*koinos.BlockTopology `protobuf:"bytes,2,rep,name=fork_heads,json=forkHeads,proto3" json:"fork_heads,omitempty"`
}

func (x *GetForkHeadsResponse) Reset() {
	*x = GetForkHeadsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetForkHeadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForkHeadsResponse) ProtoMessage() {}

func (x *GetForkHeadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForkHeadsResponse.ProtoReflect.Descriptor instead.
func (*GetForkHeadsResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *GetForkHeadsResponse) GetLastIrreversibleBlock() *koinos.BlockTopology {
	if x != nil {
		return x.LastIrreversibleBlock
	}
	return nil
}

func (x *GetForkHeadsResponse) GetForkHeads() []*koinos.BlockTopology {
	if x != nil {
		return x.ForkHeads
	}
	return nil
}

type ReadContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId []byte `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	EntryPoint uint32 `protobuf:"varint,2,opt,name=entry_point,json=entryPoint,proto3" json:"entry_point,omitempty"`
	Args       []byte `protobuf:"bytes,3,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *ReadContractRequest) Reset() {
	*x = ReadContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadContractRequest) ProtoMessage() {}

func (x *ReadContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadContractRequest.ProtoReflect.Descriptor instead.
func (*ReadContractRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *ReadContractRequest) GetContractId() []byte {
	if x != nil {
		return x.ContractId
	}
	return nil
}

func (x *ReadContractRequest) GetEntryPoint() uint32 {
	if x != nil {
		return x.EntryPoint
	}
	return 0
}

func (x *ReadContractRequest) GetArgs() []byte {
	if x != nil {
		return x.Args
	}
	return nil
}

type ReadContractResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []byte   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Logs   []string `protobuf:"bytes,2,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *ReadContractResponse) Reset() {
	*x = ReadContractResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadContractResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadContractResponse) ProtoMessage() {}

func (x *ReadContractResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadContractResponse.ProtoReflect.Descriptor instead.
func (*ReadContractResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *ReadContractResponse) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ReadContractResponse) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

type GetAccountNonceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account []byte `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *GetAccountNonceRequest) Reset() {
	*x = GetAccountNonceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountNonceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountNonceRequest) ProtoMessage() {}

func (x *GetAccountNonceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountNonceRequest.ProtoReflect.Descriptor instead.
func (*GetAccountNonceRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *GetAccountNonceRequest) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

type GetAccountNonceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *GetAccountNonceResponse) Reset() {
	*x = GetAccountNonceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountNonceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountNonceResponse) ProtoMessage() {}

func (x *GetAccountNonceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountNonceResponse.ProtoReflect.Descriptor instead.
func (*GetAccountNonceResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *GetAccountNonceResponse) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type GetAccountRcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account []byte `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *GetAccountRcRequest) Reset() {
	*x = GetAccountRcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountRcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRcRequest) ProtoMessage() {}

func (x *GetAccountRcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRcRequest.ProtoReflect.Descriptor instead.
func (*GetAccountRcRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *GetAccountRcRequest) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

type GetAccountRcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rc uint64 `protobuf:"varint,1,opt,name=rc,proto3" json:"rc,omitempty"`
}

func (x *GetAccountRcResponse) Reset() {
	*x = GetAccountRcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountRcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRcResponse) ProtoMessage() {}

func (x *GetAccountRcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRcResponse.ProtoReflect.Descriptor instead.
func (*GetAccountRcResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *GetAccountRcResponse) GetRc() uint64 {
	if x != nil {
		return x.Rc
	}
	return 0
}

type GetResourceLimitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetResourceLimitsRequest) Reset() {
	*x = GetResourceLimitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceLimitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceLimitsRequest) ProtoMessage() {}

func (x *GetResourceLimitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceLimitsRequest.ProtoReflect.Descriptor instead.
func (*GetResourceLimitsRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{16}
}

type GetResourceLimitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceLimitData *chain.ResourceLimitData `protobuf:"bytes,1,opt,name=resource_limit_data,json=resourceLimitData,proto3" json:"resource_limit_data,omitempty"`
}

func (x *GetResourceLimitsResponse) Reset() {
	*x = GetResourceLimitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceLimitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceLimitsResponse) ProtoMessage() {}

func (x *GetResourceLimitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceLimitsResponse.ProtoReflect.Descriptor instead.
func (*GetResourceLimitsResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *GetResourceLimitsResponse) GetResourceLimitData() *chain.ResourceLimitData {
	if x != nil {
		return x.ResourceLimitData
	}
	return nil
}

type InvokeSystemCallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SystemCall:
	//	*InvokeSystemCallRequest_Id
	//	*InvokeSystemCallRequest_Name
	SystemCall isInvokeSystemCallRequest_SystemCall `protobuf_oneof:"system_call"`
	Args       []byte                               `protobuf:"bytes,3,opt,name=args,proto3" json:"args,omitempty"`
	CallerData *chain.CallerData                    `protobuf:"bytes,4,opt,name=caller_data,json=callerData,proto3,oneof" json:"caller_data,omitempty"`
}

func (x *InvokeSystemCallRequest) Reset() {
	*x = InvokeSystemCallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeSystemCallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeSystemCallRequest) ProtoMessage() {}

func (x *InvokeSystemCallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeSystemCallRequest.ProtoReflect.Descriptor instead.
func (*InvokeSystemCallRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{18}
}

func (m *InvokeSystemCallRequest) GetSystemCall() isInvokeSystemCallRequest_SystemCall {
	if m != nil {
		return m.SystemCall
	}
	return nil
}

func (x *InvokeSystemCallRequest) GetId() int64 {
	if x, ok := x.GetSystemCall().(*InvokeSystemCallRequest_Id); ok {
		return x.Id
	}
	return 0
}

func (x *InvokeSystemCallRequest) GetName() string {
	if x, ok := x.GetSystemCall().(*InvokeSystemCallRequest_Name); ok {
		return x.Name
	}
	return ""
}

func (x *InvokeSystemCallRequest) GetArgs() []byte {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *InvokeSystemCallRequest) GetCallerData() *chain.CallerData {
	if x != nil {
		return x.CallerData
	}
	return nil
}

type isInvokeSystemCallRequest_SystemCall interface {
	isInvokeSystemCallRequest_SystemCall()
}

type InvokeSystemCallRequest_Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id,proto3,oneof"`
}

type InvokeSystemCallRequest_Name struct {
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*InvokeSystemCallRequest_Id) isInvokeSystemCallRequest_SystemCall() {}

func (*InvokeSystemCallRequest_Name) isInvokeSystemCallRequest_SystemCall() {}

type InvokeSystemCallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *InvokeSystemCallResponse) Reset() {
	*x = InvokeSystemCallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvokeSystemCallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeSystemCallResponse) ProtoMessage() {}

func (x *InvokeSystemCallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeSystemCallResponse.ProtoReflect.Descriptor instead.
func (*InvokeSystemCallResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *InvokeSystemCallResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ProposeBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block *protocol.Block `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
}

func (x *ProposeBlockRequest) Reset() {
	*x = ProposeBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeBlockRequest) ProtoMessage() {}

func (x *ProposeBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeBlockRequest.ProtoReflect.Descriptor instead.
func (*ProposeBlockRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{20}
}

func (x *ProposeBlockRequest) GetBlock() *protocol.Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type ProposeBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receipt                  *protocol.BlockReceipt `protobuf:"bytes,1,opt,name=receipt,proto3,oneof" json:"receipt,omitempty"`
	FailedTransactionIndices []uint32               `protobuf:"varint,2,rep,packed,name=failed_transaction_indices,json=failedTransactionIndices,proto3" json:"failed_transaction_indices,omitempty"`
}

func (x *ProposeBlockResponse) Reset() {
	*x = ProposeBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposeBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposeBlockResponse) ProtoMessage() {}

func (x *ProposeBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposeBlockResponse.ProtoReflect.Descriptor instead.
func (*ProposeBlockResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *ProposeBlockResponse) GetReceipt() *protocol.BlockReceipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

func (x *ProposeBlockResponse) GetFailedTransactionIndices() []uint32 {
	if x != nil {
		return x.FailedTransactionIndices
	}
	return nil
}

type ChainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//	*ChainRequest_Reserved
	//	*ChainRequest_SubmitBlock
	//	*ChainRequest_SubmitTransaction
	//	*ChainRequest_GetHeadInfo
	//	*ChainRequest_GetChainId
	//	*ChainRequest_GetForkHeads
	//	*ChainRequest_ReadContract
	//	*ChainRequest_GetAccountNonce
	//	*ChainRequest_GetAccountRc
	//	*ChainRequest_GetResourceLimits
	//	*ChainRequest_InvokeSystemCall
	//	*ChainRequest_ProposeBlock
	Request isChainRequest_Request `protobuf_oneof:"request"`
}

func (x *ChainRequest) Reset() {
	*x = ChainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainRequest) ProtoMessage() {}

func (x *ChainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainRequest.ProtoReflect.Descriptor instead.
func (*ChainRequest) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{22}
}

func (m *ChainRequest) GetRequest() isChainRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *ChainRequest) GetReserved() *rpc.ReservedRpc {
	if x, ok := x.GetRequest().(*ChainRequest_Reserved); ok {
		return x.Reserved
	}
	return nil
}

func (x *ChainRequest) GetSubmitBlock() *SubmitBlockRequest {
	if x, ok := x.GetRequest().(*ChainRequest_SubmitBlock); ok {
		return x.SubmitBlock
	}
	return nil
}

func (x *ChainRequest) GetSubmitTransaction() *SubmitTransactionRequest {
	if x, ok := x.GetRequest().(*ChainRequest_SubmitTransaction); ok {
		return x.SubmitTransaction
	}
	return nil
}

func (x *ChainRequest) GetGetHeadInfo() *GetHeadInfoRequest {
	if x, ok := x.GetRequest().(*ChainRequest_GetHeadInfo); ok {
		return x.GetHeadInfo
	}
	return nil
}

func (x *ChainRequest) GetGetChainId() *GetChainIdRequest {
	if x, ok := x.GetRequest().(*ChainRequest_GetChainId); ok {
		return x.GetChainId
	}
	return nil
}

func (x *ChainRequest) GetGetForkHeads() *GetForkHeadsRequest {
	if x, ok := x.GetRequest().(*ChainRequest_GetForkHeads); ok {
		return x.GetForkHeads
	}
	return nil
}

func (x *ChainRequest) GetReadContract() *ReadContractRequest {
	if x, ok := x.GetRequest().(*ChainRequest_ReadContract); ok {
		return x.ReadContract
	}
	return nil
}

func (x *ChainRequest) GetGetAccountNonce() *GetAccountNonceRequest {
	if x, ok := x.GetRequest().(*ChainRequest_GetAccountNonce); ok {
		return x.GetAccountNonce
	}
	return nil
}

func (x *ChainRequest) GetGetAccountRc() *GetAccountRcRequest {
	if x, ok := x.GetRequest().(*ChainRequest_GetAccountRc); ok {
		return x.GetAccountRc
	}
	return nil
}

func (x *ChainRequest) GetGetResourceLimits() *GetResourceLimitsRequest {
	if x, ok := x.GetRequest().(*ChainRequest_GetResourceLimits); ok {
		return x.GetResourceLimits
	}
	return nil
}

func (x *ChainRequest) GetInvokeSystemCall() *InvokeSystemCallRequest {
	if x, ok := x.GetRequest().(*ChainRequest_InvokeSystemCall); ok {
		return x.InvokeSystemCall
	}
	return nil
}

func (x *ChainRequest) GetProposeBlock() *ProposeBlockRequest {
	if x, ok := x.GetRequest().(*ChainRequest_ProposeBlock); ok {
		return x.ProposeBlock
	}
	return nil
}

type isChainRequest_Request interface {
	isChainRequest_Request()
}

type ChainRequest_Reserved struct {
	Reserved *rpc.ReservedRpc `protobuf:"bytes,1,opt,name=reserved,proto3,oneof"`
}

type ChainRequest_SubmitBlock struct {
	SubmitBlock *SubmitBlockRequest `protobuf:"bytes,2,opt,name=submit_block,json=submitBlock,proto3,oneof"`
}

type ChainRequest_SubmitTransaction struct {
	SubmitTransaction *SubmitTransactionRequest `protobuf:"bytes,3,opt,name=submit_transaction,json=submitTransaction,proto3,oneof"`
}

type ChainRequest_GetHeadInfo struct {
	GetHeadInfo *GetHeadInfoRequest `protobuf:"bytes,4,opt,name=get_head_info,json=getHeadInfo,proto3,oneof"`
}

type ChainRequest_GetChainId struct {
	GetChainId *GetChainIdRequest `protobuf:"bytes,5,opt,name=get_chain_id,json=getChainId,proto3,oneof"`
}

type ChainRequest_GetForkHeads struct {
	GetForkHeads *GetForkHeadsRequest `protobuf:"bytes,6,opt,name=get_fork_heads,json=getForkHeads,proto3,oneof"`
}

type ChainRequest_ReadContract struct {
	ReadContract *ReadContractRequest `protobuf:"bytes,7,opt,name=read_contract,json=readContract,proto3,oneof"`
}

type ChainRequest_GetAccountNonce struct {
	GetAccountNonce *GetAccountNonceRequest `protobuf:"bytes,8,opt,name=get_account_nonce,json=getAccountNonce,proto3,oneof"`
}

type ChainRequest_GetAccountRc struct {
	GetAccountRc *GetAccountRcRequest `protobuf:"bytes,9,opt,name=get_account_rc,json=getAccountRc,proto3,oneof"`
}

type ChainRequest_GetResourceLimits struct {
	GetResourceLimits *GetResourceLimitsRequest `protobuf:"bytes,10,opt,name=get_resource_limits,json=getResourceLimits,proto3,oneof"`
}

type ChainRequest_InvokeSystemCall struct {
	InvokeSystemCall *InvokeSystemCallRequest `protobuf:"bytes,11,opt,name=invoke_system_call,json=invokeSystemCall,proto3,oneof"`
}

type ChainRequest_ProposeBlock struct {
	ProposeBlock *ProposeBlockRequest `protobuf:"bytes,12,opt,name=propose_block,json=proposeBlock,proto3,oneof"`
}

func (*ChainRequest_Reserved) isChainRequest_Request() {}

func (*ChainRequest_SubmitBlock) isChainRequest_Request() {}

func (*ChainRequest_SubmitTransaction) isChainRequest_Request() {}

func (*ChainRequest_GetHeadInfo) isChainRequest_Request() {}

func (*ChainRequest_GetChainId) isChainRequest_Request() {}

func (*ChainRequest_GetForkHeads) isChainRequest_Request() {}

func (*ChainRequest_ReadContract) isChainRequest_Request() {}

func (*ChainRequest_GetAccountNonce) isChainRequest_Request() {}

func (*ChainRequest_GetAccountRc) isChainRequest_Request() {}

func (*ChainRequest_GetResourceLimits) isChainRequest_Request() {}

func (*ChainRequest_InvokeSystemCall) isChainRequest_Request() {}

func (*ChainRequest_ProposeBlock) isChainRequest_Request() {}

type ChainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*ChainResponse_Reserved
	//	*ChainResponse_Error
	//	*ChainResponse_SubmitBlock
	//	*ChainResponse_SubmitTransaction
	//	*ChainResponse_GetHeadInfo
	//	*ChainResponse_GetChainId
	//	*ChainResponse_GetForkHeads
	//	*ChainResponse_ReadContract
	//	*ChainResponse_GetAccountNonce
	//	*ChainResponse_GetAccountRc
	//	*ChainResponse_GetResourceLimits
	//	*ChainResponse_InvokeSystemCall
	//	*ChainResponse_ProposeBlock
	Response isChainResponse_Response `protobuf_oneof:"response"`
}

func (x *ChainResponse) Reset() {
	*x = ChainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainResponse) ProtoMessage() {}

func (x *ChainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_rpc_chain_chain_rpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainResponse.ProtoReflect.Descriptor instead.
func (*ChainResponse) Descriptor() ([]byte, []int) {
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP(), []int{23}
}

func (m *ChainResponse) GetResponse() isChainResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ChainResponse) GetReserved() *rpc.ReservedRpc {
	if x, ok := x.GetResponse().(*ChainResponse_Reserved); ok {
		return x.Reserved
	}
	return nil
}

func (x *ChainResponse) GetError() *rpc.ErrorStatus {
	if x, ok := x.GetResponse().(*ChainResponse_Error); ok {
		return x.Error
	}
	return nil
}

func (x *ChainResponse) GetSubmitBlock() *SubmitBlockResponse {
	if x, ok := x.GetResponse().(*ChainResponse_SubmitBlock); ok {
		return x.SubmitBlock
	}
	return nil
}

func (x *ChainResponse) GetSubmitTransaction() *SubmitTransactionResponse {
	if x, ok := x.GetResponse().(*ChainResponse_SubmitTransaction); ok {
		return x.SubmitTransaction
	}
	return nil
}

func (x *ChainResponse) GetGetHeadInfo() *GetHeadInfoResponse {
	if x, ok := x.GetResponse().(*ChainResponse_GetHeadInfo); ok {
		return x.GetHeadInfo
	}
	return nil
}

func (x *ChainResponse) GetGetChainId() *GetChainIdResponse {
	if x, ok := x.GetResponse().(*ChainResponse_GetChainId); ok {
		return x.GetChainId
	}
	return nil
}

func (x *ChainResponse) GetGetForkHeads() *GetForkHeadsResponse {
	if x, ok := x.GetResponse().(*ChainResponse_GetForkHeads); ok {
		return x.GetForkHeads
	}
	return nil
}

func (x *ChainResponse) GetReadContract() *ReadContractResponse {
	if x, ok := x.GetResponse().(*ChainResponse_ReadContract); ok {
		return x.ReadContract
	}
	return nil
}

func (x *ChainResponse) GetGetAccountNonce() *GetAccountNonceResponse {
	if x, ok := x.GetResponse().(*ChainResponse_GetAccountNonce); ok {
		return x.GetAccountNonce
	}
	return nil
}

func (x *ChainResponse) GetGetAccountRc() *GetAccountRcResponse {
	if x, ok := x.GetResponse().(*ChainResponse_GetAccountRc); ok {
		return x.GetAccountRc
	}
	return nil
}

func (x *ChainResponse) GetGetResourceLimits() *GetResourceLimitsResponse {
	if x, ok := x.GetResponse().(*ChainResponse_GetResourceLimits); ok {
		return x.GetResourceLimits
	}
	return nil
}

func (x *ChainResponse) GetInvokeSystemCall() *InvokeSystemCallResponse {
	if x, ok := x.GetResponse().(*ChainResponse_InvokeSystemCall); ok {
		return x.InvokeSystemCall
	}
	return nil
}

func (x *ChainResponse) GetProposeBlock() *ProposeBlockResponse {
	if x, ok := x.GetResponse().(*ChainResponse_ProposeBlock); ok {
		return x.ProposeBlock
	}
	return nil
}

type isChainResponse_Response interface {
	isChainResponse_Response()
}

type ChainResponse_Reserved struct {
	Reserved *rpc.ReservedRpc `protobuf:"bytes,1,opt,name=reserved,proto3,oneof"`
}

type ChainResponse_Error struct {
	Error *rpc.ErrorStatus `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type ChainResponse_SubmitBlock struct {
	SubmitBlock *SubmitBlockResponse `protobuf:"bytes,3,opt,name=submit_block,json=submitBlock,proto3,oneof"`
}

type ChainResponse_SubmitTransaction struct {
	SubmitTransaction *SubmitTransactionResponse `protobuf:"bytes,4,opt,name=submit_transaction,json=submitTransaction,proto3,oneof"`
}

type ChainResponse_GetHeadInfo struct {
	GetHeadInfo *GetHeadInfoResponse `protobuf:"bytes,5,opt,name=get_head_info,json=getHeadInfo,proto3,oneof"`
}

type ChainResponse_GetChainId struct {
	GetChainId *GetChainIdResponse `protobuf:"bytes,6,opt,name=get_chain_id,json=getChainId,proto3,oneof"`
}

type ChainResponse_GetForkHeads struct {
	GetForkHeads *GetForkHeadsResponse `protobuf:"bytes,7,opt,name=get_fork_heads,json=getForkHeads,proto3,oneof"`
}

type ChainResponse_ReadContract struct {
	ReadContract *ReadContractResponse `protobuf:"bytes,8,opt,name=read_contract,json=readContract,proto3,oneof"`
}

type ChainResponse_GetAccountNonce struct {
	GetAccountNonce *GetAccountNonceResponse `protobuf:"bytes,9,opt,name=get_account_nonce,json=getAccountNonce,proto3,oneof"`
}

type ChainResponse_GetAccountRc struct {
	GetAccountRc *GetAccountRcResponse `protobuf:"bytes,10,opt,name=get_account_rc,json=getAccountRc,proto3,oneof"`
}

type ChainResponse_GetResourceLimits struct {
	GetResourceLimits *GetResourceLimitsResponse `protobuf:"bytes,11,opt,name=get_resource_limits,json=getResourceLimits,proto3,oneof"`
}

type ChainResponse_InvokeSystemCall struct {
	InvokeSystemCall *InvokeSystemCallResponse `protobuf:"bytes,12,opt,name=invoke_system_call,json=invokeSystemCall,proto3,oneof"`
}

type ChainResponse_ProposeBlock struct {
	ProposeBlock *ProposeBlockResponse `protobuf:"bytes,13,opt,name=propose_block,json=proposeBlock,proto3,oneof"`
}

func (*ChainResponse_Reserved) isChainResponse_Response() {}

func (*ChainResponse_Error) isChainResponse_Response() {}

func (*ChainResponse_SubmitBlock) isChainResponse_Response() {}

func (*ChainResponse_SubmitTransaction) isChainResponse_Response() {}

func (*ChainResponse_GetHeadInfo) isChainResponse_Response() {}

func (*ChainResponse_GetChainId) isChainResponse_Response() {}

func (*ChainResponse_GetForkHeads) isChainResponse_Response() {}

func (*ChainResponse_ReadContract) isChainResponse_Response() {}

func (*ChainResponse_GetAccountNonce) isChainResponse_Response() {}

func (*ChainResponse_GetAccountRc) isChainResponse_Response() {}

func (*ChainResponse_GetResourceLimits) isChainResponse_Response() {}

func (*ChainResponse_InvokeSystemCall) isChainResponse_Response() {}

func (*ChainResponse_ProposeBlock) isChainResponse_Response() {}

var File_koinos_rpc_chain_chain_rpc_proto protoreflect.FileDescriptor

var file_koinos_rpc_chain_chain_rpc_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x1a, 0x13, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6b, 0x6f, 0x69, 0x6e, 0x6f,
	0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x6b, 0x6f, 0x69, 0x6e, 0x6f,
	0x73, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x44, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x51, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0x7a, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x6f,
	0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x1b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf2, 0x01, 0x0a,
	0x16, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x5f,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x12, 0x3a, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x72, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x49,
	0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x33, 0x0a, 0x16, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d,
	0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x13, 0x68, 0x65, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x2a, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02,
	0x30, 0x01, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x16, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x15, 0x67, 0x65, 0x74,
	0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x18, 0x0a,
	0x16, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x17, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x72, 0x72, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x15, 0x6c, 0x61,
	0x73, 0x74, 0x49, 0x72, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73,
	0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52,
	0x09, 0x66, 0x6f, 0x72, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x73, 0x22, 0x73, 0x0a, 0x15, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22,
	0x44, 0x0a, 0x16, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x3b, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x32, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x38, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x2d, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x72, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x02, 0x72,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x02, 0x72, 0x63, 0x22,
	0x1d, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x71,
	0x0a, 0x1c, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6b, 0x6f,
	0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x11,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x22, 0xb8, 0x01, 0x0a, 0x1a, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0b,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x0a,
	0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x33, 0x0a, 0x1b,
	0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x45, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x6f, 0x69, 0x6e,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xa1, 0x01, 0x0a, 0x16, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x48, 0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x3c, 0x0a, 0x1a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x18, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22, 0xf7, 0x07, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x70, 0x63, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b,
	0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x5d, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x11, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x6f, 0x69, 0x6e,
	0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x4a, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a,
	0x0e, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x73, 0x12,
	0x4e, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12,
	0x59, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6b, 0x6f, 0x69,
	0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x67, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0e, 0x67, 0x65,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x63, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c,
	0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x63, 0x12, 0x5f, 0x0a, 0x13,
	0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6b, 0x6f, 0x69, 0x6e,
	0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x5c, 0x0a,
	0x12, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6b, 0x6f, 0x69, 0x6e,
	0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x76,
	0x6f, 0x6b, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x6b,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x4e, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xb6, 0x08, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x6f,
	0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x72, 0x70, 0x63, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x6f, 0x69, 0x6e,
	0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x5e, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4e, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x5f,
	0x68, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x67, 0x65, 0x74, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x4b, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x51,
	0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f,
	0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x67,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x51,
	0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x63,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x63, 0x12, 0x60, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x11, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x61,
	0x6c, 0x6c, 0x12, 0x4f, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6b, 0x6f, 0x69, 0x6e,
	0x6f, 0x73, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x6f,
	0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2d, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_koinos_rpc_chain_chain_rpc_proto_rawDescOnce sync.Once
	file_koinos_rpc_chain_chain_rpc_proto_rawDescData = file_koinos_rpc_chain_chain_rpc_proto_rawDesc
)

func file_koinos_rpc_chain_chain_rpc_proto_rawDescGZIP() []byte {
	file_koinos_rpc_chain_chain_rpc_proto_rawDescOnce.Do(func() {
		file_koinos_rpc_chain_chain_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_koinos_rpc_chain_chain_rpc_proto_rawDescData)
	})
	return file_koinos_rpc_chain_chain_rpc_proto_rawDescData
}

var file_koinos_rpc_chain_chain_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_koinos_rpc_chain_chain_rpc_proto_goTypes = []interface{}{
	(*SubmitBlockRequest)(nil),          // 0: koinos.rpc.chain.submit_block_request
	(*SubmitBlockResponse)(nil),         // 1: koinos.rpc.chain.submit_block_response
	(*SubmitTransactionRequest)(nil),    // 2: koinos.rpc.chain.submit_transaction_request
	(*SubmitTransactionResponse)(nil),   // 3: koinos.rpc.chain.submit_transaction_response
	(*GetHeadInfoRequest)(nil),          // 4: koinos.rpc.chain.get_head_info_request
	(*GetHeadInfoResponse)(nil),         // 5: koinos.rpc.chain.get_head_info_response
	(*GetChainIdRequest)(nil),           // 6: koinos.rpc.chain.get_chain_id_request
	(*GetChainIdResponse)(nil),          // 7: koinos.rpc.chain.get_chain_id_response
	(*GetForkHeadsRequest)(nil),         // 8: koinos.rpc.chain.get_fork_heads_request
	(*GetForkHeadsResponse)(nil),        // 9: koinos.rpc.chain.get_fork_heads_response
	(*ReadContractRequest)(nil),         // 10: koinos.rpc.chain.read_contract_request
	(*ReadContractResponse)(nil),        // 11: koinos.rpc.chain.read_contract_response
	(*GetAccountNonceRequest)(nil),      // 12: koinos.rpc.chain.get_account_nonce_request
	(*GetAccountNonceResponse)(nil),     // 13: koinos.rpc.chain.get_account_nonce_response
	(*GetAccountRcRequest)(nil),         // 14: koinos.rpc.chain.get_account_rc_request
	(*GetAccountRcResponse)(nil),        // 15: koinos.rpc.chain.get_account_rc_response
	(*GetResourceLimitsRequest)(nil),    // 16: koinos.rpc.chain.get_resource_limits_request
	(*GetResourceLimitsResponse)(nil),   // 17: koinos.rpc.chain.get_resource_limits_response
	(*InvokeSystemCallRequest)(nil),     // 18: koinos.rpc.chain.invoke_system_call_request
	(*InvokeSystemCallResponse)(nil),    // 19: koinos.rpc.chain.invoke_system_call_response
	(*ProposeBlockRequest)(nil),         // 20: koinos.rpc.chain.propose_block_request
	(*ProposeBlockResponse)(nil),        // 21: koinos.rpc.chain.propose_block_response
	(*ChainRequest)(nil),                // 22: koinos.rpc.chain.chain_request
	(*ChainResponse)(nil),               // 23: koinos.rpc.chain.chain_response
	(*protocol.Block)(nil),              // 24: koinos.protocol.block
	(*protocol.BlockReceipt)(nil),       // 25: koinos.protocol.block_receipt
	(*protocol.Transaction)(nil),        // 26: koinos.protocol.transaction
	(*protocol.TransactionReceipt)(nil), // 27: koinos.protocol.transaction_receipt
	(*koinos.BlockTopology)(nil),        // 28: koinos.block_topology
	(*chain.ResourceLimitData)(nil),     // 29: koinos.chain.resource_limit_data
	(*chain.CallerData)(nil),            // 30: koinos.chain.caller_data
	(*rpc.ReservedRpc)(nil),             // 31: koinos.rpc.reserved_rpc
	(*rpc.ErrorStatus)(nil),             // 32: koinos.rpc.error_status
}
var file_koinos_rpc_chain_chain_rpc_proto_depIdxs = []int32{
	24, // 0: koinos.rpc.chain.submit_block_request.block:type_name -> koinos.protocol.block
	25, // 1: koinos.rpc.chain.submit_block_response.receipt:type_name -> koinos.protocol.block_receipt
	26, // 2: koinos.rpc.chain.submit_transaction_request.transaction:type_name -> koinos.protocol.transaction
	27, // 3: koinos.rpc.chain.submit_transaction_response.receipt:type_name -> koinos.protocol.transaction_receipt
	28, // 4: koinos.rpc.chain.get_head_info_response.head_topology:type_name -> koinos.block_topology
	28, // 5: koinos.rpc.chain.get_fork_heads_response.last_irreversible_block:type_name -> koinos.block_topology
	28, // 6: koinos.rpc.chain.get_fork_heads_response.fork_heads:type_name -> koinos.block_topology
	29, // 7: koinos.rpc.chain.get_resource_limits_response.resource_limit_data:type_name -> koinos.chain.resource_limit_data
	30, // 8: koinos.rpc.chain.invoke_system_call_request.caller_data:type_name -> koinos.chain.caller_data
	24, // 9: koinos.rpc.chain.propose_block_request.block:type_name -> koinos.protocol.block
	25, // 10: koinos.rpc.chain.propose_block_response.receipt:type_name -> koinos.protocol.block_receipt
	31, // 11: koinos.rpc.chain.chain_request.reserved:type_name -> koinos.rpc.reserved_rpc
	0,  // 12: koinos.rpc.chain.chain_request.submit_block:type_name -> koinos.rpc.chain.submit_block_request
	2,  // 13: koinos.rpc.chain.chain_request.submit_transaction:type_name -> koinos.rpc.chain.submit_transaction_request
	4,  // 14: koinos.rpc.chain.chain_request.get_head_info:type_name -> koinos.rpc.chain.get_head_info_request
	6,  // 15: koinos.rpc.chain.chain_request.get_chain_id:type_name -> koinos.rpc.chain.get_chain_id_request
	8,  // 16: koinos.rpc.chain.chain_request.get_fork_heads:type_name -> koinos.rpc.chain.get_fork_heads_request
	10, // 17: koinos.rpc.chain.chain_request.read_contract:type_name -> koinos.rpc.chain.read_contract_request
	12, // 18: koinos.rpc.chain.chain_request.get_account_nonce:type_name -> koinos.rpc.chain.get_account_nonce_request
	14, // 19: koinos.rpc.chain.chain_request.get_account_rc:type_name -> koinos.rpc.chain.get_account_rc_request
	16, // 20: koinos.rpc.chain.chain_request.get_resource_limits:type_name -> koinos.rpc.chain.get_resource_limits_request
	18, // 21: koinos.rpc.chain.chain_request.invoke_system_call:type_name -> koinos.rpc.chain.invoke_system_call_request
	20, // 22: koinos.rpc.chain.chain_request.propose_block:type_name -> koinos.rpc.chain.propose_block_request
	31, // 23: koinos.rpc.chain.chain_response.reserved:type_name -> koinos.rpc.reserved_rpc
	32, // 24: koinos.rpc.chain.chain_response.error:type_name -> koinos.rpc.error_status
	1,  // 25: koinos.rpc.chain.chain_response.submit_block:type_name -> koinos.rpc.chain.submit_block_response
	3,  // 26: koinos.rpc.chain.chain_response.submit_transaction:type_name -> koinos.rpc.chain.submit_transaction_response
	5,  // 27: koinos.rpc.chain.chain_response.get_head_info:type_name -> koinos.rpc.chain.get_head_info_response
	7,  // 28: koinos.rpc.chain.chain_response.get_chain_id:type_name -> koinos.rpc.chain.get_chain_id_response
	9,  // 29: koinos.rpc.chain.chain_response.get_fork_heads:type_name -> koinos.rpc.chain.get_fork_heads_response
	11, // 30: koinos.rpc.chain.chain_response.read_contract:type_name -> koinos.rpc.chain.read_contract_response
	13, // 31: koinos.rpc.chain.chain_response.get_account_nonce:type_name -> koinos.rpc.chain.get_account_nonce_response
	15, // 32: koinos.rpc.chain.chain_response.get_account_rc:type_name -> koinos.rpc.chain.get_account_rc_response
	17, // 33: koinos.rpc.chain.chain_response.get_resource_limits:type_name -> koinos.rpc.chain.get_resource_limits_response
	19, // 34: koinos.rpc.chain.chain_response.invoke_system_call:type_name -> koinos.rpc.chain.invoke_system_call_response
	21, // 35: koinos.rpc.chain.chain_response.propose_block:type_name -> koinos.rpc.chain.propose_block_response
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_koinos_rpc_chain_chain_rpc_proto_init() }
func file_koinos_rpc_chain_chain_rpc_proto_init() {
	if File_koinos_rpc_chain_chain_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeadInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHeadInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChainIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChainIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForkHeadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetForkHeadsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadContractResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountNonceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountNonceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountRcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountRcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceLimitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceLimitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeSystemCallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvokeSystemCallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposeBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_rpc_chain_chain_rpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_koinos_rpc_chain_chain_rpc_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*InvokeSystemCallRequest_Id)(nil),
		(*InvokeSystemCallRequest_Name)(nil),
	}
	file_koinos_rpc_chain_chain_rpc_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_koinos_rpc_chain_chain_rpc_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*ChainRequest_Reserved)(nil),
		(*ChainRequest_SubmitBlock)(nil),
		(*ChainRequest_SubmitTransaction)(nil),
		(*ChainRequest_GetHeadInfo)(nil),
		(*ChainRequest_GetChainId)(nil),
		(*ChainRequest_GetForkHeads)(nil),
		(*ChainRequest_ReadContract)(nil),
		(*ChainRequest_GetAccountNonce)(nil),
		(*ChainRequest_GetAccountRc)(nil),
		(*ChainRequest_GetResourceLimits)(nil),
		(*ChainRequest_InvokeSystemCall)(nil),
		(*ChainRequest_ProposeBlock)(nil),
	}
	file_koinos_rpc_chain_chain_rpc_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*ChainResponse_Reserved)(nil),
		(*ChainResponse_Error)(nil),
		(*ChainResponse_SubmitBlock)(nil),
		(*ChainResponse_SubmitTransaction)(nil),
		(*ChainResponse_GetHeadInfo)(nil),
		(*ChainResponse_GetChainId)(nil),
		(*ChainResponse_GetForkHeads)(nil),
		(*ChainResponse_ReadContract)(nil),
		(*ChainResponse_GetAccountNonce)(nil),
		(*ChainResponse_GetAccountRc)(nil),
		(*ChainResponse_GetResourceLimits)(nil),
		(*ChainResponse_InvokeSystemCall)(nil),
		(*ChainResponse_ProposeBlock)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_koinos_rpc_chain_chain_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_koinos_rpc_chain_chain_rpc_proto_goTypes,
		DependencyIndexes: file_koinos_rpc_chain_chain_rpc_proto_depIdxs,
		MessageInfos:      file_koinos_rpc_chain_chain_rpc_proto_msgTypes,
	}.Build()
	File_koinos_rpc_chain_chain_rpc_proto = out.File
	file_koinos_rpc_chain_chain_rpc_proto_rawDesc = nil
	file_koinos_rpc_chain_chain_rpc_proto_goTypes = nil
	file_koinos_rpc_chain_chain_rpc_proto_depIdxs = nil
}
