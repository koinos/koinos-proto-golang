// Code generated by capnpc-go. DO NOT EDIT.

package transaction_store

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	protocol "koinos/protocol"
)

type TransactionRecord struct{ capnp.Struct }

// TransactionRecord_TypeID is the unique identifier for the type TransactionRecord.
const TransactionRecord_TypeID = 0xf814b26e1a24039e

func NewTransactionRecord(s *capnp.Segment) (TransactionRecord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TransactionRecord{st}, err
}

func NewRootTransactionRecord(s *capnp.Segment) (TransactionRecord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TransactionRecord{st}, err
}

func ReadRootTransactionRecord(msg *capnp.Message) (TransactionRecord, error) {
	root, err := msg.Root()
	return TransactionRecord{root.Struct()}, err
}

func (s TransactionRecord) String() string {
	str, _ := text.Marshal(0xf814b26e1a24039e, s.Struct)
	return str
}

func (s TransactionRecord) Transaction() (protocol.Transaction, error) {
	p, err := s.Struct.Ptr(0)
	return protocol.Transaction{Struct: p.Struct()}, err
}

func (s TransactionRecord) HasTransaction() bool {
	return s.Struct.HasPtr(0)
}

func (s TransactionRecord) SetTransaction(v protocol.Transaction) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTransaction sets the transaction field to a newly
// allocated protocol.Transaction struct, preferring placement in s's segment.
func (s TransactionRecord) NewTransaction() (protocol.Transaction, error) {
	ss, err := protocol.NewTransaction(s.Struct.Segment())
	if err != nil {
		return protocol.Transaction{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s TransactionRecord) ContainingBlocks() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.DataList{List: p.List()}, err
}

func (s TransactionRecord) HasContainingBlocks() bool {
	return s.Struct.HasPtr(1)
}

func (s TransactionRecord) SetContainingBlocks(v capnp.DataList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContainingBlocks sets the containingBlocks field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s TransactionRecord) NewContainingBlocks(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// TransactionRecord_List is a list of TransactionRecord.
type TransactionRecord_List struct{ capnp.List }

// NewTransactionRecord creates a new list of TransactionRecord.
func NewTransactionRecord_List(s *capnp.Segment, sz int32) (TransactionRecord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TransactionRecord_List{l}, err
}

func (s TransactionRecord_List) At(i int) TransactionRecord {
	return TransactionRecord{s.List.Struct(i)}
}

func (s TransactionRecord_List) Set(i int, v TransactionRecord) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TransactionRecord_List) String() string {
	str, _ := text.MarshalList(0xf814b26e1a24039e, s.List)
	return str
}

// TransactionRecord_Future is a wrapper for a TransactionRecord promised by a client call.
type TransactionRecord_Future struct{ *capnp.Future }

func (p TransactionRecord_Future) Struct() (TransactionRecord, error) {
	s, err := p.Future.Struct()
	return TransactionRecord{s}, err
}

func (p TransactionRecord_Future) Transaction() protocol.Transaction_Future {
	return protocol.Transaction_Future{Future: p.Future.Field(0, nil)}
}

const schema_9c2ddc7cabb4245b = "x\xdaD\xcd?/\x04A\x00\x86\xf1\xf7\x9d\x99\xbd=" +
	"\x82\xdc\xe6\xae\xd2h.\xf1'\xe1\\P\x9c\x0a=\xb9" +
	"\x91\xebDd\xcc]d\x91\x99\xcd\xee&\x0a*\xa5\xcf" +
	" 4:\x9d\xf0\x19|\x09\xd5%\x1a\x95R7r\x85" +
	"\xd5=\xf95\xcf\xfa\x01wD7z\xac\x03z\x18\xd5" +
	"\xc2\x83l\xcf\xbb\x97\xd6\x0f\x92\x15\x86\xa3\xf6\xeb\xf3\xcd" +
	"\xc7\xea=\"\x11\x03\x1b[j\xcc\xa6V1\xd0\xdcW" +
	"W\x08\x98\x0aen\\alYK\xbd;)J\x9f" +
	"\x8f:\x7fT\xc9\x9a5\x99\xcb\xb6\x07\xff~8\xb2\xb1" +
	"\xcf\x87}R\xd7\xa5\x02\x14\x81d\xf9\x14\xd0K\x92z" +
	"S0![\x9c`\xf7.\xe9-\xe8\x81\xa4\xce\x04\xab" +
	"\x1b\xe2\xd4;6\xc2\xf1\xe2u\xef\xf6\xeb\xfc\x09 \x1b" +
	"`\xb0\xde\x95&u)\xdd\xd9\xde\xa5\xb7\x17\x05\xa0\x15" +
	"Ex{\xff\x9c\xee\x8c\xcd7\xb4\x12\xdc\x9d!$\xe7" +
	"\xc0\xbe$g!&\xf9\x1b\x00\x00\xff\xffK\x88F\xcd"

func init() {
	schemas.Register(schema_9c2ddc7cabb4245b,
		0xf814b26e1a24039e)
}
