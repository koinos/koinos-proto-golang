// Code generated by capnpc-go. DO NOT EDIT.

package transaction_store

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	protocol "github.com/koinos/koinos-proto-golang/koinos/protocol"
)

type TransactionItem struct{ capnp.Struct }

// TransactionItem_TypeID is the unique identifier for the type TransactionItem.
const TransactionItem_TypeID = 0xd9285b8fd155dd07

func NewTransactionItem(s *capnp.Segment) (TransactionItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TransactionItem{st}, err
}

func NewRootTransactionItem(s *capnp.Segment) (TransactionItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return TransactionItem{st}, err
}

func ReadRootTransactionItem(msg *capnp.Message) (TransactionItem, error) {
	root, err := msg.Root()
	return TransactionItem{root.Struct()}, err
}

func (s TransactionItem) String() string {
	str, _ := text.Marshal(0xd9285b8fd155dd07, s.Struct)
	return str
}

func (s TransactionItem) Transaction() (protocol.Transaction, error) {
	p, err := s.Struct.Ptr(0)
	return protocol.Transaction{Struct: p.Struct()}, err
}

func (s TransactionItem) HasTransaction() bool {
	return s.Struct.HasPtr(0)
}

func (s TransactionItem) SetTransaction(v protocol.Transaction) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTransaction sets the transaction field to a newly
// allocated protocol.Transaction struct, preferring placement in s's segment.
func (s TransactionItem) NewTransaction() (protocol.Transaction, error) {
	ss, err := protocol.NewTransaction(s.Struct.Segment())
	if err != nil {
		return protocol.Transaction{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s TransactionItem) ContainingBlocks() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.DataList{List: p.List()}, err
}

func (s TransactionItem) HasContainingBlocks() bool {
	return s.Struct.HasPtr(1)
}

func (s TransactionItem) SetContainingBlocks(v capnp.DataList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContainingBlocks sets the containingBlocks field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s TransactionItem) NewContainingBlocks(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

// TransactionItem_List is a list of TransactionItem.
type TransactionItem_List struct{ capnp.List }

// NewTransactionItem creates a new list of TransactionItem.
func NewTransactionItem_List(s *capnp.Segment, sz int32) (TransactionItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return TransactionItem_List{l}, err
}

func (s TransactionItem_List) At(i int) TransactionItem { return TransactionItem{s.List.Struct(i)} }

func (s TransactionItem_List) Set(i int, v TransactionItem) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s TransactionItem_List) String() string {
	str, _ := text.MarshalList(0xd9285b8fd155dd07, s.List)
	return str
}

// TransactionItem_Future is a wrapper for a TransactionItem promised by a client call.
type TransactionItem_Future struct{ *capnp.Future }

func (p TransactionItem_Future) Struct() (TransactionItem, error) {
	s, err := p.Future.Struct()
	return TransactionItem{s}, err
}

func (p TransactionItem_Future) Transaction() protocol.Transaction_Future {
	return protocol.Transaction_Future{Future: p.Future.Field(0, nil)}
}

const schema_9c2ddc7cabb4245b = "x\xdaD\xcd?/\x04A\x00\x86\xf1\xf7\x9d\x99\xbd=" +
	"\x82\xdc\xe6\xf4\x1a\x89#\xe1\\P\x9c\x0a\x9d\x82\xdc$" +
	"\xa7\xba\x88\x8cu\x91\xf5gfs;\x89\x82J\xa9\xf1" +
	"\x05$\x1a\x9d\x96\xcf\xa0\xa6\x93\xd0H4*\xdf`\xe4" +
	"\x0a{\xdd\x93_\xf3,\xefrC\xb4\xa2\xfb*\xa0\x8f" +
	"\xa2J\x88?\xf7^o{\x8dw$\x0b\x0c\xbd\xd9\xa7" +
	"\xc7\xab\x8f\xc5;D\"\x06V\xd6\xd4\x1b\xebZ\xc5@" +
	"}G] `,\xf8\x81\xb1\x85I}%s\xf6\xa0" +
	"\xf0n\xd0o\xfeS)K\xa9\xc9m\xbe\xde\x1d\xf9\xb6" +
	"\xef\xf3\xbcC\xea\xaaT\x80\"\x90\xcc\x1f\x02\xba!\xa9" +
	"W\x05\x13r\x9aCl\xdd$\xed\x19\xdd\x95\xd4\xb9`" +
	"\xf9B\x9c9\xcbZ\xd8\x9f\xbbl_\xff\x9c<\x00d" +
	"\x0d\x0c\xa9\xb3\xded6\xa3=\xde:s\xe9i\x01h" +
	"E\x11\x9e_\xbe\xc7\x9b_\xe6\x17Z\x09nN\x10\x92" +
	"S`G\x92\x93\x10\xc3\xfc\x0b\x00\x00\xff\xffW\xceF" +
	"\xd1"

func init() {
	schemas.Register(schema_9c2ddc7cabb4245b,
		0xd9285b8fd155dd07)
}
