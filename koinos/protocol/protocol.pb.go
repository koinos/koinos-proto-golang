// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: koinos/protocol/protocol.proto

package protocol

import (
	_ "github.com/koinos/koinos-proto-golang/koinos"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence uint32   `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Source   []byte   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Name     string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Data     []byte   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Impacted [][]byte `protobuf:"bytes,5,rep,name=impacted,proto3" json:"impacted,omitempty"`
}

func (x *EventData) Reset() {
	*x = EventData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_protocol_protocol_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventData) ProtoMessage() {}

func (x *EventData) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_protocol_protocol_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventData.ProtoReflect.Descriptor instead.
func (*EventData) Descriptor() ([]byte, []int) {
	return file_koinos_protocol_protocol_proto_rawDescGZIP(), []int{0}
}

func (x *EventData) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *EventData) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *EventData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *EventData) GetImpacted() [][]byte {
	if x != nil {
		return x.Impacted
	}
	return nil
}

type ContractCallBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId []byte `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	EntryPoint uint32 `protobuf:"varint,2,opt,name=entry_point,json=entryPoint,proto3" json:"entry_point,omitempty"`
}

func (x *ContractCallBundle) Reset() {
	*x = ContractCallBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_protocol_protocol_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractCallBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractCallBundle) ProtoMessage() {}

func (x *ContractCallBundle) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_protocol_protocol_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractCallBundle.ProtoReflect.Descriptor instead.
func (*ContractCallBundle) Descriptor() ([]byte, []int) {
	return file_koinos_protocol_protocol_proto_rawDescGZIP(), []int{1}
}

func (x *ContractCallBundle) GetContractId() []byte {
	if x != nil {
		return x.ContractId
	}
	return nil
}

func (x *ContractCallBundle) GetEntryPoint() uint32 {
	if x != nil {
		return x.EntryPoint
	}
	return 0
}

type SystemCallTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Target:
	//	*SystemCallTarget_ThunkId
	//	*SystemCallTarget_SystemCallBundle
	Target isSystemCallTarget_Target `protobuf_oneof:"target"`
}

func (x *SystemCallTarget) Reset() {
	*x = SystemCallTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_protocol_protocol_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemCallTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemCallTarget) ProtoMessage() {}

func (x *SystemCallTarget) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_protocol_protocol_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemCallTarget.ProtoReflect.Descriptor instead.
func (*SystemCallTarget) Descriptor() ([]byte, []int) {
	return file_koinos_protocol_protocol_proto_rawDescGZIP(), []int{2}
}

func (m *SystemCallTarget) GetTarget() isSystemCallTarget_Target {
	if m != nil {
		return m.Target
	}
	return nil
}

func (x *SystemCallTarget) GetThunkId() uint32 {
	if x, ok := x.GetTarget().(*SystemCallTarget_ThunkId); ok {
		return x.ThunkId
	}
	return 0
}

func (x *SystemCallTarget) GetSystemCallBundle() *ContractCallBundle {
	if x, ok := x.GetTarget().(*SystemCallTarget_SystemCallBundle); ok {
		return x.SystemCallBundle
	}
	return nil
}

type isSystemCallTarget_Target interface {
	isSystemCallTarget_Target()
}

type SystemCallTarget_ThunkId struct {
	ThunkId uint32 `protobuf:"varint,1,opt,name=thunk_id,json=thunkId,proto3,oneof"`
}

type SystemCallTarget_SystemCallBundle struct {
	SystemCallBundle *ContractCallBundle `protobuf:"bytes,2,opt,name=system_call_bundle,json=systemCallBundle,proto3,oneof"`
}

func (*SystemCallTarget_ThunkId) isSystemCallTarget_Target() {}

func (*SystemCallTarget_SystemCallBundle) isSystemCallTarget_Target() {}

type UploadContractOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId                       []byte `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Bytecode                         []byte `protobuf:"bytes,2,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	Abi                              string `protobuf:"bytes,3,opt,name=abi,proto3" json:"abi,omitempty"`
	AuthorizesCallContract           bool   `protobuf:"varint,4,opt,name=authorizes_call_contract,json=authorizesCallContract,proto3" json:"authorizes_call_contract,omitempty"`
	AuthorizesTransactionApplication bool   `protobuf:"varint,5,opt,name=authorizes_transaction_application,json=authorizesTransactionApplication,proto3" json:"authorizes_transaction_application,omitempty"`
	AuthorizesUploadContract         bool   `protobuf:"varint,6,opt,name=authorizes_upload_contract,json=authorizesUploadContract,proto3" json:"authorizes_upload_contract,omitempty"`
}

func (x *UploadContractOperation) Reset() {
	*x = UploadContractOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_protocol_protocol_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadContractOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadContractOperation) ProtoMessage() {}

func (x *UploadContractOperation) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_protocol_protocol_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadContractOperation.ProtoReflect.Descriptor instead.
func (*UploadContractOperation) Descriptor() ([]byte, []int) {
	return file_koinos_protocol_protocol_proto_rawDescGZIP(), []int{3}
}

func (x *UploadContractOperation) GetContractId() []byte {
	if x != nil {
		return x.ContractId
	}
	return nil
}

func (x *UploadContractOperation) GetBytecode() []byte {
	if x != nil {
		return x.Bytecode
	}
	return nil
}

func (x *UploadContractOperation) GetAbi() string {
	if x != nil {
		return x.Abi
	}
	return ""
}

func (x *UploadContractOperation) GetAuthorizesCallContract() bool {
	if x != nil {
		return x.AuthorizesCallContract
	}
	return false
}

func (x *UploadContractOperation) GetAuthorizesTransactionApplication() bool {
	if x != nil {
		return x.AuthorizesTransactionApplication
	}
	return false
}

func (x *UploadContractOperation) GetAuthorizesUploadContract() bool {
	if x != nil {
		return x.AuthorizesUploadContract
	}
	return false
}

type CallContractOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId []byte `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	EntryPoint uint32 `protobuf:"varint,2,opt,name=entry_point,json=entryPoint,proto3" json:"entry_point,omitempty"`
	Args       []byte `protobuf:"bytes,3,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *CallContractOperation) Reset() {
	*x = CallContractOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_protocol_protocol_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallContractOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallContractOperation) ProtoMessage() {}

func (x *CallContractOperation) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_protocol_protocol_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallContractOperation.ProtoReflect.Descriptor instead.
func (*CallContractOperation) Descriptor() ([]byte, []int) {
	return file_koinos_protocol_protocol_proto_rawDescGZIP(), []int{4}
}

func (x *CallContractOperation) GetContractId() []byte {
	if x != nil {
		return x.ContractId
	}
	return nil
}

func (x *CallContractOperation) GetEntryPoint() uint32 {
	if x != nil {
		return x.EntryPoint
	}
	return 0
}

func (x *CallContractOperation) GetArgs() []byte {
	if x != nil {
		return x.Args
	}
	return nil
}

type SetSystemCallOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallId uint32            `protobuf:"varint,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	Target *SystemCallTarget `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *SetSystemCallOperation) Reset() {
	*x = SetSystemCallOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_protocol_protocol_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSystemCallOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSystemCallOperation) ProtoMessage() {}

func (x *SetSystemCallOperation) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_protocol_protocol_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSystemCallOperation.ProtoReflect.Descriptor instead.
func (*SetSystemCallOperation) Descriptor() ([]byte, []int) {
	return file_koinos_protocol_protocol_proto_rawDescGZIP(), []int{5}
}

func (x *SetSystemCallOperation) GetCallId() uint32 {
	if x != nil {
		return x.CallId
	}
	return 0
}

func (x *SetSystemCallOperation) GetTarget() *SystemCallTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

type SetSystemContractOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId     []byte `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	SystemContract bool   `protobuf:"varint,2,opt,name=system_contract,json=systemContract,proto3" json:"system_contract,omitempty"`
}

func (x *SetSystemContractOperation) Reset() {
	*x = SetSystemContractOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_protocol_protocol_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSystemContractOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSystemContractOperation) ProtoMessage() {}

func (x *SetSystemContractOperation) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_protocol_protocol_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSystemContractOperation.ProtoReflect.Descriptor instead.
func (*SetSystemContractOperation) Descriptor() ([]byte, []int) {
	return file_koinos_protocol_protocol_proto_rawDescGZIP(), []int{6}
}

func (x *SetSystemContractOperation) GetContractId() []byte {
	if x != nil {
		return x.ContractId
	}
	return nil
}

func (x *SetSystemContractOperation) GetSystemContract() bool {
	if x != nil {
		return x.SystemContract
	}
	return false
}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Op:
	//	*Operation_UploadContract
	//	*Operation_CallContract
	//	*Operation_SetSystemCall
	//	*Operation_SetSystemContract
	Op isOperation_Op `protobuf_oneof:"op"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_protocol_protocol_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_protocol_protocol_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_koinos_protocol_protocol_proto_rawDescGZIP(), []int{7}
}

func (m *Operation) GetOp() isOperation_Op {
	if m != nil {
		return m.Op
	}
	return nil
}

func (x *Operation) GetUploadContract() *UploadContractOperation {
	if x, ok := x.GetOp().(*Operation_UploadContract); ok {
		return x.UploadContract
	}
	return nil
}

func (x *Operation) GetCallContract() *CallContractOperation {
	if x, ok := x.GetOp().(*Operation_CallContract); ok {
		return x.CallContract
	}
	return nil
}

func (x *Operation) GetSetSystemCall() *SetSystemCallOperation {
	if x, ok := x.GetOp().(*Operation_SetSystemCall); ok {
		return x.SetSystemCall
	}
	return nil
}

func (x *Operation) GetSetSystemContract() *SetSystemContractOperation {
	if x, ok := x.GetOp().(*Operation_SetSystemContract); ok {
		return x.SetSystemContract
	}
	return nil
}

type isOperation_Op interface {
	isOperation_Op()
}

type Operation_UploadContract struct {
	UploadContract *UploadContractOperation `protobuf:"bytes,1,opt,name=upload_contract,json=uploadContract,proto3,oneof"`
}

type Operation_CallContract struct {
	CallContract *CallContractOperation `protobuf:"bytes,2,opt,name=call_contract,json=callContract,proto3,oneof"`
}

type Operation_SetSystemCall struct {
	SetSystemCall *SetSystemCallOperation `protobuf:"bytes,3,opt,name=set_system_call,json=setSystemCall,proto3,oneof"`
}

type Operation_SetSystemContract struct {
	SetSystemContract *SetSystemContractOperation `protobuf:"bytes,4,opt,name=set_system_contract,json=setSystemContract,proto3,oneof"`
}

func (*Operation_UploadContract) isOperation_Op() {}

func (*Operation_CallContract) isOperation_Op() {}

func (*Operation_SetSystemCall) isOperation_Op() {}

func (*Operation_SetSystemContract) isOperation_Op() {}

type TransactionHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId             []byte `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	RcLimit             uint64 `protobuf:"varint,2,opt,name=rc_limit,json=rcLimit,proto3" json:"rc_limit,omitempty"`
	Nonce               []byte `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	OperationMerkleRoot []byte `protobuf:"bytes,4,opt,name=operation_merkle_root,json=operationMerkleRoot,proto3" json:"operation_merkle_root,omitempty"`
	Payer               []byte `protobuf:"bytes,5,opt,name=payer,proto3" json:"payer,omitempty"`
	Payee               []byte `protobuf:"bytes,6,opt,name=payee,proto3" json:"payee,omitempty"`
}

func (x *TransactionHeader) Reset() {
	*x = TransactionHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_protocol_protocol_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionHeader) ProtoMessage() {}

func (x *TransactionHeader) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_protocol_protocol_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionHeader.ProtoReflect.Descriptor instead.
func (*TransactionHeader) Descriptor() ([]byte, []int) {
	return file_koinos_protocol_protocol_proto_rawDescGZIP(), []int{8}
}

func (x *TransactionHeader) GetChainId() []byte {
	if x != nil {
		return x.ChainId
	}
	return nil
}

func (x *TransactionHeader) GetRcLimit() uint64 {
	if x != nil {
		return x.RcLimit
	}
	return 0
}

func (x *TransactionHeader) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *TransactionHeader) GetOperationMerkleRoot() []byte {
	if x != nil {
		return x.OperationMerkleRoot
	}
	return nil
}

func (x *TransactionHeader) GetPayer() []byte {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *TransactionHeader) GetPayee() []byte {
	if x != nil {
		return x.Payee
	}
	return nil
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         []byte             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Header     *TransactionHeader `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Operations []*Operation       `protobuf:"bytes,3,rep,name=operations,proto3" json:"operations,omitempty"`
	Signatures [][]byte           `protobuf:"bytes,4,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_protocol_protocol_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_protocol_protocol_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_koinos_protocol_protocol_proto_rawDescGZIP(), []int{9}
}

func (x *Transaction) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Transaction) GetHeader() *TransactionHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Transaction) GetOperations() []*Operation {
	if x != nil {
		return x.Operations
	}
	return nil
}

func (x *Transaction) GetSignatures() [][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type TransactionReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   []byte       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Payer                []byte       `protobuf:"bytes,2,opt,name=payer,proto3" json:"payer,omitempty"`
	MaxPayerRc           uint64       `protobuf:"varint,3,opt,name=max_payer_rc,json=maxPayerRc,proto3" json:"max_payer_rc,omitempty"`
	RcLimit              uint64       `protobuf:"varint,4,opt,name=rc_limit,json=rcLimit,proto3" json:"rc_limit,omitempty"`
	RcUsed               uint64       `protobuf:"varint,5,opt,name=rc_used,json=rcUsed,proto3" json:"rc_used,omitempty"`
	DiskStorageUsed      uint64       `protobuf:"varint,6,opt,name=disk_storage_used,json=diskStorageUsed,proto3" json:"disk_storage_used,omitempty"`
	NetworkBandwidthUsed uint64       `protobuf:"varint,7,opt,name=network_bandwidth_used,json=networkBandwidthUsed,proto3" json:"network_bandwidth_used,omitempty"`
	ComputeBandwidthUsed uint64       `protobuf:"varint,8,opt,name=compute_bandwidth_used,json=computeBandwidthUsed,proto3" json:"compute_bandwidth_used,omitempty"`
	Reverted             bool         `protobuf:"varint,9,opt,name=reverted,proto3" json:"reverted,omitempty"`
	Events               []*EventData `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty"`
	Logs                 []string     `protobuf:"bytes,11,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *TransactionReceipt) Reset() {
	*x = TransactionReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_protocol_protocol_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionReceipt) ProtoMessage() {}

func (x *TransactionReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_protocol_protocol_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionReceipt.ProtoReflect.Descriptor instead.
func (*TransactionReceipt) Descriptor() ([]byte, []int) {
	return file_koinos_protocol_protocol_proto_rawDescGZIP(), []int{10}
}

func (x *TransactionReceipt) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TransactionReceipt) GetPayer() []byte {
	if x != nil {
		return x.Payer
	}
	return nil
}

func (x *TransactionReceipt) GetMaxPayerRc() uint64 {
	if x != nil {
		return x.MaxPayerRc
	}
	return 0
}

func (x *TransactionReceipt) GetRcLimit() uint64 {
	if x != nil {
		return x.RcLimit
	}
	return 0
}

func (x *TransactionReceipt) GetRcUsed() uint64 {
	if x != nil {
		return x.RcUsed
	}
	return 0
}

func (x *TransactionReceipt) GetDiskStorageUsed() uint64 {
	if x != nil {
		return x.DiskStorageUsed
	}
	return 0
}

func (x *TransactionReceipt) GetNetworkBandwidthUsed() uint64 {
	if x != nil {
		return x.NetworkBandwidthUsed
	}
	return 0
}

func (x *TransactionReceipt) GetComputeBandwidthUsed() uint64 {
	if x != nil {
		return x.ComputeBandwidthUsed
	}
	return 0
}

func (x *TransactionReceipt) GetReverted() bool {
	if x != nil {
		return x.Reverted
	}
	return false
}

func (x *TransactionReceipt) GetEvents() []*EventData {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *TransactionReceipt) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

type BlockHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Previous                []byte `protobuf:"bytes,1,opt,name=previous,proto3" json:"previous,omitempty"`
	Height                  uint64 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp               uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PreviousStateMerkleRoot []byte `protobuf:"bytes,4,opt,name=previous_state_merkle_root,json=previousStateMerkleRoot,proto3" json:"previous_state_merkle_root,omitempty"`
	TransactionMerkleRoot   []byte `protobuf:"bytes,5,opt,name=transaction_merkle_root,json=transactionMerkleRoot,proto3" json:"transaction_merkle_root,omitempty"`
	Signer                  []byte `protobuf:"bytes,6,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (x *BlockHeader) Reset() {
	*x = BlockHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_protocol_protocol_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockHeader) ProtoMessage() {}

func (x *BlockHeader) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_protocol_protocol_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockHeader.ProtoReflect.Descriptor instead.
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return file_koinos_protocol_protocol_proto_rawDescGZIP(), []int{11}
}

func (x *BlockHeader) GetPrevious() []byte {
	if x != nil {
		return x.Previous
	}
	return nil
}

func (x *BlockHeader) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockHeader) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BlockHeader) GetPreviousStateMerkleRoot() []byte {
	if x != nil {
		return x.PreviousStateMerkleRoot
	}
	return nil
}

func (x *BlockHeader) GetTransactionMerkleRoot() []byte {
	if x != nil {
		return x.TransactionMerkleRoot
	}
	return nil
}

func (x *BlockHeader) GetSigner() []byte {
	if x != nil {
		return x.Signer
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           []byte         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Header       *BlockHeader   `protobuf:"bytes,2,opt,name=header,proto3" json:"header,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Signature    []byte         `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_protocol_protocol_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_protocol_protocol_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_koinos_protocol_protocol_proto_rawDescGZIP(), []int{12}
}

func (x *Block) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Block) GetHeader() *BlockHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Block) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *Block) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type BlockReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   []byte                `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Height               uint64                `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	DiskStorageUsed      uint64                `protobuf:"varint,3,opt,name=disk_storage_used,json=diskStorageUsed,proto3" json:"disk_storage_used,omitempty"`
	NetworkBandwidthUsed uint64                `protobuf:"varint,4,opt,name=network_bandwidth_used,json=networkBandwidthUsed,proto3" json:"network_bandwidth_used,omitempty"`
	ComputeBandwidthUsed uint64                `protobuf:"varint,5,opt,name=compute_bandwidth_used,json=computeBandwidthUsed,proto3" json:"compute_bandwidth_used,omitempty"`
	StateMerkleRoot      []byte                `protobuf:"bytes,6,opt,name=state_merkle_root,json=stateMerkleRoot,proto3" json:"state_merkle_root,omitempty"`
	Events               []*EventData          `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
	TransactionReceipts  []*TransactionReceipt `protobuf:"bytes,8,rep,name=transaction_receipts,json=transactionReceipts,proto3" json:"transaction_receipts,omitempty"`
	Logs                 []string              `protobuf:"bytes,9,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *BlockReceipt) Reset() {
	*x = BlockReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_koinos_protocol_protocol_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockReceipt) ProtoMessage() {}

func (x *BlockReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_koinos_protocol_protocol_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockReceipt.ProtoReflect.Descriptor instead.
func (*BlockReceipt) Descriptor() ([]byte, []int) {
	return file_koinos_protocol_protocol_proto_rawDescGZIP(), []int{13}
}

func (x *BlockReceipt) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BlockReceipt) GetHeight() uint64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *BlockReceipt) GetDiskStorageUsed() uint64 {
	if x != nil {
		return x.DiskStorageUsed
	}
	return 0
}

func (x *BlockReceipt) GetNetworkBandwidthUsed() uint64 {
	if x != nil {
		return x.NetworkBandwidthUsed
	}
	return 0
}

func (x *BlockReceipt) GetComputeBandwidthUsed() uint64 {
	if x != nil {
		return x.ComputeBandwidthUsed
	}
	return 0
}

func (x *BlockReceipt) GetStateMerkleRoot() []byte {
	if x != nil {
		return x.StateMerkleRoot
	}
	return nil
}

func (x *BlockReceipt) GetEvents() []*EventData {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *BlockReceipt) GetTransactionReceipts() []*TransactionReceipt {
	if x != nil {
		return x.TransactionReceipts
	}
	return nil
}

func (x *BlockReceipt) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

var File_koinos_protocol_protocol_proto protoreflect.FileDescriptor

var file_koinos_protocol_protocol_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0f, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x1a, 0x14, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06,
	0x52, 0x08, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x65, 0x64, 0x22, 0x5e, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x74, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x55,
	0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x75,
	0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6b, 0x6f, 0x69,
	0x6e, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22,
	0xb6, 0x02, 0x0a, 0x19, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x62, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61,
	0x62, 0x69, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x73,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x73,
	0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x4c, 0x0a, 0x22,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x75, 0x0a, 0x17, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22,
	0x71, 0x0a, 0x19, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63,
	0x61, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63,
	0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0x6f, 0x0a, 0x1d, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x05, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x22, 0xf1, 0x02, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x55, 0x0a, 0x0f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x6f, 0x69,
	0x6e, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x61, 0x6c,
	0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x54, 0x0a, 0x0f, 0x73, 0x65, 0x74,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x60, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6b,
	0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11,
	0x73, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x42, 0x04, 0x0a, 0x02, 0x6f, 0x70, 0x22, 0xd0, 0x01, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x72, 0x63, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x07, 0x72, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x06, 0x52, 0x05, 0x70, 0x61, 0x79, 0x65, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a,
	0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xb2, 0x03, 0x0a, 0x13, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80,
	0xb5, 0x18, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x06, 0x52, 0x05, 0x70, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x50, 0x61, 0x79, 0x65, 0x72, 0x52, 0x63, 0x12, 0x1d, 0x0a, 0x08, 0x72, 0x63, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x07, 0x72, 0x63, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x07, 0x72, 0x63, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x72,
	0x63, 0x55, 0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x55, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x02, 0x30, 0x01, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x64,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f,
	0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0xfb,
	0x01, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x20, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x12, 0x1a, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x02, 0x30, 0x01, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x3b, 0x0a, 0x1a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x17, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x36, 0x0a, 0x17,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x15, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x22, 0xb4, 0x01, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6b,
	0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x6f, 0x69, 0x6e,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x22, 0xb3, 0x03, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x04, 0x80, 0xb5, 0x18, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x14, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x6e,
	0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x02, 0x30, 0x01, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x55, 0x73, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6b, 0x6f, 0x69,
	0x6e, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x70, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x37, 0x5a, 0x35, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x6b,
	0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x67, 0x6f, 0x6c, 0x61,
	0x6e, 0x67, 0x2f, 0x6b, 0x6f, 0x69, 0x6e, 0x6f, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_koinos_protocol_protocol_proto_rawDescOnce sync.Once
	file_koinos_protocol_protocol_proto_rawDescData = file_koinos_protocol_protocol_proto_rawDesc
)

func file_koinos_protocol_protocol_proto_rawDescGZIP() []byte {
	file_koinos_protocol_protocol_proto_rawDescOnce.Do(func() {
		file_koinos_protocol_protocol_proto_rawDescData = protoimpl.X.CompressGZIP(file_koinos_protocol_protocol_proto_rawDescData)
	})
	return file_koinos_protocol_protocol_proto_rawDescData
}

var file_koinos_protocol_protocol_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_koinos_protocol_protocol_proto_goTypes = []interface{}{
	(*EventData)(nil),                  // 0: koinos.protocol.event_data
	(*ContractCallBundle)(nil),         // 1: koinos.protocol.contract_call_bundle
	(*SystemCallTarget)(nil),           // 2: koinos.protocol.system_call_target
	(*UploadContractOperation)(nil),    // 3: koinos.protocol.upload_contract_operation
	(*CallContractOperation)(nil),      // 4: koinos.protocol.call_contract_operation
	(*SetSystemCallOperation)(nil),     // 5: koinos.protocol.set_system_call_operation
	(*SetSystemContractOperation)(nil), // 6: koinos.protocol.set_system_contract_operation
	(*Operation)(nil),                  // 7: koinos.protocol.operation
	(*TransactionHeader)(nil),          // 8: koinos.protocol.transaction_header
	(*Transaction)(nil),                // 9: koinos.protocol.transaction
	(*TransactionReceipt)(nil),         // 10: koinos.protocol.transaction_receipt
	(*BlockHeader)(nil),                // 11: koinos.protocol.block_header
	(*Block)(nil),                      // 12: koinos.protocol.block
	(*BlockReceipt)(nil),               // 13: koinos.protocol.block_receipt
}
var file_koinos_protocol_protocol_proto_depIdxs = []int32{
	1,  // 0: koinos.protocol.system_call_target.system_call_bundle:type_name -> koinos.protocol.contract_call_bundle
	2,  // 1: koinos.protocol.set_system_call_operation.target:type_name -> koinos.protocol.system_call_target
	3,  // 2: koinos.protocol.operation.upload_contract:type_name -> koinos.protocol.upload_contract_operation
	4,  // 3: koinos.protocol.operation.call_contract:type_name -> koinos.protocol.call_contract_operation
	5,  // 4: koinos.protocol.operation.set_system_call:type_name -> koinos.protocol.set_system_call_operation
	6,  // 5: koinos.protocol.operation.set_system_contract:type_name -> koinos.protocol.set_system_contract_operation
	8,  // 6: koinos.protocol.transaction.header:type_name -> koinos.protocol.transaction_header
	7,  // 7: koinos.protocol.transaction.operations:type_name -> koinos.protocol.operation
	0,  // 8: koinos.protocol.transaction_receipt.events:type_name -> koinos.protocol.event_data
	11, // 9: koinos.protocol.block.header:type_name -> koinos.protocol.block_header
	9,  // 10: koinos.protocol.block.transactions:type_name -> koinos.protocol.transaction
	0,  // 11: koinos.protocol.block_receipt.events:type_name -> koinos.protocol.event_data
	10, // 12: koinos.protocol.block_receipt.transaction_receipts:type_name -> koinos.protocol.transaction_receipt
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_koinos_protocol_protocol_proto_init() }
func file_koinos_protocol_protocol_proto_init() {
	if File_koinos_protocol_protocol_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_koinos_protocol_protocol_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_protocol_protocol_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractCallBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_protocol_protocol_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemCallTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_protocol_protocol_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadContractOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_protocol_protocol_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallContractOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_protocol_protocol_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSystemCallOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_protocol_protocol_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSystemContractOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_protocol_protocol_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_protocol_protocol_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_protocol_protocol_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_protocol_protocol_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_protocol_protocol_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_protocol_protocol_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_koinos_protocol_protocol_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_koinos_protocol_protocol_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SystemCallTarget_ThunkId)(nil),
		(*SystemCallTarget_SystemCallBundle)(nil),
	}
	file_koinos_protocol_protocol_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Operation_UploadContract)(nil),
		(*Operation_CallContract)(nil),
		(*Operation_SetSystemCall)(nil),
		(*Operation_SetSystemContract)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_koinos_protocol_protocol_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_koinos_protocol_protocol_proto_goTypes,
		DependencyIndexes: file_koinos_protocol_protocol_proto_depIdxs,
		MessageInfos:      file_koinos_protocol_protocol_proto_msgTypes,
	}.Build()
	File_koinos_protocol_protocol_proto = out.File
	file_koinos_protocol_protocol_proto_rawDesc = nil
	file_koinos_protocol_protocol_proto_goTypes = nil
	file_koinos_protocol_protocol_proto_depIdxs = nil
}
