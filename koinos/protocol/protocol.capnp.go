// Code generated by capnpc-go. DO NOT EDIT.

package protocol

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	koinos "github.com/koinos/koinos-proto-golang/koinos"
	strconv "strconv"
)

type UploadContractOperation struct{ capnp.Struct }

// UploadContractOperation_TypeID is the unique identifier for the type UploadContractOperation.
const UploadContractOperation_TypeID = 0xb686ce1dc2957e53

func NewUploadContractOperation(s *capnp.Segment) (UploadContractOperation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UploadContractOperation{st}, err
}

func NewRootUploadContractOperation(s *capnp.Segment) (UploadContractOperation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UploadContractOperation{st}, err
}

func ReadRootUploadContractOperation(msg *capnp.Message) (UploadContractOperation, error) {
	root, err := msg.Root()
	return UploadContractOperation{root.Struct()}, err
}

func (s UploadContractOperation) String() string {
	str, _ := text.Marshal(0xb686ce1dc2957e53, s.Struct)
	return str
}

func (s UploadContractOperation) ContractID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s UploadContractOperation) HasContractID() bool {
	return s.Struct.HasPtr(0)
}

func (s UploadContractOperation) SetContractID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s UploadContractOperation) Bytecode() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s UploadContractOperation) HasBytecode() bool {
	return s.Struct.HasPtr(1)
}

func (s UploadContractOperation) SetBytecode(v []byte) error {
	return s.Struct.SetData(1, v)
}

// UploadContractOperation_List is a list of UploadContractOperation.
type UploadContractOperation_List struct{ capnp.List }

// NewUploadContractOperation creates a new list of UploadContractOperation.
func NewUploadContractOperation_List(s *capnp.Segment, sz int32) (UploadContractOperation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return UploadContractOperation_List{l}, err
}

func (s UploadContractOperation_List) At(i int) UploadContractOperation {
	return UploadContractOperation{s.List.Struct(i)}
}

func (s UploadContractOperation_List) Set(i int, v UploadContractOperation) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s UploadContractOperation_List) String() string {
	str, _ := text.MarshalList(0xb686ce1dc2957e53, s.List)
	return str
}

// UploadContractOperation_Future is a wrapper for a UploadContractOperation promised by a client call.
type UploadContractOperation_Future struct{ *capnp.Future }

func (p UploadContractOperation_Future) Struct() (UploadContractOperation, error) {
	s, err := p.Future.Struct()
	return UploadContractOperation{s}, err
}

type CallContractOperation struct{ capnp.Struct }

// CallContractOperation_TypeID is the unique identifier for the type CallContractOperation.
const CallContractOperation_TypeID = 0xc28ae36fa3024a54

func NewCallContractOperation(s *capnp.Segment) (CallContractOperation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CallContractOperation{st}, err
}

func NewRootCallContractOperation(s *capnp.Segment) (CallContractOperation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CallContractOperation{st}, err
}

func ReadRootCallContractOperation(msg *capnp.Message) (CallContractOperation, error) {
	root, err := msg.Root()
	return CallContractOperation{root.Struct()}, err
}

func (s CallContractOperation) String() string {
	str, _ := text.Marshal(0xc28ae36fa3024a54, s.Struct)
	return str
}

func (s CallContractOperation) ContractID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CallContractOperation) HasContractID() bool {
	return s.Struct.HasPtr(0)
}

func (s CallContractOperation) SetContractID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s CallContractOperation) EntryPoint() uint32 {
	return s.Struct.Uint32(0)
}

func (s CallContractOperation) SetEntryPoint(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s CallContractOperation) Args() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s CallContractOperation) HasArgs() bool {
	return s.Struct.HasPtr(1)
}

func (s CallContractOperation) SetArgs(v []byte) error {
	return s.Struct.SetData(1, v)
}

// CallContractOperation_List is a list of CallContractOperation.
type CallContractOperation_List struct{ capnp.List }

// NewCallContractOperation creates a new list of CallContractOperation.
func NewCallContractOperation_List(s *capnp.Segment, sz int32) (CallContractOperation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return CallContractOperation_List{l}, err
}

func (s CallContractOperation_List) At(i int) CallContractOperation {
	return CallContractOperation{s.List.Struct(i)}
}

func (s CallContractOperation_List) Set(i int, v CallContractOperation) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CallContractOperation_List) String() string {
	str, _ := text.MarshalList(0xc28ae36fa3024a54, s.List)
	return str
}

// CallContractOperation_Future is a wrapper for a CallContractOperation promised by a client call.
type CallContractOperation_Future struct{ *capnp.Future }

func (p CallContractOperation_Future) Struct() (CallContractOperation, error) {
	s, err := p.Future.Struct()
	return CallContractOperation{s}, err
}

type SetSystemCallOperation struct{ capnp.Struct }

// SetSystemCallOperation_TypeID is the unique identifier for the type SetSystemCallOperation.
const SetSystemCallOperation_TypeID = 0xac407886197419d8

func NewSetSystemCallOperation(s *capnp.Segment) (SetSystemCallOperation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SetSystemCallOperation{st}, err
}

func NewRootSetSystemCallOperation(s *capnp.Segment) (SetSystemCallOperation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SetSystemCallOperation{st}, err
}

func ReadRootSetSystemCallOperation(msg *capnp.Message) (SetSystemCallOperation, error) {
	root, err := msg.Root()
	return SetSystemCallOperation{root.Struct()}, err
}

func (s SetSystemCallOperation) String() string {
	str, _ := text.Marshal(0xac407886197419d8, s.Struct)
	return str
}

func (s SetSystemCallOperation) CallID() uint32 {
	return s.Struct.Uint32(0)
}

func (s SetSystemCallOperation) SetCallID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s SetSystemCallOperation) Target() (koinos.SystemCallTarget, error) {
	p, err := s.Struct.Ptr(0)
	return koinos.SystemCallTarget{Struct: p.Struct()}, err
}

func (s SetSystemCallOperation) HasTarget() bool {
	return s.Struct.HasPtr(0)
}

func (s SetSystemCallOperation) SetTarget(v koinos.SystemCallTarget) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTarget sets the target field to a newly
// allocated koinos.SystemCallTarget struct, preferring placement in s's segment.
func (s SetSystemCallOperation) NewTarget() (koinos.SystemCallTarget, error) {
	ss, err := koinos.NewSystemCallTarget(s.Struct.Segment())
	if err != nil {
		return koinos.SystemCallTarget{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// SetSystemCallOperation_List is a list of SetSystemCallOperation.
type SetSystemCallOperation_List struct{ capnp.List }

// NewSetSystemCallOperation creates a new list of SetSystemCallOperation.
func NewSetSystemCallOperation_List(s *capnp.Segment, sz int32) (SetSystemCallOperation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SetSystemCallOperation_List{l}, err
}

func (s SetSystemCallOperation_List) At(i int) SetSystemCallOperation {
	return SetSystemCallOperation{s.List.Struct(i)}
}

func (s SetSystemCallOperation_List) Set(i int, v SetSystemCallOperation) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SetSystemCallOperation_List) String() string {
	str, _ := text.MarshalList(0xac407886197419d8, s.List)
	return str
}

// SetSystemCallOperation_Future is a wrapper for a SetSystemCallOperation promised by a client call.
type SetSystemCallOperation_Future struct{ *capnp.Future }

func (p SetSystemCallOperation_Future) Struct() (SetSystemCallOperation, error) {
	s, err := p.Future.Struct()
	return SetSystemCallOperation{s}, err
}

func (p SetSystemCallOperation_Future) Target() koinos.SystemCallTarget_Future {
	return koinos.SystemCallTarget_Future{Future: p.Future.Field(0, nil)}
}

type Operation struct{ capnp.Struct }
type Operation_op Operation
type Operation_op_Which uint16

const (
	Operation_op_Which_nop            Operation_op_Which = 0
	Operation_op_Which_uploadContract Operation_op_Which = 1
	Operation_op_Which_callContract   Operation_op_Which = 2
	Operation_op_Which_setSystemCall  Operation_op_Which = 3
)

func (w Operation_op_Which) String() string {
	const s = "nopuploadContractcallContractsetSystemCall"
	switch w {
	case Operation_op_Which_nop:
		return s[0:3]
	case Operation_op_Which_uploadContract:
		return s[3:17]
	case Operation_op_Which_callContract:
		return s[17:29]
	case Operation_op_Which_setSystemCall:
		return s[29:42]

	}
	return "Operation_op_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Operation_TypeID is the unique identifier for the type Operation.
const Operation_TypeID = 0xacfa908737767d25

func NewOperation(s *capnp.Segment) (Operation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Operation{st}, err
}

func NewRootOperation(s *capnp.Segment) (Operation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Operation{st}, err
}

func ReadRootOperation(msg *capnp.Message) (Operation, error) {
	root, err := msg.Root()
	return Operation{root.Struct()}, err
}

func (s Operation) String() string {
	str, _ := text.Marshal(0xacfa908737767d25, s.Struct)
	return str
}

func (s Operation) Op() Operation_op { return Operation_op(s) }

func (s Operation_op) Which() Operation_op_Which {
	return Operation_op_Which(s.Struct.Uint16(0))
}
func (s Operation_op) SetNop() {
	s.Struct.SetUint16(0, 0)

}

func (s Operation_op) UploadContract() (UploadContractOperation, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != uploadContract")
	}
	p, err := s.Struct.Ptr(0)
	return UploadContractOperation{Struct: p.Struct()}, err
}

func (s Operation_op) HasUploadContract() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Operation_op) SetUploadContract(v UploadContractOperation) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewUploadContract sets the uploadContract field to a newly
// allocated UploadContractOperation struct, preferring placement in s's segment.
func (s Operation_op) NewUploadContract() (UploadContractOperation, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewUploadContractOperation(s.Struct.Segment())
	if err != nil {
		return UploadContractOperation{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Operation_op) CallContract() (CallContractOperation, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != callContract")
	}
	p, err := s.Struct.Ptr(0)
	return CallContractOperation{Struct: p.Struct()}, err
}

func (s Operation_op) HasCallContract() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Operation_op) SetCallContract(v CallContractOperation) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCallContract sets the callContract field to a newly
// allocated CallContractOperation struct, preferring placement in s's segment.
func (s Operation_op) NewCallContract() (CallContractOperation, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewCallContractOperation(s.Struct.Segment())
	if err != nil {
		return CallContractOperation{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Operation_op) SetSystemCall() (SetSystemCallOperation, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != setSystemCall")
	}
	p, err := s.Struct.Ptr(0)
	return SetSystemCallOperation{Struct: p.Struct()}, err
}

func (s Operation_op) HasSetSystemCall() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Operation_op) SetSetSystemCall(v SetSystemCallOperation) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSetSystemCall sets the setSystemCall field to a newly
// allocated SetSystemCallOperation struct, preferring placement in s's segment.
func (s Operation_op) NewSetSystemCall() (SetSystemCallOperation, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewSetSystemCallOperation(s.Struct.Segment())
	if err != nil {
		return SetSystemCallOperation{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Operation_List is a list of Operation.
type Operation_List struct{ capnp.List }

// NewOperation creates a new list of Operation.
func NewOperation_List(s *capnp.Segment, sz int32) (Operation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Operation_List{l}, err
}

func (s Operation_List) At(i int) Operation { return Operation{s.List.Struct(i)} }

func (s Operation_List) Set(i int, v Operation) error { return s.List.SetStruct(i, v.Struct) }

func (s Operation_List) String() string {
	str, _ := text.MarshalList(0xacfa908737767d25, s.List)
	return str
}

// Operation_Future is a wrapper for a Operation promised by a client call.
type Operation_Future struct{ *capnp.Future }

func (p Operation_Future) Struct() (Operation, error) {
	s, err := p.Future.Struct()
	return Operation{s}, err
}

func (p Operation_Future) Op() Operation_op_Future { return Operation_op_Future{p.Future} }

// Operation_op_Future is a wrapper for a Operation_op promised by a client call.
type Operation_op_Future struct{ *capnp.Future }

func (p Operation_op_Future) Struct() (Operation_op, error) {
	s, err := p.Future.Struct()
	return Operation_op{s}, err
}

func (p Operation_op_Future) UploadContract() UploadContractOperation_Future {
	return UploadContractOperation_Future{Future: p.Future.Field(0, nil)}
}

func (p Operation_op_Future) CallContract() CallContractOperation_Future {
	return CallContractOperation_Future{Future: p.Future.Field(0, nil)}
}

func (p Operation_op_Future) SetSystemCall() SetSystemCallOperation_Future {
	return SetSystemCallOperation_Future{Future: p.Future.Field(0, nil)}
}

type ActiveTransactionData struct{ capnp.Struct }

// ActiveTransactionData_TypeID is the unique identifier for the type ActiveTransactionData.
const ActiveTransactionData_TypeID = 0xf846d41d93e29448

func NewActiveTransactionData(s *capnp.Segment) (ActiveTransactionData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ActiveTransactionData{st}, err
}

func NewRootActiveTransactionData(s *capnp.Segment) (ActiveTransactionData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ActiveTransactionData{st}, err
}

func ReadRootActiveTransactionData(msg *capnp.Message) (ActiveTransactionData, error) {
	root, err := msg.Root()
	return ActiveTransactionData{root.Struct()}, err
}

func (s ActiveTransactionData) String() string {
	str, _ := text.Marshal(0xf846d41d93e29448, s.Struct)
	return str
}

func (s ActiveTransactionData) Nonce() uint64 {
	return s.Struct.Uint64(0)
}

func (s ActiveTransactionData) SetNonce(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ActiveTransactionData) Operations() (Operation_List, error) {
	p, err := s.Struct.Ptr(0)
	return Operation_List{List: p.List()}, err
}

func (s ActiveTransactionData) HasOperations() bool {
	return s.Struct.HasPtr(0)
}

func (s ActiveTransactionData) SetOperations(v Operation_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewOperations sets the operations field to a newly
// allocated Operation_List, preferring placement in s's segment.
func (s ActiveTransactionData) NewOperations(n int32) (Operation_List, error) {
	l, err := NewOperation_List(s.Struct.Segment(), n)
	if err != nil {
		return Operation_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ActiveTransactionData_List is a list of ActiveTransactionData.
type ActiveTransactionData_List struct{ capnp.List }

// NewActiveTransactionData creates a new list of ActiveTransactionData.
func NewActiveTransactionData_List(s *capnp.Segment, sz int32) (ActiveTransactionData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ActiveTransactionData_List{l}, err
}

func (s ActiveTransactionData_List) At(i int) ActiveTransactionData {
	return ActiveTransactionData{s.List.Struct(i)}
}

func (s ActiveTransactionData_List) Set(i int, v ActiveTransactionData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ActiveTransactionData_List) String() string {
	str, _ := text.MarshalList(0xf846d41d93e29448, s.List)
	return str
}

// ActiveTransactionData_Future is a wrapper for a ActiveTransactionData promised by a client call.
type ActiveTransactionData_Future struct{ *capnp.Future }

func (p ActiveTransactionData_Future) Struct() (ActiveTransactionData, error) {
	s, err := p.Future.Struct()
	return ActiveTransactionData{s}, err
}

type PassiveTransactionData struct{ capnp.Struct }

// PassiveTransactionData_TypeID is the unique identifier for the type PassiveTransactionData.
const PassiveTransactionData_TypeID = 0xdb69d60b8cf04bd8

func NewPassiveTransactionData(s *capnp.Segment) (PassiveTransactionData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PassiveTransactionData{st}, err
}

func NewRootPassiveTransactionData(s *capnp.Segment) (PassiveTransactionData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PassiveTransactionData{st}, err
}

func ReadRootPassiveTransactionData(msg *capnp.Message) (PassiveTransactionData, error) {
	root, err := msg.Root()
	return PassiveTransactionData{root.Struct()}, err
}

func (s PassiveTransactionData) String() string {
	str, _ := text.Marshal(0xdb69d60b8cf04bd8, s.Struct)
	return str
}

// PassiveTransactionData_List is a list of PassiveTransactionData.
type PassiveTransactionData_List struct{ capnp.List }

// NewPassiveTransactionData creates a new list of PassiveTransactionData.
func NewPassiveTransactionData_List(s *capnp.Segment, sz int32) (PassiveTransactionData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return PassiveTransactionData_List{l}, err
}

func (s PassiveTransactionData_List) At(i int) PassiveTransactionData {
	return PassiveTransactionData{s.List.Struct(i)}
}

func (s PassiveTransactionData_List) Set(i int, v PassiveTransactionData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PassiveTransactionData_List) String() string {
	str, _ := text.MarshalList(0xdb69d60b8cf04bd8, s.List)
	return str
}

// PassiveTransactionData_Future is a wrapper for a PassiveTransactionData promised by a client call.
type PassiveTransactionData_Future struct{ *capnp.Future }

func (p PassiveTransactionData_Future) Struct() (PassiveTransactionData, error) {
	s, err := p.Future.Struct()
	return PassiveTransactionData{s}, err
}

type Transaction struct{ capnp.Struct }
type Transaction_activeData Transaction
type Transaction_passiveData Transaction
type Transaction_activeData_Which uint16

const (
	Transaction_activeData_Which_native Transaction_activeData_Which = 0
	Transaction_activeData_Which_bytes  Transaction_activeData_Which = 1
)

func (w Transaction_activeData_Which) String() string {
	const s = "nativebytes"
	switch w {
	case Transaction_activeData_Which_native:
		return s[0:6]
	case Transaction_activeData_Which_bytes:
		return s[6:11]

	}
	return "Transaction_activeData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type Transaction_passiveData_Which uint16

const (
	Transaction_passiveData_Which_native Transaction_passiveData_Which = 0
	Transaction_passiveData_Which_bytes  Transaction_passiveData_Which = 1
)

func (w Transaction_passiveData_Which) String() string {
	const s = "nativebytes"
	switch w {
	case Transaction_passiveData_Which_native:
		return s[0:6]
	case Transaction_passiveData_Which_bytes:
		return s[6:11]

	}
	return "Transaction_passiveData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Transaction_TypeID is the unique identifier for the type Transaction.
const Transaction_TypeID = 0xa46aea82397b275d

func NewTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Transaction{st}, err
}

func NewRootTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Transaction{st}, err
}

func ReadRootTransaction(msg *capnp.Message) (Transaction, error) {
	root, err := msg.Root()
	return Transaction{root.Struct()}, err
}

func (s Transaction) String() string {
	str, _ := text.Marshal(0xa46aea82397b275d, s.Struct)
	return str
}

func (s Transaction) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Transaction) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s Transaction) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Transaction) ActiveData() Transaction_activeData { return Transaction_activeData(s) }

func (s Transaction_activeData) Which() Transaction_activeData_Which {
	return Transaction_activeData_Which(s.Struct.Uint16(0))
}
func (s Transaction_activeData) Native() (ActiveTransactionData, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != native")
	}
	p, err := s.Struct.Ptr(1)
	return ActiveTransactionData{Struct: p.Struct()}, err
}

func (s Transaction_activeData) HasNative() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(1)
}

func (s Transaction_activeData) SetNative(v ActiveTransactionData) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewNative sets the native field to a newly
// allocated ActiveTransactionData struct, preferring placement in s's segment.
func (s Transaction_activeData) NewNative() (ActiveTransactionData, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewActiveTransactionData(s.Struct.Segment())
	if err != nil {
		return ActiveTransactionData{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Transaction_activeData) Bytes() ([]byte, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != bytes")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Transaction_activeData) HasBytes() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(1)
}

func (s Transaction_activeData) SetBytes(v []byte) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetData(1, v)
}

func (s Transaction) PassiveData() Transaction_passiveData { return Transaction_passiveData(s) }

func (s Transaction_passiveData) Which() Transaction_passiveData_Which {
	return Transaction_passiveData_Which(s.Struct.Uint16(2))
}
func (s Transaction_passiveData) Native() (PassiveTransactionData, error) {
	if s.Struct.Uint16(2) != 0 {
		panic("Which() != native")
	}
	p, err := s.Struct.Ptr(2)
	return PassiveTransactionData{Struct: p.Struct()}, err
}

func (s Transaction_passiveData) HasNative() bool {
	if s.Struct.Uint16(2) != 0 {
		return false
	}
	return s.Struct.HasPtr(2)
}

func (s Transaction_passiveData) SetNative(v PassiveTransactionData) error {
	s.Struct.SetUint16(2, 0)
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewNative sets the native field to a newly
// allocated PassiveTransactionData struct, preferring placement in s's segment.
func (s Transaction_passiveData) NewNative() (PassiveTransactionData, error) {
	s.Struct.SetUint16(2, 0)
	ss, err := NewPassiveTransactionData(s.Struct.Segment())
	if err != nil {
		return PassiveTransactionData{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Transaction_passiveData) Bytes() ([]byte, error) {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != bytes")
	}
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Transaction_passiveData) HasBytes() bool {
	if s.Struct.Uint16(2) != 1 {
		return false
	}
	return s.Struct.HasPtr(2)
}

func (s Transaction_passiveData) SetBytes(v []byte) error {
	s.Struct.SetUint16(2, 1)
	return s.Struct.SetData(2, v)
}

func (s Transaction) SignatureData() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Transaction) HasSignatureData() bool {
	return s.Struct.HasPtr(3)
}

func (s Transaction) SetSignatureData(v []byte) error {
	return s.Struct.SetData(3, v)
}

// Transaction_List is a list of Transaction.
type Transaction_List struct{ capnp.List }

// NewTransaction creates a new list of Transaction.
func NewTransaction_List(s *capnp.Segment, sz int32) (Transaction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Transaction_List{l}, err
}

func (s Transaction_List) At(i int) Transaction { return Transaction{s.List.Struct(i)} }

func (s Transaction_List) Set(i int, v Transaction) error { return s.List.SetStruct(i, v.Struct) }

func (s Transaction_List) String() string {
	str, _ := text.MarshalList(0xa46aea82397b275d, s.List)
	return str
}

// Transaction_Future is a wrapper for a Transaction promised by a client call.
type Transaction_Future struct{ *capnp.Future }

func (p Transaction_Future) Struct() (Transaction, error) {
	s, err := p.Future.Struct()
	return Transaction{s}, err
}

func (p Transaction_Future) ActiveData() Transaction_activeData_Future {
	return Transaction_activeData_Future{p.Future}
}

// Transaction_activeData_Future is a wrapper for a Transaction_activeData promised by a client call.
type Transaction_activeData_Future struct{ *capnp.Future }

func (p Transaction_activeData_Future) Struct() (Transaction_activeData, error) {
	s, err := p.Future.Struct()
	return Transaction_activeData{s}, err
}

func (p Transaction_activeData_Future) Native() ActiveTransactionData_Future {
	return ActiveTransactionData_Future{Future: p.Future.Field(1, nil)}
}

func (p Transaction_Future) PassiveData() Transaction_passiveData_Future {
	return Transaction_passiveData_Future{p.Future}
}

// Transaction_passiveData_Future is a wrapper for a Transaction_passiveData promised by a client call.
type Transaction_passiveData_Future struct{ *capnp.Future }

func (p Transaction_passiveData_Future) Struct() (Transaction_passiveData, error) {
	s, err := p.Future.Struct()
	return Transaction_passiveData{s}, err
}

func (p Transaction_passiveData_Future) Native() PassiveTransactionData_Future {
	return PassiveTransactionData_Future{Future: p.Future.Field(2, nil)}
}

type ActiveBlockData struct{ capnp.Struct }

// ActiveBlockData_TypeID is the unique identifier for the type ActiveBlockData.
const ActiveBlockData_TypeID = 0xf9da41cfb2fdc55a

func NewActiveBlockData(s *capnp.Segment) (ActiveBlockData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ActiveBlockData{st}, err
}

func NewRootActiveBlockData(s *capnp.Segment) (ActiveBlockData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ActiveBlockData{st}, err
}

func ReadRootActiveBlockData(msg *capnp.Message) (ActiveBlockData, error) {
	root, err := msg.Root()
	return ActiveBlockData{root.Struct()}, err
}

func (s ActiveBlockData) String() string {
	str, _ := text.Marshal(0xf9da41cfb2fdc55a, s.Struct)
	return str
}

func (s ActiveBlockData) TransactionMerkleRoot() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ActiveBlockData) HasTransactionMerkleRoot() bool {
	return s.Struct.HasPtr(0)
}

func (s ActiveBlockData) SetTransactionMerkleRoot(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ActiveBlockData) PassiveDataMerkleRoot() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s ActiveBlockData) HasPassiveDataMerkleRoot() bool {
	return s.Struct.HasPtr(1)
}

func (s ActiveBlockData) SetPassiveDataMerkleRoot(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s ActiveBlockData) Signer() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s ActiveBlockData) HasSigner() bool {
	return s.Struct.HasPtr(2)
}

func (s ActiveBlockData) SetSigner(v []byte) error {
	return s.Struct.SetData(2, v)
}

// ActiveBlockData_List is a list of ActiveBlockData.
type ActiveBlockData_List struct{ capnp.List }

// NewActiveBlockData creates a new list of ActiveBlockData.
func NewActiveBlockData_List(s *capnp.Segment, sz int32) (ActiveBlockData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return ActiveBlockData_List{l}, err
}

func (s ActiveBlockData_List) At(i int) ActiveBlockData { return ActiveBlockData{s.List.Struct(i)} }

func (s ActiveBlockData_List) Set(i int, v ActiveBlockData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ActiveBlockData_List) String() string {
	str, _ := text.MarshalList(0xf9da41cfb2fdc55a, s.List)
	return str
}

// ActiveBlockData_Future is a wrapper for a ActiveBlockData promised by a client call.
type ActiveBlockData_Future struct{ *capnp.Future }

func (p ActiveBlockData_Future) Struct() (ActiveBlockData, error) {
	s, err := p.Future.Struct()
	return ActiveBlockData{s}, err
}

type PassiveBlockData struct{ capnp.Struct }

// PassiveBlockData_TypeID is the unique identifier for the type PassiveBlockData.
const PassiveBlockData_TypeID = 0x9d2e95ff1c6c3916

func NewPassiveBlockData(s *capnp.Segment) (PassiveBlockData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PassiveBlockData{st}, err
}

func NewRootPassiveBlockData(s *capnp.Segment) (PassiveBlockData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PassiveBlockData{st}, err
}

func ReadRootPassiveBlockData(msg *capnp.Message) (PassiveBlockData, error) {
	root, err := msg.Root()
	return PassiveBlockData{root.Struct()}, err
}

func (s PassiveBlockData) String() string {
	str, _ := text.Marshal(0x9d2e95ff1c6c3916, s.Struct)
	return str
}

// PassiveBlockData_List is a list of PassiveBlockData.
type PassiveBlockData_List struct{ capnp.List }

// NewPassiveBlockData creates a new list of PassiveBlockData.
func NewPassiveBlockData_List(s *capnp.Segment, sz int32) (PassiveBlockData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return PassiveBlockData_List{l}, err
}

func (s PassiveBlockData_List) At(i int) PassiveBlockData { return PassiveBlockData{s.List.Struct(i)} }

func (s PassiveBlockData_List) Set(i int, v PassiveBlockData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PassiveBlockData_List) String() string {
	str, _ := text.MarshalList(0x9d2e95ff1c6c3916, s.List)
	return str
}

// PassiveBlockData_Future is a wrapper for a PassiveBlockData promised by a client call.
type PassiveBlockData_Future struct{ *capnp.Future }

func (p PassiveBlockData_Future) Struct() (PassiveBlockData, error) {
	s, err := p.Future.Struct()
	return PassiveBlockData{s}, err
}

type BlockHeader struct{ capnp.Struct }

// BlockHeader_TypeID is the unique identifier for the type BlockHeader.
const BlockHeader_TypeID = 0xa5fa3ece1f52a4bc

func NewBlockHeader(s *capnp.Segment) (BlockHeader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return BlockHeader{st}, err
}

func NewRootBlockHeader(s *capnp.Segment) (BlockHeader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return BlockHeader{st}, err
}

func ReadRootBlockHeader(msg *capnp.Message) (BlockHeader, error) {
	root, err := msg.Root()
	return BlockHeader{root.Struct()}, err
}

func (s BlockHeader) String() string {
	str, _ := text.Marshal(0xa5fa3ece1f52a4bc, s.Struct)
	return str
}

func (s BlockHeader) Previous() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockHeader) HasPrevious() bool {
	return s.Struct.HasPtr(0)
}

func (s BlockHeader) SetPrevious(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockHeader) Height() uint64 {
	return s.Struct.Uint64(0)
}

func (s BlockHeader) SetHeight(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s BlockHeader) Timestamp() uint64 {
	return s.Struct.Uint64(8)
}

func (s BlockHeader) SetTimestamp(v uint64) {
	s.Struct.SetUint64(8, v)
}

// BlockHeader_List is a list of BlockHeader.
type BlockHeader_List struct{ capnp.List }

// NewBlockHeader creates a new list of BlockHeader.
func NewBlockHeader_List(s *capnp.Segment, sz int32) (BlockHeader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return BlockHeader_List{l}, err
}

func (s BlockHeader_List) At(i int) BlockHeader { return BlockHeader{s.List.Struct(i)} }

func (s BlockHeader_List) Set(i int, v BlockHeader) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockHeader_List) String() string {
	str, _ := text.MarshalList(0xa5fa3ece1f52a4bc, s.List)
	return str
}

// BlockHeader_Future is a wrapper for a BlockHeader promised by a client call.
type BlockHeader_Future struct{ *capnp.Future }

func (p BlockHeader_Future) Struct() (BlockHeader, error) {
	s, err := p.Future.Struct()
	return BlockHeader{s}, err
}

type Block struct{ capnp.Struct }

// Block_TypeID is the unique identifier for the type Block.
const Block_TypeID = 0xf8b832c3c252679d

func NewBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return Block{st}, err
}

func NewRootBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return Block{st}, err
}

func ReadRootBlock(msg *capnp.Message) (Block, error) {
	root, err := msg.Root()
	return Block{root.Struct()}, err
}

func (s Block) String() string {
	str, _ := text.Marshal(0xf8b832c3c252679d, s.Struct)
	return str
}

func (s Block) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Block) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s Block) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Block) Header() (BlockHeader, error) {
	p, err := s.Struct.Ptr(1)
	return BlockHeader{Struct: p.Struct()}, err
}

func (s Block) HasHeader() bool {
	return s.Struct.HasPtr(1)
}

func (s Block) SetHeader(v BlockHeader) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated BlockHeader struct, preferring placement in s's segment.
func (s Block) NewHeader() (BlockHeader, error) {
	ss, err := NewBlockHeader(s.Struct.Segment())
	if err != nil {
		return BlockHeader{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) ActiveData() (koinos.Opaque, error) {
	p, err := s.Struct.Ptr(2)
	return koinos.Opaque{Struct: p.Struct()}, err
}

func (s Block) HasActiveData() bool {
	return s.Struct.HasPtr(2)
}

func (s Block) SetActiveData(v koinos.Opaque) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewActiveData sets the activeData field to a newly
// allocated koinos.Opaque struct, preferring placement in s's segment.
func (s Block) NewActiveData() (koinos.Opaque, error) {
	ss, err := koinos.NewOpaque(s.Struct.Segment())
	if err != nil {
		return koinos.Opaque{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) PassiveData() (koinos.Opaque, error) {
	p, err := s.Struct.Ptr(3)
	return koinos.Opaque{Struct: p.Struct()}, err
}

func (s Block) HasPassiveData() bool {
	return s.Struct.HasPtr(3)
}

func (s Block) SetPassiveData(v koinos.Opaque) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewPassiveData sets the passiveData field to a newly
// allocated koinos.Opaque struct, preferring placement in s's segment.
func (s Block) NewPassiveData() (koinos.Opaque, error) {
	ss, err := koinos.NewOpaque(s.Struct.Segment())
	if err != nil {
		return koinos.Opaque{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) SignatureData() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s Block) HasSignatureData() bool {
	return s.Struct.HasPtr(4)
}

func (s Block) SetSignatureData(v []byte) error {
	return s.Struct.SetData(4, v)
}

func (s Block) Transactions() (Transaction_List, error) {
	p, err := s.Struct.Ptr(5)
	return Transaction_List{List: p.List()}, err
}

func (s Block) HasTransactions() bool {
	return s.Struct.HasPtr(5)
}

func (s Block) SetTransactions(v Transaction_List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewTransactions sets the transactions field to a newly
// allocated Transaction_List, preferring placement in s's segment.
func (s Block) NewTransactions(n int32) (Transaction_List, error) {
	l, err := NewTransaction_List(s.Struct.Segment(), n)
	if err != nil {
		return Transaction_List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

// Block_List is a list of Block.
type Block_List struct{ capnp.List }

// NewBlock creates a new list of Block.
func NewBlock_List(s *capnp.Segment, sz int32) (Block_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return Block_List{l}, err
}

func (s Block_List) At(i int) Block { return Block{s.List.Struct(i)} }

func (s Block_List) Set(i int, v Block) error { return s.List.SetStruct(i, v.Struct) }

func (s Block_List) String() string {
	str, _ := text.MarshalList(0xf8b832c3c252679d, s.List)
	return str
}

// Block_Future is a wrapper for a Block promised by a client call.
type Block_Future struct{ *capnp.Future }

func (p Block_Future) Struct() (Block, error) {
	s, err := p.Future.Struct()
	return Block{s}, err
}

func (p Block_Future) Header() BlockHeader_Future {
	return BlockHeader_Future{Future: p.Future.Field(1, nil)}
}

func (p Block_Future) ActiveData() koinos.Opaque_Future {
	return koinos.Opaque_Future{Future: p.Future.Field(2, nil)}
}

func (p Block_Future) PassiveData() koinos.Opaque_Future {
	return koinos.Opaque_Future{Future: p.Future.Field(3, nil)}
}

type BlockReceipt struct{ capnp.Struct }

// BlockReceipt_TypeID is the unique identifier for the type BlockReceipt.
const BlockReceipt_TypeID = 0xb38fcf154c2ca1c3

func NewBlockReceipt(s *capnp.Segment) (BlockReceipt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BlockReceipt{st}, err
}

func NewRootBlockReceipt(s *capnp.Segment) (BlockReceipt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BlockReceipt{st}, err
}

func ReadRootBlockReceipt(msg *capnp.Message) (BlockReceipt, error) {
	root, err := msg.Root()
	return BlockReceipt{root.Struct()}, err
}

func (s BlockReceipt) String() string {
	str, _ := text.Marshal(0xb38fcf154c2ca1c3, s.Struct)
	return str
}

// BlockReceipt_List is a list of BlockReceipt.
type BlockReceipt_List struct{ capnp.List }

// NewBlockReceipt creates a new list of BlockReceipt.
func NewBlockReceipt_List(s *capnp.Segment, sz int32) (BlockReceipt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return BlockReceipt_List{l}, err
}

func (s BlockReceipt_List) At(i int) BlockReceipt { return BlockReceipt{s.List.Struct(i)} }

func (s BlockReceipt_List) Set(i int, v BlockReceipt) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockReceipt_List) String() string {
	str, _ := text.MarshalList(0xb38fcf154c2ca1c3, s.List)
	return str
}

// BlockReceipt_Future is a wrapper for a BlockReceipt promised by a client call.
type BlockReceipt_Future struct{ *capnp.Future }

func (p BlockReceipt_Future) Struct() (BlockReceipt, error) {
	s, err := p.Future.Struct()
	return BlockReceipt{s}, err
}

const schema_8d5f75cd80edffd6 = "x\xda\x94V}l\x14\xd5\x16?\xe7\xde\x9d\xcen\xe9" +
	"\xbe\xee0}\xef\x01\xa1\x99\xa4\xe1=\x91\xd8\xf2Q\x12" +
	"\x81\x88\xdbB5\xb4R\xe9mKH\x1a\x88\x99n\xc7" +
	"v`wf;;[i\x05\x83$ \x1a\x89F\x8b" +
	"\xb1&$\x1a\xaaF\x03!\xc1\x8f\x90\x08\x09\x82F\xff" +
	"\x91\xc6D\x09~\xc4(\x86h\x8c&\xa8\xff\x00\xa1\x8c" +
	"\xb9\xb3\xf3\xe5\xd2\xb5\xd0\x7f\xdaN\xce\xdc\xf9}\x9ds" +
	"\xee\xb2\xc5\xb1\x16\xb2\\\xd8R\x0d\xc0v\x0aU\xce\xdc" +
	"\xe1\xa9+\xbf\xae\xfav\x1c\xd8\"Dg\xdb]\x8f\xaf" +
	"\xde\xfb\xcb\xf6I\xd8\x1c\x13\x91\x004K\xc2\x18\x02\xca" +
	"\xf5\xc2c\x80\xce\x7fVg\x17:\x87\x9a\x0e\x834\x0f" +
	"\x9d\x0b\xceo{>+>r\x10b\"@\xf3\xa8\xd0" +
	"\x81\xf2AA\x04\x1a\x9e\xc1\xe6a\xa4Lp\xebt\xa1" +
	"\x01\xe5QA\x04\x90\x8b\xc2O\x80\xce\xa9\xc9n\xe5\xfc" +
	"\xfd\xd7_\xe7\xd5$R\x8d\xbczmU\x03\xca\x9dU" +
	"\xbc\xba\xbd\xea8\xa0sq\xbe=\x7f\xff\xce\x96\xa3\xe5" +
	"g\xbb\xd5\x09q\x0c\xe5z\x91W\xcf\x179\xde\xff\xed" +
	"\x1e\xb9\xf7\xa9\xe7\xaf\xcf\\]\x14\xe7\xa2\xbc\xcf\xad~" +
	"RL\x03:\xe7^\xbbg\xe3\xbf\xa7\x9e{g\x06v" +
	"\xc7\xc4%(\x9f\x169\xbb\x9e'\x0e\x9d\xad?\xbf\xff" +
	"\xfd\xbfW\x09\x84\x97M\x88{Q>\xe6\x1e\xf9\x96\x0b" +
	"\xa0\xb7\x83\x1c1\x7f|\xe6l9\x00\xb7\xba1n\xa1" +
	"\xdc\x1a\xe7\xd5k\xe3.\xb9)\xed\xe1O\x9f\xbe\xf8\x15" +
	"\xb0\x06\x8c\x80\xdf\x8c\"\xc6\x00\x9a\xa7\xe3K\xb8\x15B" +
	"\x82\xcbv\xf1\xa1+\xcf\xce\xb9\xa0\x7f3\x03\xd8\xcb\x89" +
	"1\x94\xaf%8\xd8\x17r\x8f\xd6\xfcy`\xf2\xfb\x99" +
	"\xccEl\xfe2\xb1\x97\x9f\xf8C\x82c\xdd0~\xe9" +
	"\xc5\xfa/\x1e\xbc:\xa3Xk\xab-\x94Y5\xc7\xda" +
	"Y\xcd\xb1\x1e\x1e\xec>{n\xc5\xc9\xabe2\xb8V" +
	"MW\xff!'\xe6\xf0\xd7\x849[\x10\xd0\xe9\xfbx" +
	"\xfa\xc4T\xeb\xd7\xd7\xca\x8a)/\xf9\xbdf\x1d\xca\x98" +
	"t\xdf\xab9\x0eo8y\xcb\xb4\xcd\x8c\x99\x8d-\xf5" +
	"\xffj\xca\xa8y#\xbf\xa6\xd7R\x8d\x82\x9a\xb1u\xd3" +
	"h\xe2\xbf\xd2#Z\x9bj\xab,Nc\x0b\x1d\x07\xeb" +
	"\x10\x01\xa4\xbb\xd7\x00\xb0E\x14\xd92\x82\xf5x\x93?" +
	"&\x00R\xe3\x0a\x00\xb6\x98\"[I0m\xa8\xb6>" +
	"\xa2a*\xa4\x0c\x88)@\xa5\x7f\xd4\xd6\x0a\x98\x04\x82" +
	"I\xc0\xca@\xba\xd4BA\x1f\xd1\xd6e\xcd\xcc\x0e\x8e" +
	"\x00\xa0\x0b\xc3rZ\x09\xb7\xa8\x9bF\x17\"K\xd1\x18" +
	"@\x8c\x83U\x17H\xaa\xc2vQd\x07\x08\xf2\x9f\xb0" +
	"\x1b\xa5}}@\xb8I\xa1\x87\xd2p?\x10\x89\xd2:" +
	"\x14\x00\xa4m\x16\x00\xdbJ\x91\x0d\x11\xa4\xfa\x00\x8b!" +
	"q\xde\xfb\xe4r\xf5\xd2K\xea\x15`1\x82\xad5\x08" +
	"4 \xc3\x05\xe3z\x01\xb5U'_\"\xd0\x06\xa2j" +
	"\xabNA\x1f4T\xbbh\x81\xe2\xeay\x0b\xff[\x08" +
	"\xb9\xc47h\xaa8\xa0Y\x9cPM@\xe8\x81\x0e\xa9" +
	"]a\x03\x14Y\x9e\x13*Y\x92\xe3\x96\x0cQd6" +
	"A\x89x\x86\x0cw\x03\xb0<E\xb6\x8b\xf0/i#" +
	"\xbaY,\x00\xc0,<\xd2C\x9a>8dc\x02\x08" +
	"&\x00\x1d[\xcfi\x05[\xcd\x01\xe6\x83g\x15}\xeb" +
	"\xd1\xec\x9e\xd1\x82\xad\xe5\xd6\xab\xd9\xec\xa6\xbc\x96\xb6T" +
	"\xdb\xf3$\x1eP\x88\x06\xc8g\xd0\xb8&\x92\x9e\x8c\x9a" +
	"\xcd\xb6\xb7a\x1c\x08\xc6\x01\xd3\xb6j\x0dj6\xa6\x9c" +
	"\xb7\x8f|w\xf4r|\xe9)/L\x95\xe5\xdb\x94\xd7" +
	"\xdc\x0f\xa3\xfb\xe5\x18\xff2F\x9a_J.\x90\x92\x0a" +
	" 5\xf3\xae\x18\xfd\xf8\xca\xe7?\x8f\xbf9U\x12\xa3" +
	"\x8e\x1f\x0e-\x04\xc8,\xfetk\x99ZM\xcf\xdb\xd1" +
	"h\x0a\xe5\x95\x9b\xf3YS\x1dXo\x1a\xb6\xa5fl" +
	"\x1f\x98\x01e\x92\xf4I\x8d\x0a\xdb@\x91\xf5\x12\x94|" +
	"QX\x07\x00\xeb\xa2\xc8\xb6\x12t2\xde\x11@\xdb\xdb" +
	"f\x8b\"\xef\xb2\x8c9\xa0\x01\xc0\xec\xbd\xc6\xad\x8a\xe2" +
	"S\x02\xcb\"\xa9\xeb\x9b)u}\x00,K\x91\xed\x8c" +
	"\xa4\xae\xb8$\x92\xba;\xc1\xac\x19\xb65\xdae\xea@" +
	"\x0d\xdb\xb7\xbeV\xb5\x06\x0b\xb3w\x8b\xafj\xad\xd1d" +
	"\xe6y\xf3\xd78N\xa9\xfb\x1b\xc2\x0eN\xe2M\xa7\x84" +
	"[\x1b\x03\xf0\xb9$\xc9\xb4S\x02\x9e\xdb\x1e\xb2I\xd2" +
	"\x1bN\x1dRN\x87\xcf\x00\x9b\"\xdbCP4\xcc<" +
	"T9E\xcfQH\x97\xc8a*\xdcX^03\x9e" +
	"\xa4P\xeb\x15\x04[\xca+(x}\x02\x8a\xdb)\x98" +
	"\x0a\xd7nY\xb6+\x8d\xc6`T\xa7M\x83\xcf\x94\x7f" +
	"\x0cat\xae\xfb\x93\x89OUo\xb0\x93\x12\xd7\xf2\xc1" +
	"N\xea\xf8R\xac0\xd8\x83\xedxg\x83\xbd\xd5\x1d\x92" +
	"!\x1e\xc5\x07\x1f\x0d\x1b\xd7\xbc\x8d\"\xeb\x0a\xb3\xd6\xc9" +
	"Ax\xfd\x81\xa4\xe4\x18\xeb\xf3\xda#K\xd0\xb1\xb4\x82" +
	"Y\xb42\x1a(\x1b\xf5\x9cnC\x95b\x98FF\x0b" +
	"F\x96\xe9e\x04\xa8Q\xc0\x7f\x01vQ\xc4Tx\x03" +
	"\x00\xe4\x0f\x03\xdc\xa4\x1c\xb7\xe2v<\xc79/\xc09" +
	"\xb1@\x9aP\xd8\xbb\x14\xd9\x99H\xd3\x9e\xe6*\x9e\xa4" +
	"\xc8>\xe2]\xe1A\xfd\x90C=C\x91\xdd \xe8\xee" +
	"\x17\xae\xf7\xb5~\x00v\x95b\xcfJ$(\xc5b\xae" +
	"\xdc\xf2r\xb4\x00z\x96!\xc5\x9e\xfb\xf8sAp\xb7" +
	"\x91\xbc\x1a\xb7\x03\xf4\xac\xe2\xcf{\xf1v\x16RzH" +
	"S\x074\x0bS\xe1\x05\xd0\xcbVtSa\xca\xb9\xfe" +
	"\xd2\xff\xcd\x91\x0fvO\x00@\x0bJ\xa8\xf0\x93\xa2\x0f" +
	"%\xfc/\x8b\xf1\xddY\xd2,\xb8j\xf8I\x8d\xae\xba" +
	";?.\xb8\xf1\xfa\xadQaW\xda^f\xa0V7" +
	"\xa3\x16\x06W\xae2\x0b+D/\xbcR\x94\x85\xee\x84" +
	"\xd4\xa9\x04;\xd47s\xf8\x844\xaa\xb0q\x8a\xec\xd5" +
	"\x88\x9b\x87\xb9\xc5/Sd\x93$\xc4\x85\xbaitj" +
	"\xd6\x8e\xac\xa2u\x9b\xa6=\xdb\xb8\xf3UC\xd5Vo" +
	"\xff\xb54WG\xb3\xfc\x7f\xff\x0a\x00\x00\xff\xff\x18\x86" +
	"z\x94"

func init() {
	schemas.Register(schema_8d5f75cd80edffd6,
		0x94dc38ecf0cf7112,
		0x9d2e95ff1c6c3916,
		0xa46aea82397b275d,
		0xa5fa3ece1f52a4bc,
		0xac407886197419d8,
		0xacfa908737767d25,
		0xb38fcf154c2ca1c3,
		0xb686ce1dc2957e53,
		0xc28ae36fa3024a54,
		0xd9d889c84e65cfd8,
		0xdb69d60b8cf04bd8,
		0xe0a488f30c666d92,
		0xf846d41d93e29448,
		0xf8b832c3c252679d,
		0xf9da41cfb2fdc55a)
}
