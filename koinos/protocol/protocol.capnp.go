// Code generated by capnpc-go. DO NOT EDIT.

package protocol

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	koinos "koinos"
	strconv "strconv"
)

type UploadContractOperation struct{ capnp.Struct }

// UploadContractOperation_TypeID is the unique identifier for the type UploadContractOperation.
const UploadContractOperation_TypeID = 0xb686ce1dc2957e53

func NewUploadContractOperation(s *capnp.Segment) (UploadContractOperation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UploadContractOperation{st}, err
}

func NewRootUploadContractOperation(s *capnp.Segment) (UploadContractOperation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return UploadContractOperation{st}, err
}

func ReadRootUploadContractOperation(msg *capnp.Message) (UploadContractOperation, error) {
	root, err := msg.Root()
	return UploadContractOperation{root.Struct()}, err
}

func (s UploadContractOperation) String() string {
	str, _ := text.Marshal(0xb686ce1dc2957e53, s.Struct)
	return str
}

func (s UploadContractOperation) ContractID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s UploadContractOperation) HasContractID() bool {
	return s.Struct.HasPtr(0)
}

func (s UploadContractOperation) SetContractID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s UploadContractOperation) Bytecode() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s UploadContractOperation) HasBytecode() bool {
	return s.Struct.HasPtr(1)
}

func (s UploadContractOperation) SetBytecode(v []byte) error {
	return s.Struct.SetData(1, v)
}

// UploadContractOperation_List is a list of UploadContractOperation.
type UploadContractOperation_List struct{ capnp.List }

// NewUploadContractOperation creates a new list of UploadContractOperation.
func NewUploadContractOperation_List(s *capnp.Segment, sz int32) (UploadContractOperation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return UploadContractOperation_List{l}, err
}

func (s UploadContractOperation_List) At(i int) UploadContractOperation {
	return UploadContractOperation{s.List.Struct(i)}
}

func (s UploadContractOperation_List) Set(i int, v UploadContractOperation) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s UploadContractOperation_List) String() string {
	str, _ := text.MarshalList(0xb686ce1dc2957e53, s.List)
	return str
}

// UploadContractOperation_Future is a wrapper for a UploadContractOperation promised by a client call.
type UploadContractOperation_Future struct{ *capnp.Future }

func (p UploadContractOperation_Future) Struct() (UploadContractOperation, error) {
	s, err := p.Future.Struct()
	return UploadContractOperation{s}, err
}

type CallContractOperation struct{ capnp.Struct }

// CallContractOperation_TypeID is the unique identifier for the type CallContractOperation.
const CallContractOperation_TypeID = 0xc28ae36fa3024a54

func NewCallContractOperation(s *capnp.Segment) (CallContractOperation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CallContractOperation{st}, err
}

func NewRootCallContractOperation(s *capnp.Segment) (CallContractOperation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return CallContractOperation{st}, err
}

func ReadRootCallContractOperation(msg *capnp.Message) (CallContractOperation, error) {
	root, err := msg.Root()
	return CallContractOperation{root.Struct()}, err
}

func (s CallContractOperation) String() string {
	str, _ := text.Marshal(0xc28ae36fa3024a54, s.Struct)
	return str
}

func (s CallContractOperation) ContractID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CallContractOperation) HasContractID() bool {
	return s.Struct.HasPtr(0)
}

func (s CallContractOperation) SetContractID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s CallContractOperation) EntryPoint() uint32 {
	return s.Struct.Uint32(0)
}

func (s CallContractOperation) SetEntryPoint(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s CallContractOperation) Args() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s CallContractOperation) HasArgs() bool {
	return s.Struct.HasPtr(1)
}

func (s CallContractOperation) SetArgs(v []byte) error {
	return s.Struct.SetData(1, v)
}

// CallContractOperation_List is a list of CallContractOperation.
type CallContractOperation_List struct{ capnp.List }

// NewCallContractOperation creates a new list of CallContractOperation.
func NewCallContractOperation_List(s *capnp.Segment, sz int32) (CallContractOperation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return CallContractOperation_List{l}, err
}

func (s CallContractOperation_List) At(i int) CallContractOperation {
	return CallContractOperation{s.List.Struct(i)}
}

func (s CallContractOperation_List) Set(i int, v CallContractOperation) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s CallContractOperation_List) String() string {
	str, _ := text.MarshalList(0xc28ae36fa3024a54, s.List)
	return str
}

// CallContractOperation_Future is a wrapper for a CallContractOperation promised by a client call.
type CallContractOperation_Future struct{ *capnp.Future }

func (p CallContractOperation_Future) Struct() (CallContractOperation, error) {
	s, err := p.Future.Struct()
	return CallContractOperation{s}, err
}

type SetSystemCallOperation struct{ capnp.Struct }

// SetSystemCallOperation_TypeID is the unique identifier for the type SetSystemCallOperation.
const SetSystemCallOperation_TypeID = 0xac407886197419d8

func NewSetSystemCallOperation(s *capnp.Segment) (SetSystemCallOperation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SetSystemCallOperation{st}, err
}

func NewRootSetSystemCallOperation(s *capnp.Segment) (SetSystemCallOperation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SetSystemCallOperation{st}, err
}

func ReadRootSetSystemCallOperation(msg *capnp.Message) (SetSystemCallOperation, error) {
	root, err := msg.Root()
	return SetSystemCallOperation{root.Struct()}, err
}

func (s SetSystemCallOperation) String() string {
	str, _ := text.Marshal(0xac407886197419d8, s.Struct)
	return str
}

func (s SetSystemCallOperation) CallID() uint32 {
	return s.Struct.Uint32(0)
}

func (s SetSystemCallOperation) SetCallID(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s SetSystemCallOperation) Target() (koinos.SystemCallTarget, error) {
	p, err := s.Struct.Ptr(0)
	return koinos.SystemCallTarget{Struct: p.Struct()}, err
}

func (s SetSystemCallOperation) HasTarget() bool {
	return s.Struct.HasPtr(0)
}

func (s SetSystemCallOperation) SetTarget(v koinos.SystemCallTarget) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTarget sets the target field to a newly
// allocated koinos.SystemCallTarget struct, preferring placement in s's segment.
func (s SetSystemCallOperation) NewTarget() (koinos.SystemCallTarget, error) {
	ss, err := koinos.NewSystemCallTarget(s.Struct.Segment())
	if err != nil {
		return koinos.SystemCallTarget{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// SetSystemCallOperation_List is a list of SetSystemCallOperation.
type SetSystemCallOperation_List struct{ capnp.List }

// NewSetSystemCallOperation creates a new list of SetSystemCallOperation.
func NewSetSystemCallOperation_List(s *capnp.Segment, sz int32) (SetSystemCallOperation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SetSystemCallOperation_List{l}, err
}

func (s SetSystemCallOperation_List) At(i int) SetSystemCallOperation {
	return SetSystemCallOperation{s.List.Struct(i)}
}

func (s SetSystemCallOperation_List) Set(i int, v SetSystemCallOperation) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SetSystemCallOperation_List) String() string {
	str, _ := text.MarshalList(0xac407886197419d8, s.List)
	return str
}

// SetSystemCallOperation_Future is a wrapper for a SetSystemCallOperation promised by a client call.
type SetSystemCallOperation_Future struct{ *capnp.Future }

func (p SetSystemCallOperation_Future) Struct() (SetSystemCallOperation, error) {
	s, err := p.Future.Struct()
	return SetSystemCallOperation{s}, err
}

func (p SetSystemCallOperation_Future) Target() koinos.SystemCallTarget_Future {
	return koinos.SystemCallTarget_Future{Future: p.Future.Field(0, nil)}
}

type Operation struct{ capnp.Struct }
type Operation_op Operation
type Operation_op_Which uint16

const (
	Operation_op_Which_nop            Operation_op_Which = 0
	Operation_op_Which_uploadContract Operation_op_Which = 1
	Operation_op_Which_callContract   Operation_op_Which = 2
	Operation_op_Which_setSystemCall  Operation_op_Which = 3
)

func (w Operation_op_Which) String() string {
	const s = "nopuploadContractcallContractsetSystemCall"
	switch w {
	case Operation_op_Which_nop:
		return s[0:3]
	case Operation_op_Which_uploadContract:
		return s[3:17]
	case Operation_op_Which_callContract:
		return s[17:29]
	case Operation_op_Which_setSystemCall:
		return s[29:42]

	}
	return "Operation_op_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Operation_TypeID is the unique identifier for the type Operation.
const Operation_TypeID = 0xacfa908737767d25

func NewOperation(s *capnp.Segment) (Operation, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Operation{st}, err
}

func NewRootOperation(s *capnp.Segment) (Operation, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Operation{st}, err
}

func ReadRootOperation(msg *capnp.Message) (Operation, error) {
	root, err := msg.Root()
	return Operation{root.Struct()}, err
}

func (s Operation) String() string {
	str, _ := text.Marshal(0xacfa908737767d25, s.Struct)
	return str
}

func (s Operation) Op() Operation_op { return Operation_op(s) }

func (s Operation_op) Which() Operation_op_Which {
	return Operation_op_Which(s.Struct.Uint16(0))
}
func (s Operation_op) SetNop() {
	s.Struct.SetUint16(0, 0)

}

func (s Operation_op) UploadContract() (UploadContractOperation, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != uploadContract")
	}
	p, err := s.Struct.Ptr(0)
	return UploadContractOperation{Struct: p.Struct()}, err
}

func (s Operation_op) HasUploadContract() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Operation_op) SetUploadContract(v UploadContractOperation) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewUploadContract sets the uploadContract field to a newly
// allocated UploadContractOperation struct, preferring placement in s's segment.
func (s Operation_op) NewUploadContract() (UploadContractOperation, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewUploadContractOperation(s.Struct.Segment())
	if err != nil {
		return UploadContractOperation{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Operation_op) CallContract() (CallContractOperation, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != callContract")
	}
	p, err := s.Struct.Ptr(0)
	return CallContractOperation{Struct: p.Struct()}, err
}

func (s Operation_op) HasCallContract() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Operation_op) SetCallContract(v CallContractOperation) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCallContract sets the callContract field to a newly
// allocated CallContractOperation struct, preferring placement in s's segment.
func (s Operation_op) NewCallContract() (CallContractOperation, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewCallContractOperation(s.Struct.Segment())
	if err != nil {
		return CallContractOperation{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Operation_op) SetSystemCall() (SetSystemCallOperation, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != setSystemCall")
	}
	p, err := s.Struct.Ptr(0)
	return SetSystemCallOperation{Struct: p.Struct()}, err
}

func (s Operation_op) HasSetSystemCall() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	return s.Struct.HasPtr(0)
}

func (s Operation_op) SetSetSystemCall(v SetSystemCallOperation) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSetSystemCall sets the setSystemCall field to a newly
// allocated SetSystemCallOperation struct, preferring placement in s's segment.
func (s Operation_op) NewSetSystemCall() (SetSystemCallOperation, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewSetSystemCallOperation(s.Struct.Segment())
	if err != nil {
		return SetSystemCallOperation{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Operation_List is a list of Operation.
type Operation_List struct{ capnp.List }

// NewOperation creates a new list of Operation.
func NewOperation_List(s *capnp.Segment, sz int32) (Operation_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Operation_List{l}, err
}

func (s Operation_List) At(i int) Operation { return Operation{s.List.Struct(i)} }

func (s Operation_List) Set(i int, v Operation) error { return s.List.SetStruct(i, v.Struct) }

func (s Operation_List) String() string {
	str, _ := text.MarshalList(0xacfa908737767d25, s.List)
	return str
}

// Operation_Future is a wrapper for a Operation promised by a client call.
type Operation_Future struct{ *capnp.Future }

func (p Operation_Future) Struct() (Operation, error) {
	s, err := p.Future.Struct()
	return Operation{s}, err
}

func (p Operation_Future) Op() Operation_op_Future { return Operation_op_Future{p.Future} }

// Operation_op_Future is a wrapper for a Operation_op promised by a client call.
type Operation_op_Future struct{ *capnp.Future }

func (p Operation_op_Future) Struct() (Operation_op, error) {
	s, err := p.Future.Struct()
	return Operation_op{s}, err
}

func (p Operation_op_Future) UploadContract() UploadContractOperation_Future {
	return UploadContractOperation_Future{Future: p.Future.Field(0, nil)}
}

func (p Operation_op_Future) CallContract() CallContractOperation_Future {
	return CallContractOperation_Future{Future: p.Future.Field(0, nil)}
}

func (p Operation_op_Future) SetSystemCall() SetSystemCallOperation_Future {
	return SetSystemCallOperation_Future{Future: p.Future.Field(0, nil)}
}

type ActiveTransactionData struct{ capnp.Struct }

// ActiveTransactionData_TypeID is the unique identifier for the type ActiveTransactionData.
const ActiveTransactionData_TypeID = 0xf846d41d93e29448

func NewActiveTransactionData(s *capnp.Segment) (ActiveTransactionData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ActiveTransactionData{st}, err
}

func NewRootActiveTransactionData(s *capnp.Segment) (ActiveTransactionData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ActiveTransactionData{st}, err
}

func ReadRootActiveTransactionData(msg *capnp.Message) (ActiveTransactionData, error) {
	root, err := msg.Root()
	return ActiveTransactionData{root.Struct()}, err
}

func (s ActiveTransactionData) String() string {
	str, _ := text.Marshal(0xf846d41d93e29448, s.Struct)
	return str
}

func (s ActiveTransactionData) Nonce() uint64 {
	return s.Struct.Uint64(0)
}

func (s ActiveTransactionData) SetNonce(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ActiveTransactionData) Operations() (Operation_List, error) {
	p, err := s.Struct.Ptr(0)
	return Operation_List{List: p.List()}, err
}

func (s ActiveTransactionData) HasOperations() bool {
	return s.Struct.HasPtr(0)
}

func (s ActiveTransactionData) SetOperations(v Operation_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewOperations sets the operations field to a newly
// allocated Operation_List, preferring placement in s's segment.
func (s ActiveTransactionData) NewOperations(n int32) (Operation_List, error) {
	l, err := NewOperation_List(s.Struct.Segment(), n)
	if err != nil {
		return Operation_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ActiveTransactionData_List is a list of ActiveTransactionData.
type ActiveTransactionData_List struct{ capnp.List }

// NewActiveTransactionData creates a new list of ActiveTransactionData.
func NewActiveTransactionData_List(s *capnp.Segment, sz int32) (ActiveTransactionData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ActiveTransactionData_List{l}, err
}

func (s ActiveTransactionData_List) At(i int) ActiveTransactionData {
	return ActiveTransactionData{s.List.Struct(i)}
}

func (s ActiveTransactionData_List) Set(i int, v ActiveTransactionData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ActiveTransactionData_List) String() string {
	str, _ := text.MarshalList(0xf846d41d93e29448, s.List)
	return str
}

// ActiveTransactionData_Future is a wrapper for a ActiveTransactionData promised by a client call.
type ActiveTransactionData_Future struct{ *capnp.Future }

func (p ActiveTransactionData_Future) Struct() (ActiveTransactionData, error) {
	s, err := p.Future.Struct()
	return ActiveTransactionData{s}, err
}

type PassiveTransactionData struct{ capnp.Struct }

// PassiveTransactionData_TypeID is the unique identifier for the type PassiveTransactionData.
const PassiveTransactionData_TypeID = 0xdb69d60b8cf04bd8

func NewPassiveTransactionData(s *capnp.Segment) (PassiveTransactionData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PassiveTransactionData{st}, err
}

func NewRootPassiveTransactionData(s *capnp.Segment) (PassiveTransactionData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PassiveTransactionData{st}, err
}

func ReadRootPassiveTransactionData(msg *capnp.Message) (PassiveTransactionData, error) {
	root, err := msg.Root()
	return PassiveTransactionData{root.Struct()}, err
}

func (s PassiveTransactionData) String() string {
	str, _ := text.Marshal(0xdb69d60b8cf04bd8, s.Struct)
	return str
}

// PassiveTransactionData_List is a list of PassiveTransactionData.
type PassiveTransactionData_List struct{ capnp.List }

// NewPassiveTransactionData creates a new list of PassiveTransactionData.
func NewPassiveTransactionData_List(s *capnp.Segment, sz int32) (PassiveTransactionData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return PassiveTransactionData_List{l}, err
}

func (s PassiveTransactionData_List) At(i int) PassiveTransactionData {
	return PassiveTransactionData{s.List.Struct(i)}
}

func (s PassiveTransactionData_List) Set(i int, v PassiveTransactionData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PassiveTransactionData_List) String() string {
	str, _ := text.MarshalList(0xdb69d60b8cf04bd8, s.List)
	return str
}

// PassiveTransactionData_Future is a wrapper for a PassiveTransactionData promised by a client call.
type PassiveTransactionData_Future struct{ *capnp.Future }

func (p PassiveTransactionData_Future) Struct() (PassiveTransactionData, error) {
	s, err := p.Future.Struct()
	return PassiveTransactionData{s}, err
}

type Transaction struct{ capnp.Struct }
type Transaction_activeData Transaction
type Transaction_passiveData Transaction
type Transaction_activeData_Which uint16

const (
	Transaction_activeData_Which_native Transaction_activeData_Which = 0
	Transaction_activeData_Which_bytes  Transaction_activeData_Which = 1
)

func (w Transaction_activeData_Which) String() string {
	const s = "nativebytes"
	switch w {
	case Transaction_activeData_Which_native:
		return s[0:6]
	case Transaction_activeData_Which_bytes:
		return s[6:11]

	}
	return "Transaction_activeData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

type Transaction_passiveData_Which uint16

const (
	Transaction_passiveData_Which_native Transaction_passiveData_Which = 0
	Transaction_passiveData_Which_bytes  Transaction_passiveData_Which = 1
)

func (w Transaction_passiveData_Which) String() string {
	const s = "nativebytes"
	switch w {
	case Transaction_passiveData_Which_native:
		return s[0:6]
	case Transaction_passiveData_Which_bytes:
		return s[6:11]

	}
	return "Transaction_passiveData_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Transaction_TypeID is the unique identifier for the type Transaction.
const Transaction_TypeID = 0xa46aea82397b275d

func NewTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Transaction{st}, err
}

func NewRootTransaction(s *capnp.Segment) (Transaction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Transaction{st}, err
}

func ReadRootTransaction(msg *capnp.Message) (Transaction, error) {
	root, err := msg.Root()
	return Transaction{root.Struct()}, err
}

func (s Transaction) String() string {
	str, _ := text.Marshal(0xa46aea82397b275d, s.Struct)
	return str
}

func (s Transaction) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Transaction) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s Transaction) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Transaction) ActiveData() Transaction_activeData { return Transaction_activeData(s) }

func (s Transaction_activeData) Which() Transaction_activeData_Which {
	return Transaction_activeData_Which(s.Struct.Uint16(0))
}
func (s Transaction_activeData) Native() (ActiveTransactionData, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != native")
	}
	p, err := s.Struct.Ptr(1)
	return ActiveTransactionData{Struct: p.Struct()}, err
}

func (s Transaction_activeData) HasNative() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	return s.Struct.HasPtr(1)
}

func (s Transaction_activeData) SetNative(v ActiveTransactionData) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewNative sets the native field to a newly
// allocated ActiveTransactionData struct, preferring placement in s's segment.
func (s Transaction_activeData) NewNative() (ActiveTransactionData, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewActiveTransactionData(s.Struct.Segment())
	if err != nil {
		return ActiveTransactionData{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Transaction_activeData) Bytes() ([]byte, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != bytes")
	}
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s Transaction_activeData) HasBytes() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	return s.Struct.HasPtr(1)
}

func (s Transaction_activeData) SetBytes(v []byte) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetData(1, v)
}

func (s Transaction) PassiveData() Transaction_passiveData { return Transaction_passiveData(s) }

func (s Transaction_passiveData) Which() Transaction_passiveData_Which {
	return Transaction_passiveData_Which(s.Struct.Uint16(2))
}
func (s Transaction_passiveData) Native() (PassiveTransactionData, error) {
	if s.Struct.Uint16(2) != 0 {
		panic("Which() != native")
	}
	p, err := s.Struct.Ptr(2)
	return PassiveTransactionData{Struct: p.Struct()}, err
}

func (s Transaction_passiveData) HasNative() bool {
	if s.Struct.Uint16(2) != 0 {
		return false
	}
	return s.Struct.HasPtr(2)
}

func (s Transaction_passiveData) SetNative(v PassiveTransactionData) error {
	s.Struct.SetUint16(2, 0)
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewNative sets the native field to a newly
// allocated PassiveTransactionData struct, preferring placement in s's segment.
func (s Transaction_passiveData) NewNative() (PassiveTransactionData, error) {
	s.Struct.SetUint16(2, 0)
	ss, err := NewPassiveTransactionData(s.Struct.Segment())
	if err != nil {
		return PassiveTransactionData{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Transaction_passiveData) Bytes() ([]byte, error) {
	if s.Struct.Uint16(2) != 1 {
		panic("Which() != bytes")
	}
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Transaction_passiveData) HasBytes() bool {
	if s.Struct.Uint16(2) != 1 {
		return false
	}
	return s.Struct.HasPtr(2)
}

func (s Transaction_passiveData) SetBytes(v []byte) error {
	s.Struct.SetUint16(2, 1)
	return s.Struct.SetData(2, v)
}

func (s Transaction) SignatureData() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return []byte(p.Data()), err
}

func (s Transaction) HasSignatureData() bool {
	return s.Struct.HasPtr(3)
}

func (s Transaction) SetSignatureData(v []byte) error {
	return s.Struct.SetData(3, v)
}

// Transaction_List is a list of Transaction.
type Transaction_List struct{ capnp.List }

// NewTransaction creates a new list of Transaction.
func NewTransaction_List(s *capnp.Segment, sz int32) (Transaction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return Transaction_List{l}, err
}

func (s Transaction_List) At(i int) Transaction { return Transaction{s.List.Struct(i)} }

func (s Transaction_List) Set(i int, v Transaction) error { return s.List.SetStruct(i, v.Struct) }

func (s Transaction_List) String() string {
	str, _ := text.MarshalList(0xa46aea82397b275d, s.List)
	return str
}

// Transaction_Future is a wrapper for a Transaction promised by a client call.
type Transaction_Future struct{ *capnp.Future }

func (p Transaction_Future) Struct() (Transaction, error) {
	s, err := p.Future.Struct()
	return Transaction{s}, err
}

func (p Transaction_Future) ActiveData() Transaction_activeData_Future {
	return Transaction_activeData_Future{p.Future}
}

// Transaction_activeData_Future is a wrapper for a Transaction_activeData promised by a client call.
type Transaction_activeData_Future struct{ *capnp.Future }

func (p Transaction_activeData_Future) Struct() (Transaction_activeData, error) {
	s, err := p.Future.Struct()
	return Transaction_activeData{s}, err
}

func (p Transaction_activeData_Future) Native() ActiveTransactionData_Future {
	return ActiveTransactionData_Future{Future: p.Future.Field(1, nil)}
}

func (p Transaction_Future) PassiveData() Transaction_passiveData_Future {
	return Transaction_passiveData_Future{p.Future}
}

// Transaction_passiveData_Future is a wrapper for a Transaction_passiveData promised by a client call.
type Transaction_passiveData_Future struct{ *capnp.Future }

func (p Transaction_passiveData_Future) Struct() (Transaction_passiveData, error) {
	s, err := p.Future.Struct()
	return Transaction_passiveData{s}, err
}

func (p Transaction_passiveData_Future) Native() PassiveTransactionData_Future {
	return PassiveTransactionData_Future{Future: p.Future.Field(2, nil)}
}

type ActiveBlockData struct{ capnp.Struct }

// ActiveBlockData_TypeID is the unique identifier for the type ActiveBlockData.
const ActiveBlockData_TypeID = 0xf9da41cfb2fdc55a

func NewActiveBlockData(s *capnp.Segment) (ActiveBlockData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ActiveBlockData{st}, err
}

func NewRootActiveBlockData(s *capnp.Segment) (ActiveBlockData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ActiveBlockData{st}, err
}

func ReadRootActiveBlockData(msg *capnp.Message) (ActiveBlockData, error) {
	root, err := msg.Root()
	return ActiveBlockData{root.Struct()}, err
}

func (s ActiveBlockData) String() string {
	str, _ := text.Marshal(0xf9da41cfb2fdc55a, s.Struct)
	return str
}

func (s ActiveBlockData) TransactionMerkleRoot() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s ActiveBlockData) HasTransactionMerkleRoot() bool {
	return s.Struct.HasPtr(0)
}

func (s ActiveBlockData) SetTransactionMerkleRoot(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s ActiveBlockData) PassiveDataMerkleRoot() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s ActiveBlockData) HasPassiveDataMerkleRoot() bool {
	return s.Struct.HasPtr(1)
}

func (s ActiveBlockData) SetPassiveDataMerkleRoot(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s ActiveBlockData) Signer() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s ActiveBlockData) HasSigner() bool {
	return s.Struct.HasPtr(2)
}

func (s ActiveBlockData) SetSigner(v []byte) error {
	return s.Struct.SetData(2, v)
}

// ActiveBlockData_List is a list of ActiveBlockData.
type ActiveBlockData_List struct{ capnp.List }

// NewActiveBlockData creates a new list of ActiveBlockData.
func NewActiveBlockData_List(s *capnp.Segment, sz int32) (ActiveBlockData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return ActiveBlockData_List{l}, err
}

func (s ActiveBlockData_List) At(i int) ActiveBlockData { return ActiveBlockData{s.List.Struct(i)} }

func (s ActiveBlockData_List) Set(i int, v ActiveBlockData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ActiveBlockData_List) String() string {
	str, _ := text.MarshalList(0xf9da41cfb2fdc55a, s.List)
	return str
}

// ActiveBlockData_Future is a wrapper for a ActiveBlockData promised by a client call.
type ActiveBlockData_Future struct{ *capnp.Future }

func (p ActiveBlockData_Future) Struct() (ActiveBlockData, error) {
	s, err := p.Future.Struct()
	return ActiveBlockData{s}, err
}

type PassiveBlockData struct{ capnp.Struct }

// PassiveBlockData_TypeID is the unique identifier for the type PassiveBlockData.
const PassiveBlockData_TypeID = 0x9d2e95ff1c6c3916

func NewPassiveBlockData(s *capnp.Segment) (PassiveBlockData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PassiveBlockData{st}, err
}

func NewRootPassiveBlockData(s *capnp.Segment) (PassiveBlockData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PassiveBlockData{st}, err
}

func ReadRootPassiveBlockData(msg *capnp.Message) (PassiveBlockData, error) {
	root, err := msg.Root()
	return PassiveBlockData{root.Struct()}, err
}

func (s PassiveBlockData) String() string {
	str, _ := text.Marshal(0x9d2e95ff1c6c3916, s.Struct)
	return str
}

// PassiveBlockData_List is a list of PassiveBlockData.
type PassiveBlockData_List struct{ capnp.List }

// NewPassiveBlockData creates a new list of PassiveBlockData.
func NewPassiveBlockData_List(s *capnp.Segment, sz int32) (PassiveBlockData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return PassiveBlockData_List{l}, err
}

func (s PassiveBlockData_List) At(i int) PassiveBlockData { return PassiveBlockData{s.List.Struct(i)} }

func (s PassiveBlockData_List) Set(i int, v PassiveBlockData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s PassiveBlockData_List) String() string {
	str, _ := text.MarshalList(0x9d2e95ff1c6c3916, s.List)
	return str
}

// PassiveBlockData_Future is a wrapper for a PassiveBlockData promised by a client call.
type PassiveBlockData_Future struct{ *capnp.Future }

func (p PassiveBlockData_Future) Struct() (PassiveBlockData, error) {
	s, err := p.Future.Struct()
	return PassiveBlockData{s}, err
}

type BlockHeader struct{ capnp.Struct }

// BlockHeader_TypeID is the unique identifier for the type BlockHeader.
const BlockHeader_TypeID = 0xa5fa3ece1f52a4bc

func NewBlockHeader(s *capnp.Segment) (BlockHeader, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return BlockHeader{st}, err
}

func NewRootBlockHeader(s *capnp.Segment) (BlockHeader, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return BlockHeader{st}, err
}

func ReadRootBlockHeader(msg *capnp.Message) (BlockHeader, error) {
	root, err := msg.Root()
	return BlockHeader{root.Struct()}, err
}

func (s BlockHeader) String() string {
	str, _ := text.Marshal(0xa5fa3ece1f52a4bc, s.Struct)
	return str
}

func (s BlockHeader) Previous() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockHeader) HasPrevious() bool {
	return s.Struct.HasPtr(0)
}

func (s BlockHeader) SetPrevious(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockHeader) Height() uint32 {
	return s.Struct.Uint32(0)
}

func (s BlockHeader) SetHeight(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s BlockHeader) Timestamp() uint64 {
	return s.Struct.Uint64(8)
}

func (s BlockHeader) SetTimestamp(v uint64) {
	s.Struct.SetUint64(8, v)
}

// BlockHeader_List is a list of BlockHeader.
type BlockHeader_List struct{ capnp.List }

// NewBlockHeader creates a new list of BlockHeader.
func NewBlockHeader_List(s *capnp.Segment, sz int32) (BlockHeader_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return BlockHeader_List{l}, err
}

func (s BlockHeader_List) At(i int) BlockHeader { return BlockHeader{s.List.Struct(i)} }

func (s BlockHeader_List) Set(i int, v BlockHeader) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockHeader_List) String() string {
	str, _ := text.MarshalList(0xa5fa3ece1f52a4bc, s.List)
	return str
}

// BlockHeader_Future is a wrapper for a BlockHeader promised by a client call.
type BlockHeader_Future struct{ *capnp.Future }

func (p BlockHeader_Future) Struct() (BlockHeader, error) {
	s, err := p.Future.Struct()
	return BlockHeader{s}, err
}

type Block struct{ capnp.Struct }

// Block_TypeID is the unique identifier for the type Block.
const Block_TypeID = 0xf8b832c3c252679d

func NewBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Block{st}, err
}

func NewRootBlock(s *capnp.Segment) (Block, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Block{st}, err
}

func ReadRootBlock(msg *capnp.Message) (Block, error) {
	root, err := msg.Root()
	return Block{root.Struct()}, err
}

func (s Block) String() string {
	str, _ := text.Marshal(0xf8b832c3c252679d, s.Struct)
	return str
}

func (s Block) Id() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Block) HasId() bool {
	return s.Struct.HasPtr(0)
}

func (s Block) SetId(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s Block) Header() (BlockHeader, error) {
	p, err := s.Struct.Ptr(1)
	return BlockHeader{Struct: p.Struct()}, err
}

func (s Block) HasHeader() bool {
	return s.Struct.HasPtr(1)
}

func (s Block) SetHeader(v BlockHeader) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewHeader sets the header field to a newly
// allocated BlockHeader struct, preferring placement in s's segment.
func (s Block) NewHeader() (BlockHeader, error) {
	ss, err := NewBlockHeader(s.Struct.Segment())
	if err != nil {
		return BlockHeader{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) ActiveData() (koinos.Opaque, error) {
	p, err := s.Struct.Ptr(2)
	return koinos.Opaque{Struct: p.Struct()}, err
}

func (s Block) HasActiveData() bool {
	return s.Struct.HasPtr(2)
}

func (s Block) SetActiveData(v koinos.Opaque) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewActiveData sets the activeData field to a newly
// allocated koinos.Opaque struct, preferring placement in s's segment.
func (s Block) NewActiveData() (koinos.Opaque, error) {
	ss, err := koinos.NewOpaque(s.Struct.Segment())
	if err != nil {
		return koinos.Opaque{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) PassiveData() (koinos.Opaque, error) {
	p, err := s.Struct.Ptr(3)
	return koinos.Opaque{Struct: p.Struct()}, err
}

func (s Block) HasPassiveData() bool {
	return s.Struct.HasPtr(3)
}

func (s Block) SetPassiveData(v koinos.Opaque) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewPassiveData sets the passiveData field to a newly
// allocated koinos.Opaque struct, preferring placement in s's segment.
func (s Block) NewPassiveData() (koinos.Opaque, error) {
	ss, err := koinos.NewOpaque(s.Struct.Segment())
	if err != nil {
		return koinos.Opaque{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

func (s Block) SignatureData() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return []byte(p.Data()), err
}

func (s Block) HasSignatureData() bool {
	return s.Struct.HasPtr(4)
}

func (s Block) SetSignatureData(v []byte) error {
	return s.Struct.SetData(4, v)
}

// Block_List is a list of Block.
type Block_List struct{ capnp.List }

// NewBlock creates a new list of Block.
func NewBlock_List(s *capnp.Segment, sz int32) (Block_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return Block_List{l}, err
}

func (s Block_List) At(i int) Block { return Block{s.List.Struct(i)} }

func (s Block_List) Set(i int, v Block) error { return s.List.SetStruct(i, v.Struct) }

func (s Block_List) String() string {
	str, _ := text.MarshalList(0xf8b832c3c252679d, s.List)
	return str
}

// Block_Future is a wrapper for a Block promised by a client call.
type Block_Future struct{ *capnp.Future }

func (p Block_Future) Struct() (Block, error) {
	s, err := p.Future.Struct()
	return Block{s}, err
}

func (p Block_Future) Header() BlockHeader_Future {
	return BlockHeader_Future{Future: p.Future.Field(1, nil)}
}

func (p Block_Future) ActiveData() koinos.Opaque_Future {
	return koinos.Opaque_Future{Future: p.Future.Field(2, nil)}
}

func (p Block_Future) PassiveData() koinos.Opaque_Future {
	return koinos.Opaque_Future{Future: p.Future.Field(3, nil)}
}

type BlockReceipt struct{ capnp.Struct }

// BlockReceipt_TypeID is the unique identifier for the type BlockReceipt.
const BlockReceipt_TypeID = 0xb38fcf154c2ca1c3

func NewBlockReceipt(s *capnp.Segment) (BlockReceipt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BlockReceipt{st}, err
}

func NewRootBlockReceipt(s *capnp.Segment) (BlockReceipt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return BlockReceipt{st}, err
}

func ReadRootBlockReceipt(msg *capnp.Message) (BlockReceipt, error) {
	root, err := msg.Root()
	return BlockReceipt{root.Struct()}, err
}

func (s BlockReceipt) String() string {
	str, _ := text.Marshal(0xb38fcf154c2ca1c3, s.Struct)
	return str
}

// BlockReceipt_List is a list of BlockReceipt.
type BlockReceipt_List struct{ capnp.List }

// NewBlockReceipt creates a new list of BlockReceipt.
func NewBlockReceipt_List(s *capnp.Segment, sz int32) (BlockReceipt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return BlockReceipt_List{l}, err
}

func (s BlockReceipt_List) At(i int) BlockReceipt { return BlockReceipt{s.List.Struct(i)} }

func (s BlockReceipt_List) Set(i int, v BlockReceipt) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockReceipt_List) String() string {
	str, _ := text.MarshalList(0xb38fcf154c2ca1c3, s.List)
	return str
}

// BlockReceipt_Future is a wrapper for a BlockReceipt promised by a client call.
type BlockReceipt_Future struct{ *capnp.Future }

func (p BlockReceipt_Future) Struct() (BlockReceipt, error) {
	s, err := p.Future.Struct()
	return BlockReceipt{s}, err
}

const schema_8d5f75cd80edffd6 = "x\xda\x94Vol\x14\xd5\x17\xbd\xf7\xbd\x9d\xceni" +
	"\x7f\xdda\x96\x9f@h\xc64\xf8\x8f\xd8\x82\xd4D!" +
	"\xc1m\xa1\x1aZ\xa9\xf4\xb5\x10\x93\x06b\xa6\xdbg;" +
	"\xb0\x9d\xd9\xce\xceVZ\xa9A\x12\x10\x8dD\xa3\xc5\x88" +
	"\x91DB\xf1_ D\x8c\xc6D\xfc\x021\xfaE\x1a" +
	"\x13%\xa8h\x10C4F\x13\xa2_\x80X\x9ey\xb3" +
	"\xb3\xbb\xe3\xd2\xb2\xd0/m'g\xde\x9cs\xcf\xb9\xf7" +
	"\xbee\x89H\x0b\xb9Oy\xbc\x1a\x80mS\xaa\xc4\xdc" +
	"\xe1\xa9K\x7f<xn\x02\xd8bD\xb1\xf9\xae\xa7W" +
	"\xec\xfc}\xcb$l\x8c\xa8H\x00\x9a5e\x0c\x01\xf5" +
	"z\xe5)@\xf1\xff\x15\xe9Eb_\xd3\x01\xd0\xe6\xa3" +
	"8#\xfe\xdc\xf1U\xee\x89\xbd\x10Q\x01\x9aG\x95\x0e" +
	"\xd4\xf7**\xd0\xd2\x19l>\x86`\x8a\x8f\xb3\x94\x06" +
	"\xd4G\x15\x15@\xcf)\xbf\x02\x8a\x13\x93\xdd\xc6\xe9\x87" +
	"\xae\x1e\x96h\x12B\xa3D\xaf\xaaj@\xbd\xb3J\xa2" +
	"\xdb\xab\x8e\x01\x8a\xb3\x0b\xbc\x05\xbb\xb7\xb5\x1c)?\xdb" +
	"G\xc7\xd41\xd4\xebU\x89^\xa0J\xbew\x8c\x8f<" +
	"\xf0\xdc\xcbWgF\xe7\xd4\xb9\xa8\xef\xf2\xd1\xcf\xaaI" +
	"@q\xea\xe0\xbd\xeb\xe6M\xbd\xf4\xe1\x0c\xea\x8e\xaaK" +
	"P\xffL\x95\xeaz\x9e\xd9w\xb2\xfe\xf4\xee\x8f\xff\x8b" +
	"R\x88\x84\xedWw\xa2~\xd4?\xf2=\x9f\xc0\x86\x0e" +
	"r\xc8\xf9\xe5\x85\x93\xe5\x04|tc\xd4E\xbd5*" +
	"\xd1\xab\xa2\xbe\xb8)\xfe\xd8\x97\xcf\x9f\xfd\x0eX\x03\x86" +
	"\xc8oD\x15#\x00\xcd\xd3\xd1%\xd2\x0a%&\xcbv" +
	"\xf6\xd1K/\xce9c\xfd0\x03\xd9\x8b\xb11\xd4\xaf" +
	"\xc4$\xd9W\x86\x9e\xac\xf9{\xcf\xe4\xf9\x99\xccEl" +
	"\xfe6\xb6S\x9e\xf8sLr];q\xe1\xd5\xfao" +
	"\x1e\xb9<c\xb1VU\xbb\xa8\xb3j\xc9\xb5\xb3Zr" +
	"=0\xd0}\xf2\xd4\xf2O.\x97\x95\xc17v\xba\xfa" +
	"/=6G\xbe\xa6\xcc1\x10P\xf4~>}|\xaa" +
	"\xf5\xfb+e`*!\x07kV\xa3\xfeA\x8d|\xef" +
	"h\xcd1x[d\\\xc7sRN:\xb2\xb4\xf0W" +
	"S\xca\xcc\xd8\x99\x95\x1b\\\xd3\xce\x9a)\xcfr\xec&" +
	"\xf9+9\xc2\xdbL\xcfdQ\x1aY$\x04&\x10\x01" +
	"\xb4{V\x02\xb0\xc5\x14\xd92\x82\xf5xM>&\x00" +
	"Z\xe3r\x00v7Ev?\xc1\xa4mz\xd6\x08\xc7" +
	"xI2 \xc6\x01\x8d\xbeQ\x8fg\xb1\x16\x08\xd6\x02" +
	"\xceN\xa4\xcb\xccf\xad\x11\xbe:\xed\xa4\xb6J\x06\x00" +
	"]X\x82\xd3\xd9x\xab\x96cw!\xb28\x8d\x00D" +
	"$Ys\xa1f\x1al;E\xb6\x87\xa0\xfc)u\xa3" +
	"\xb6\xab\x17\x884\xa9\xe4\xa16\xdc\x07D\xa34\x81\x0a" +
	"\x80\xb6\xd9\x05`\x9b(\xb2A\x82\xd4\xeag\x11$\xe2" +
	"\xa3/.V/\xbd`^\x02\x16!\xd8Z\x83@\x8b" +
	"bd\xc1d\xbd\x80z\xa6\xc8\xe4\x05\xb4\x81jz\xa6" +
	"\xc8Z\x03\xb6\xe9\xe5\\0\xfcz^\xa7\xff:A\xbe" +
	"\xf0\xb5\xdcT\xfb\xb9+\x05\xd5\x14\x05=\xdc\xa1\xb5\x1b" +
	"\xac\x9f\"\xcbHAyK\x86\xa4%\x83\x14\x99GP" +
	"#\x81!\xc3\xdd\x00,C\x91m'\xf2K|\xc4r" +
	"rY\x00\xa8\xa0#9\xc8\xad\x81A\x0f\xa3@0\x0a" +
	"(<k\x88g=s\x080\x831 \x18\xbb\x91o" +
	"=\xdc\xeb\x19\xcdz|h\x8d\x99N\xaf\xcf\xf0\xa4k" +
	"z\x81'\xd1\xa2\x84p\x80\x0a\x0a\x1aW\x86\xd2\x932" +
	"\xd3\xe9\xf6\xb6\x02\x83\xa4g\xba\x03\xdc\xc3\xb8x\xff\xd0" +
	"OG.F\x97\x9e\x08\xc24{\xf9\xd6g\xb8\xffa" +
	"\xf4\xbf\x1c\x91_\xc6P\xf3k\xb5\x0b\xb5Z\x03\x90:" +
	"\x19\xbf\x18}\xf8\xc6\xd7\xbfM\xbc3\x95/FB\x1e" +
	"\x0e-\x04H\x05\x7f\xbay\xaa\x8e[\x19/\x1cM\xa5" +
	"\x1c\xb91\x93v\xcc\xfe5\x8e\xed\xb9f\xca+\x10\xb3" +
	"\xa1\xac$\xbdZ\xa3\xc1\xd6Rd\x1b\x08j\x85\xa2\xb0" +
	"\x0e\x00\xd6E\x91m\"(R\xc1\x11@\xdb\xdb*E" +
	"QvY\xca\xe9\xe7\x00P\xb9\xd7\xa4Ua~F\xd1" +
	"\xb2P\xeazgJ]/\x00KSd\xdbB\xa9\xcb" +
	"-\x09\xa5\xeeV8s\xdbsG\xbb\x1c\x0b\xa8]\x0c" +
	"_\x9d\xe9\x0ed+wK\xa1\xaauv\x93\x93\x91\xcd" +
	"_#D\xbe\xfb\x1bJ\x1d\\\x8b\xd7D\x9e7\x1f\x03" +
	"(h\xa9%\xd3\"O|hKIM-\xfdG$" +
	"\x90J9r\x06x\x14\xd9\x0e\x82\xaa\xedd\xa0J\xe4" +
	"\x02G!\x99\x17\x87\xf1\xd2\xc6\x0a\x82\x99\x0aJ\x0au" +
	"\x01\xa0\xb8\xa5\x02@6\xe8\x130\xfcN\xc1xi\xed" +
	"\x96e{\xb6\xd1X\x1c\xd5I\xc7\x963\xe5\x86!\x0c" +
	"\xcf\xf5\xc2d\x92S5\x18\xec$\xaf\xb5|\xb0\x93\x84" +
	"\\\x8a\xb3\x0c\xf6\xe2v\xbc\xb5\xc1\xde\xea\x0f\xc9\x12\x1f" +
	"\xa3@>\x1c6Y\xf36\x8a\xac\xab\x94\xb5NI\"" +
	"\xe8\x0f$y\xc7Xo\xd0\x1ei\x82\xc2\xe5Y'\xe7" +
	"\xa68\x18\xeb\xac!\xcb\x83*\xc3v\xec\x14/\x8e," +
	"'\xc8\x08P;\x8b\xff\x03\xec\xa2\x88\xf1\xd2\x0d\x00P" +
	">,\xf2&\xe5\xbc\x0d\xbf\xe3%\xcfD\x91\xe7\xf8B" +
	"m\xdc`\xafSd\x93\xa1\xa6=(\xab\xf8&E\xf6" +
	"\xae\xec\x8a\x80\xeaaIu\x92\";O\xd0\xdf/\xb2" +
	"\xde?\xf6\x01\xb0s\x14{\xe6#A-\x12\xf1\xcb\xad" +
	"\xcfC\x17\xa0'\x81\x14{n\xc7\x9bY<\xc9An" +
	"\xf6s\x17\xe3\xa5\x8b^\x90\xa1\xf0F\xc2\xb8\xb8\xfa\xda" +
	"\x9d\xce\xc8\xa7\xe3\xfb\x01\xa0\x0554\xe4I\xe1\x87\x1a" +
	"\xde\xc6\"rG\xe6kS\xbcR\x14\x12\x19^i\xb7" +
	"~\\\xf1f[h\x81\x0a;q\x96\xe8\x94\xae\x04e" +
	"\xa19\xaeu\x1a\xc5\x1dX0c\xf8\xb86j\xb0\x09" +
	"\x8a\xec\xad\x90\x1b\x07\xa4E\x81o\xc2\x0b\xb2\x88\x96c" +
	"wrwk\xda\xe0\xdd\x8e\xe3U\x1aW\x85j\xa0\xe9" +
	"\x997\xffZR\xaa\xe6n\xe1\xdf\x7f\x03\x00\x00\xff\xff" +
	"\xc2`k\x0b"

func init() {
	schemas.Register(schema_8d5f75cd80edffd6,
		0x94dc38ecf0cf7112,
		0x9d2e95ff1c6c3916,
		0xa46aea82397b275d,
		0xa5fa3ece1f52a4bc,
		0xac407886197419d8,
		0xacfa908737767d25,
		0xb38fcf154c2ca1c3,
		0xb686ce1dc2957e53,
		0xc28ae36fa3024a54,
		0xd9d889c84e65cfd8,
		0xdb69d60b8cf04bd8,
		0xe0a488f30c666d92,
		0xf846d41d93e29448,
		0xf8b832c3c252679d,
		0xf9da41cfb2fdc55a)
}
