// Code generated by capnpc-go. DO NOT EDIT.

package block_store

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	koinos "koinos"
	protocol "koinos/protocol"
)

type BlockItem struct{ capnp.Struct }

// BlockItem_TypeID is the unique identifier for the type BlockItem.
const BlockItem_TypeID = 0x8024ab7d496f29f2

func NewBlockItem(s *capnp.Segment) (BlockItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return BlockItem{st}, err
}

func NewRootBlockItem(s *capnp.Segment) (BlockItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return BlockItem{st}, err
}

func ReadRootBlockItem(msg *capnp.Message) (BlockItem, error) {
	root, err := msg.Root()
	return BlockItem{root.Struct()}, err
}

func (s BlockItem) String() string {
	str, _ := text.Marshal(0x8024ab7d496f29f2, s.Struct)
	return str
}

func (s BlockItem) BlockID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockItem) HasBlockID() bool {
	return s.Struct.HasPtr(0)
}

func (s BlockItem) SetBlockID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockItem) BlockHeight() uint64 {
	return s.Struct.Uint64(0)
}

func (s BlockItem) SetBlockHeight(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s BlockItem) Block() (koinos.Optional, error) {
	p, err := s.Struct.Ptr(1)
	return koinos.Optional{Struct: p.Struct()}, err
}

func (s BlockItem) HasBlock() bool {
	return s.Struct.HasPtr(1)
}

func (s BlockItem) SetBlock(v koinos.Optional) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated koinos.Optional struct, preferring placement in s's segment.
func (s BlockItem) NewBlock() (koinos.Optional, error) {
	ss, err := koinos.NewOptional(s.Struct.Segment())
	if err != nil {
		return koinos.Optional{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s BlockItem) Receipt() (koinos.Optional, error) {
	p, err := s.Struct.Ptr(2)
	return koinos.Optional{Struct: p.Struct()}, err
}

func (s BlockItem) HasReceipt() bool {
	return s.Struct.HasPtr(2)
}

func (s BlockItem) SetReceipt(v koinos.Optional) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewReceipt sets the receipt field to a newly
// allocated koinos.Optional struct, preferring placement in s's segment.
func (s BlockItem) NewReceipt() (koinos.Optional, error) {
	ss, err := koinos.NewOptional(s.Struct.Segment())
	if err != nil {
		return koinos.Optional{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// BlockItem_List is a list of BlockItem.
type BlockItem_List struct{ capnp.List }

// NewBlockItem creates a new list of BlockItem.
func NewBlockItem_List(s *capnp.Segment, sz int32) (BlockItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return BlockItem_List{l}, err
}

func (s BlockItem_List) At(i int) BlockItem { return BlockItem{s.List.Struct(i)} }

func (s BlockItem_List) Set(i int, v BlockItem) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockItem_List) String() string {
	str, _ := text.MarshalList(0x8024ab7d496f29f2, s.List)
	return str
}

// BlockItem_Future is a wrapper for a BlockItem promised by a client call.
type BlockItem_Future struct{ *capnp.Future }

func (p BlockItem_Future) Struct() (BlockItem, error) {
	s, err := p.Future.Struct()
	return BlockItem{s}, err
}

func (p BlockItem_Future) Block() koinos.Optional_Future {
	return koinos.Optional_Future{Future: p.Future.Field(1, nil)}
}

func (p BlockItem_Future) Receipt() koinos.Optional_Future {
	return koinos.Optional_Future{Future: p.Future.Field(2, nil)}
}

type BlockRecord struct{ capnp.Struct }

// BlockRecord_TypeID is the unique identifier for the type BlockRecord.
const BlockRecord_TypeID = 0xbedc648042e1373a

func NewBlockRecord(s *capnp.Segment) (BlockRecord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return BlockRecord{st}, err
}

func NewRootBlockRecord(s *capnp.Segment) (BlockRecord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return BlockRecord{st}, err
}

func ReadRootBlockRecord(msg *capnp.Message) (BlockRecord, error) {
	root, err := msg.Root()
	return BlockRecord{root.Struct()}, err
}

func (s BlockRecord) String() string {
	str, _ := text.Marshal(0xbedc648042e1373a, s.Struct)
	return str
}

func (s BlockRecord) BlockID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockRecord) HasBlockID() bool {
	return s.Struct.HasPtr(0)
}

func (s BlockRecord) SetBlockID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockRecord) BlockHeight() uint64 {
	return s.Struct.Uint64(0)
}

func (s BlockRecord) SetBlockHeight(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s BlockRecord) PreviousBlockIDs() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.DataList{List: p.List()}, err
}

func (s BlockRecord) HasPreviousBlockIDs() bool {
	return s.Struct.HasPtr(1)
}

func (s BlockRecord) SetPreviousBlockIDs(v capnp.DataList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewPreviousBlockIDs sets the previousBlockIDs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s BlockRecord) NewPreviousBlockIDs(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s BlockRecord) Block() (protocol.Block, error) {
	p, err := s.Struct.Ptr(2)
	return protocol.Block{Struct: p.Struct()}, err
}

func (s BlockRecord) HasBlock() bool {
	return s.Struct.HasPtr(2)
}

func (s BlockRecord) SetBlock(v protocol.Block) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated protocol.Block struct, preferring placement in s's segment.
func (s BlockRecord) NewBlock() (protocol.Block, error) {
	ss, err := protocol.NewBlock(s.Struct.Segment())
	if err != nil {
		return protocol.Block{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s BlockRecord) BlockReceipt() (koinos.Optional, error) {
	p, err := s.Struct.Ptr(3)
	return koinos.Optional{Struct: p.Struct()}, err
}

func (s BlockRecord) HasBlockReceipt() bool {
	return s.Struct.HasPtr(3)
}

func (s BlockRecord) SetBlockReceipt(v koinos.Optional) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewBlockReceipt sets the blockReceipt field to a newly
// allocated koinos.Optional struct, preferring placement in s's segment.
func (s BlockRecord) NewBlockReceipt() (koinos.Optional, error) {
	ss, err := koinos.NewOptional(s.Struct.Segment())
	if err != nil {
		return koinos.Optional{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

// BlockRecord_List is a list of BlockRecord.
type BlockRecord_List struct{ capnp.List }

// NewBlockRecord creates a new list of BlockRecord.
func NewBlockRecord_List(s *capnp.Segment, sz int32) (BlockRecord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return BlockRecord_List{l}, err
}

func (s BlockRecord_List) At(i int) BlockRecord { return BlockRecord{s.List.Struct(i)} }

func (s BlockRecord_List) Set(i int, v BlockRecord) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockRecord_List) String() string {
	str, _ := text.MarshalList(0xbedc648042e1373a, s.List)
	return str
}

// BlockRecord_Future is a wrapper for a BlockRecord promised by a client call.
type BlockRecord_Future struct{ *capnp.Future }

func (p BlockRecord_Future) Struct() (BlockRecord, error) {
	s, err := p.Future.Struct()
	return BlockRecord{s}, err
}

func (p BlockRecord_Future) Block() protocol.Block_Future {
	return protocol.Block_Future{Future: p.Future.Field(2, nil)}
}

func (p BlockRecord_Future) BlockReceipt() koinos.Optional_Future {
	return koinos.Optional_Future{Future: p.Future.Field(3, nil)}
}

const schema_c29f2906a1403dbe = "x\xda\xac\xd2?h\x14A\x14\x06\xf0\xef\x9b\x99\\\x8c" +
	"\x98x\xc3\xad\xd8\xb9\x8dM@\x8c\xc6B\x08\x08\xe7\x92" +
	"\"\x07\x16\xf7\xd6\xcaJ.\x9b!\x9e\xff\xf6\xd8;\xc5" +
	"\xc2#)\x14\x82 Z\xda\x88\x1e\xd8\x88\xe9\x82b\xa1" +
	"AsJ\"(bo\xa3 i\xc5*\xdd\xca\xdc\xf9" +
	"\xe7H\xa5h\xf7\xf6\xe3\xbd\xb7\xc3o\xe6\xd0\x0a\xcb\xea" +
	"\xf0\xd0f\x01\x90\xeaP!\xff6\x9eV\xda\x8f\xf6/" +
	"B\xf6\x91\xf9\xea\xb1r\xa70~o\x0dCz\x188" +
	"rJG,\xd5}Yrz\x13\xcc\xa7\x8e~\x8a\x16" +
	"\xe7>\xaen\xef6\xbe\xfb\xb9\x89Y\xfa\xd0+\xdf\x99" +
	"\x90X\xcfg\xcf\xa7\xc9\xb9\xd3\xcd\x96I37\xf1\xf3" +
	"#\xcd\xdc\xc1\xa4\xd6\xb8\xd8\x98\x8a|Ri\xb9\x0b\xa8" +
	"\x92R\xd4\x060\x04l-\xb2\xb5P\xaej\xca\x92\"" +
	"\x19\xd0\x87\xd7g\x01\xb9\xa6)\xb7\x15\xadb@\x05\xd8" +
	"\x9b\x93\x80,i\xca+E\xabU@\x0d\xd8\x97\x11 " +
	"\xcf4eKq\xa1\xf7\xd7\xca\xb4\x18\xaa\xfc\xf1\xfa\x97" +
	"\x9d\x13\x9fk_!F\xf1\xf8.Bs\x14\x8a\xa3`" +
	"\xff\xa43\xae\x8e\xe1\xf93-\x8e@q\x04\x0c{)" +
	"\x8by\xdc\xb9\xd2\xad\xcc\xecx\x02\xa0L\xcb\xd0\xcf\x0f" +
	"\x86\x96{\xc5\x90dU\x93\xc5\xfc\xee|\xbc\xd6\x9d|" +
	"\xba\x05\x90Ep!s\x89\xab7Z\x7f\xbf\xa8\xdb9" +
	"pb\xcf\xfb[+?\x16\xfd\x91g\xec\x924\xe3\x9c" +
	"\x17\x0d~\x89\xb6#\xdb\x0e\xe5\x8e\xa6<\xf8-\xda\xf1" +
	"\xa2\xf75ey@\xf4\xe1\x0d@\x965ec@\xf4" +
	"\xb5g~\xa1)o\x15\xad\xd1\x01\x0d`\xdf\x9c\x05d" +
	"C\xf3\xa4\xe1?:\xe7\x8d\xcc]\xae\xa7\x97\x9a\xec\xbf" +
	"\x88\xe9&\xc01\xf4\x10\xfc\xe0\xd8\xc0Ul\xb3\xed/" +
	"\x8c]\x82\xdd\xff\x85\xf8{\x00\x00\x00\xff\xff\x96\x7f\xc7" +
	"\xa5"

func init() {
	schemas.Register(schema_c29f2906a1403dbe,
		0x8024ab7d496f29f2,
		0xbedc648042e1373a)
}
