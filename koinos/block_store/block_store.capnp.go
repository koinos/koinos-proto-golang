// Code generated by capnpc-go. DO NOT EDIT.

package block_store

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	koinos "github.com/koinos/koinos-proto-golang/koinos"
	protocol "github.com/koinos/koinos-proto-golang/koinos/protocol"
)

type BlockItem struct{ capnp.Struct }

// BlockItem_TypeID is the unique identifier for the type BlockItem.
const BlockItem_TypeID = 0x8024ab7d496f29f2

func NewBlockItem(s *capnp.Segment) (BlockItem, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return BlockItem{st}, err
}

func NewRootBlockItem(s *capnp.Segment) (BlockItem, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return BlockItem{st}, err
}

func ReadRootBlockItem(msg *capnp.Message) (BlockItem, error) {
	root, err := msg.Root()
	return BlockItem{root.Struct()}, err
}

func (s BlockItem) String() string {
	str, _ := text.Marshal(0x8024ab7d496f29f2, s.Struct)
	return str
}

func (s BlockItem) BlockID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockItem) HasBlockID() bool {
	return s.Struct.HasPtr(0)
}

func (s BlockItem) SetBlockID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockItem) BlockHeight() uint64 {
	return s.Struct.Uint64(0)
}

func (s BlockItem) SetBlockHeight(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s BlockItem) Block() (koinos.Optional, error) {
	p, err := s.Struct.Ptr(1)
	return koinos.Optional{Struct: p.Struct()}, err
}

func (s BlockItem) HasBlock() bool {
	return s.Struct.HasPtr(1)
}

func (s BlockItem) SetBlock(v koinos.Optional) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated koinos.Optional struct, preferring placement in s's segment.
func (s BlockItem) NewBlock() (koinos.Optional, error) {
	ss, err := koinos.NewOptional(s.Struct.Segment())
	if err != nil {
		return koinos.Optional{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

func (s BlockItem) Receipt() (koinos.Optional, error) {
	p, err := s.Struct.Ptr(2)
	return koinos.Optional{Struct: p.Struct()}, err
}

func (s BlockItem) HasReceipt() bool {
	return s.Struct.HasPtr(2)
}

func (s BlockItem) SetReceipt(v koinos.Optional) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewReceipt sets the receipt field to a newly
// allocated koinos.Optional struct, preferring placement in s's segment.
func (s BlockItem) NewReceipt() (koinos.Optional, error) {
	ss, err := koinos.NewOptional(s.Struct.Segment())
	if err != nil {
		return koinos.Optional{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// BlockItem_List is a list of BlockItem.
type BlockItem_List struct{ capnp.List }

// NewBlockItem creates a new list of BlockItem.
func NewBlockItem_List(s *capnp.Segment, sz int32) (BlockItem_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return BlockItem_List{l}, err
}

func (s BlockItem_List) At(i int) BlockItem { return BlockItem{s.List.Struct(i)} }

func (s BlockItem_List) Set(i int, v BlockItem) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockItem_List) String() string {
	str, _ := text.MarshalList(0x8024ab7d496f29f2, s.List)
	return str
}

// BlockItem_Future is a wrapper for a BlockItem promised by a client call.
type BlockItem_Future struct{ *capnp.Future }

func (p BlockItem_Future) Struct() (BlockItem, error) {
	s, err := p.Future.Struct()
	return BlockItem{s}, err
}

func (p BlockItem_Future) Block() koinos.Optional_Future {
	return koinos.Optional_Future{Future: p.Future.Field(1, nil)}
}

func (p BlockItem_Future) Receipt() koinos.Optional_Future {
	return koinos.Optional_Future{Future: p.Future.Field(2, nil)}
}

type BlockRecord struct{ capnp.Struct }

// BlockRecord_TypeID is the unique identifier for the type BlockRecord.
const BlockRecord_TypeID = 0xbedc648042e1373a

func NewBlockRecord(s *capnp.Segment) (BlockRecord, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return BlockRecord{st}, err
}

func NewRootBlockRecord(s *capnp.Segment) (BlockRecord, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return BlockRecord{st}, err
}

func ReadRootBlockRecord(msg *capnp.Message) (BlockRecord, error) {
	root, err := msg.Root()
	return BlockRecord{root.Struct()}, err
}

func (s BlockRecord) String() string {
	str, _ := text.Marshal(0xbedc648042e1373a, s.Struct)
	return str
}

func (s BlockRecord) BlockID() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s BlockRecord) HasBlockID() bool {
	return s.Struct.HasPtr(0)
}

func (s BlockRecord) SetBlockID(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s BlockRecord) BlockHeight() uint64 {
	return s.Struct.Uint64(0)
}

func (s BlockRecord) SetBlockHeight(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s BlockRecord) PreviousBlockIDs() (capnp.DataList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.DataList{List: p.List()}, err
}

func (s BlockRecord) HasPreviousBlockIDs() bool {
	return s.Struct.HasPtr(1)
}

func (s BlockRecord) SetPreviousBlockIDs(v capnp.DataList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewPreviousBlockIDs sets the previousBlockIDs field to a newly
// allocated capnp.DataList, preferring placement in s's segment.
func (s BlockRecord) NewPreviousBlockIDs(n int32) (capnp.DataList, error) {
	l, err := capnp.NewDataList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.DataList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s BlockRecord) Block() (protocol.Block, error) {
	p, err := s.Struct.Ptr(2)
	return protocol.Block{Struct: p.Struct()}, err
}

func (s BlockRecord) HasBlock() bool {
	return s.Struct.HasPtr(2)
}

func (s BlockRecord) SetBlock(v protocol.Block) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewBlock sets the block field to a newly
// allocated protocol.Block struct, preferring placement in s's segment.
func (s BlockRecord) NewBlock() (protocol.Block, error) {
	ss, err := protocol.NewBlock(s.Struct.Segment())
	if err != nil {
		return protocol.Block{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s BlockRecord) BlockReceipt() (koinos.Optional, error) {
	p, err := s.Struct.Ptr(3)
	return koinos.Optional{Struct: p.Struct()}, err
}

func (s BlockRecord) HasBlockReceipt() bool {
	return s.Struct.HasPtr(3)
}

func (s BlockRecord) SetBlockReceipt(v koinos.Optional) error {
	return s.Struct.SetPtr(3, v.Struct.ToPtr())
}

// NewBlockReceipt sets the blockReceipt field to a newly
// allocated koinos.Optional struct, preferring placement in s's segment.
func (s BlockRecord) NewBlockReceipt() (koinos.Optional, error) {
	ss, err := koinos.NewOptional(s.Struct.Segment())
	if err != nil {
		return koinos.Optional{}, err
	}
	err = s.Struct.SetPtr(3, ss.Struct.ToPtr())
	return ss, err
}

// BlockRecord_List is a list of BlockRecord.
type BlockRecord_List struct{ capnp.List }

// NewBlockRecord creates a new list of BlockRecord.
func NewBlockRecord_List(s *capnp.Segment, sz int32) (BlockRecord_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return BlockRecord_List{l}, err
}

func (s BlockRecord_List) At(i int) BlockRecord { return BlockRecord{s.List.Struct(i)} }

func (s BlockRecord_List) Set(i int, v BlockRecord) error { return s.List.SetStruct(i, v.Struct) }

func (s BlockRecord_List) String() string {
	str, _ := text.MarshalList(0xbedc648042e1373a, s.List)
	return str
}

// BlockRecord_Future is a wrapper for a BlockRecord promised by a client call.
type BlockRecord_Future struct{ *capnp.Future }

func (p BlockRecord_Future) Struct() (BlockRecord, error) {
	s, err := p.Future.Struct()
	return BlockRecord{s}, err
}

func (p BlockRecord_Future) Block() protocol.Block_Future {
	return protocol.Block_Future{Future: p.Future.Field(2, nil)}
}

func (p BlockRecord_Future) BlockReceipt() koinos.Optional_Future {
	return koinos.Optional_Future{Future: p.Future.Field(3, nil)}
}

const schema_c29f2906a1403dbe = "x\xda\xac\xd2\xbdk\x14A\x18\x06\xf0\xe7\x99\x99\xcd\x1a" +
	"5\xf1\x86\x9c\xd8\xb9\x8d\x16\x011\x1a\x111 \x9cK" +
	"\x8a\x1c(\xe4]\xff\x00\xd9l\x96x~\xed\xb1w\x8a" +
	"\x85GR(\x04A\xb4\xb4\x11=\xb0\x11\xd3\x89\x1f\x85" +
	"\x04\x93S\x8c\xa0\x88\xbd\x8d\x82\xd8\x8aU\xba\x95\xb9\xf3" +
	"\xe3H\xa5h\xb7\xfb\xf0\xbe\xef\xcc\xfcf\xf6\x1dW\x15" +
	"\xb5\xdf{\xb2\x05\x90Eo\xa0\xf86\x9aU[\x0fv" +
	"-@v\x92\xc5\xf2\x91J{`\xf4\xce*<\xed\x03" +
	"\x07V\xbc\x90#\xef=\x1f\x18y\xeb}\x01\x8b\x89C" +
	"\x1f\xc3\x85\xd9\x0f\xcb\x1b\xab\x8d\xab\xde\xedG\x1c9\xec" +
	"\xbb\xcf\x83~@\x14\x88\x8b\x99\xb3Yr\xe6d\xa3i" +
	"\xb2<\x1d\xfb\xf9\x93\xe5\xe9\xde$\xae\x9f\xafO\x84." +
	"\xa96\xd3s\x98&\xa5\xa4\x0d`\x08\xd88\xb4q " +
	"\x975eQ\x91,\xd3\x85Wg\x00\xb9\xa2)7\x15" +
	"\xadb\x99\x0a\xb0\xd7\xc7\xddA4\xe5\x85\xa2\xd5\xaaL" +
	"\x0d\xd8\x95\x10\x90g\x9a\xb2\xae8\xdf]\xb5:)\x86" +
	"\xaax\xf4\xea\xf3\xe6\xb1O\xf1W\x88Q<\xba\x95\xd0" +
	"\x1c\x82\xe2\x10\xd8\xdb\xe9TZ\x83?w\xaa\xc9A(" +
	"\x0e\x82A7e\xa9\x88\xda\x97:\xd5\xa9M\x8f\x01T" +
	"h\x19\xb8\xfe\xfe\xd0r\x87\x18\x92\x9c\xd6d\xa9\xb8=" +
	"\x17\xadv\xc6\x9f\xae\x03d\x09\x9c\xcf\xd3$\xad\xd5\x9b" +
	"\x7f?\xa8\xd3\xdesl\xfb\xbb\x1b\x0f\x7f\x0c\xfa#\xcf" +
	"(M\xb2\x9c\xb3N\xb4\xfcK\xb4\x15\xdaV \xb74" +
	"\xe5\xdeo\xd1\xb6\x13\xbd\xab)K}\xa2\xf7\xaf\x01\xb2" +
	"\xa4)k}\xa2/\x1d\xf3sMy\xa3h\x8d.\xd3" +
	"\x00\xf6\xf5i@\xd64O\x18\xfe\xa3sQ\xcf\xd3\x8b" +
	"\xb5\xecB\x83\xbd\x171\xd9\x008\x8c.\x82k\x1c\xee" +
	"\xbb\x8a\x0d\xb6\xbd\x81Q\x9a`\xdb\x7f!\xfe\x1e\x00\x00" +
	"\xff\xff0\xc6\xc7e"

func init() {
	schemas.Register(schema_c29f2906a1403dbe,
		0x8024ab7d496f29f2,
		0xbedc648042e1373a)
}
